#include "..\..\..\..\..\..\svn_revision.h"  

export prototype STRING GetRevision(); 
export prototype RemoveOldVersions(); 
export prototype RemoveOldService(); 
export prototype RemoveOldProcess(); 
 
prototype UninstallAllOldVersions();
prototype UninstallOneOldVersion (STRING,STRING,STRING,STRING);  
prototype RunUninstall(STRING,STRING,STRING,STRING); 

function STRING GetRevision()  
	STRING sRevision;
begin       
	NumToStr(sRevision,SVN_REVISION);
	return "3.5." + sRevision;
end; 
 
function RemoveOldService()
   NUMBER nvReturnValue;      
   BOOL bReturnValue;
begin                
	bReturnValue = TRUE;      
   		     
	Enable (HOURGLASS);
	SERVICE_IS_PARAMS.nStopServiceWaitCount = 1;
	nvReturnValue = ServiceRemoveService ("BELGIUM_ID_CARD_SERVICE");
	nvReturnValue = ServiceRemoveService ("eID Privacy Service");
	nvReturnValue = ServiceRemoveService ("eID CRL Service");
	Disable (HOURGLASS);  
	  
	return bReturnValue;
end;

function RemoveOldProcess()
   NUMBER nvReturnValue;      
   BOOL bReturnValue;
begin                
	bReturnValue = TRUE;      
   		     
	Enable (HOURGLASS);
	LaunchApplication ("Taskkill", "/F /IM beidsystemtray.exe","",5000,SW_HIDE,LAAW_OPTION_WAIT); 
	LaunchApplication ("Taskkill", "/F /IM beidgui.exe","",5000,SW_HIDE,LAAW_OPTION_WAIT); 
	LaunchApplication ("Taskkill", "/F /IM beid35gui.exe","",5000,SW_HIDE,LAAW_OPTION_WAIT); 
	LaunchApplication ("Taskkill", "/F /IM xsign.exe","",5000,SW_HIDE,LAAW_OPTION_WAIT); 
	LaunchApplication ("Taskkill", "/F /IM beid35xsign.exe","",5000,SW_HIDE,LAAW_OPTION_WAIT); 
	Disable (HOURGLASS);  
		  
	return bReturnValue;
end; 

function RemoveOldVersions()
   NUMBER nvReturnValue;      
   BOOL bReturnValue;
begin                
	bReturnValue = TRUE; 
	     
	bReturnValue=UninstallAllOldVersions (); 
	  
	return bReturnValue;
end;

function UninstallAllOldVersions ()
	STRING sVersionID,sTypeInstall,sDefaultName,sIss;
begin   
	              	
	// Check whether version 2.3.09 through 2.3.13 was installed
	sVersionID="{44CFED0B-BF92-455B-94D3-FA967A81712E}";
	sTypeInstall="msi";
	sDefaultName="2.3";  
	sIss="";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;
	
	// Check whether version 2.4 was installed
 	sVersionID="{BA42ACEA-3782-4CAD-AA10-EBC2FA14BB7E}";
	sTypeInstall="IS+msi";
	sDefaultName="2.4"; 
	sIss="uninstall24.iss";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;

	// Check whether version 2.5 was installed
	sVersionID="{85D158F2-648C-486A-9ECC-C5D4F4ACC965}";
	sTypeInstall="IS+msi";
	sDefaultName="2.5";
	sIss="uninstall25.iss";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;
	
	// Check whether version 2.6 was installed
	sVersionID="{EA248851-A7D5-4906-8C46-A3CA267F6A24}";
	sTypeInstall="IS+msi";
	sDefaultName="2.6";
	sIss="uninstall26.iss";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;
	
	// Check whether version 3.0 was installed  
	sVersionID="{82493A8F-7125-4EAD-8B6D-E9EA889ECD6A}";   
	sTypeInstall="IS";
	sDefaultName="3.0";
	sIss="uninstall30.iss";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;
	   
	// Check whether version 3.5 msi was installed
	sVersionID="{824563DE-75AD-4166-9DC0-B6482F2DED5A}";
	sTypeInstall="msi";
	sDefaultName="3.5";
	sIss="";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;
	   
	// Check whether version 3.5 was installed     	
	sVersionID="{40420E84-2E4C-46B2-942C-F1249E40FDCB}";
	sTypeInstall="IS";
	sDefaultName="3.5";
	sIss="uninstall35.iss";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;
	
	// Check whether version 3.5-Pro msi was installed
	sVersionID="{FBB5D096-1158-4e5e-8EA3-C73B3F30780A}";
	sTypeInstall="msi";
	sDefaultName="3.5 Pro";
	sIss="";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;
	         
	// Check whether version 3.5 Pro was installed  
/*
	sVersionID="{4C2FBD23-962C-450A-A578-7556BC79B8B2}";
	sTypeInstall="IS";
	sDefaultName="3.5 Pro";
	sIss="uninstall35Pro.iss";
	if (UninstallOneOldVersion(sVersionID,sTypeInstall,sDefaultName,sIss) = FALSE) then 
		return FALSE;
	endif;
*/	
	    
	return TRUE;
end;  

function UninstallOneOldVersion (sVersionID,sTypeInstall,sDefaultName,sIss)  
	NUMBER nvDefaultRoot, iCount;   
	BOOL bReturn; 
	NUMBER nResult, nvType, nvSize, nLocation1, nLocation2, nLen; 
  	STRING szKey, szExe, szCommandeLine, szDisplayName, szDisplayVersion, szSub; 
begin    
      
    bReturn = TRUE;   
    
	if sTypeInstall="IS+msi" then             
		szKey="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\InstallShield_" + sVersionID;
	else
		szKey="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" + sVersionID;
	endif;
	
    szExe="";
    szCommandeLine="";      
    
	// Get the current root node for the registry 
	nvDefaultRoot = RegDBGetDefaultRoot ();     
	
	for iCount = 1 to 2
		// Set the default root 
		if iCount = 1 then 
			RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);           
    	else
			RegDBSetDefaultRoot (HKEY_CURRENT_USER);           
    	endif;    

		if (RegDBKeyExist (szKey) = 1) then         
			if sTypeInstall="msi" then     
		    	szExe="MsiExec.exe";
				szCommandeLine="/X" + sVersionID + " /passive";
			else
      			if (RegDBGetKeyValueEx(szKey, "UninstallString", nvType, szCommandeLine, nvSize) = 0) then    
    				nLocation1 = StrFindEx (szCommandeLine, ".exe", 0); 
    				nLen=StrLength(szCommandeLine);
    				if (nLocation1 >= 0) then   
    					nLocation1+=4;    
    			    	StrSub(szSub,szCommandeLine,nLocation1,1);
    					if (szSub="\"") then
    						nLocation1++;
    					endif; 
    					nLocation2=nLocation1;  
    			    	StrSub(szSub,szCommandeLine,nLocation1,1);
    					if (szSub=" ") then
    						nLocation2++;
    					endif;   
    					StrSub(szSub,szCommandeLine,0,nLocation1);
						szExe=szSub; 
    					StrSub(szSub,szCommandeLine,nLocation2,nLen-nLocation2);
						szCommandeLine=szSub;   
					endif;

					szCommandeLine = szCommandeLine + " /s /f1\"" + SUPPORTDIR ^ sIss + "\"";
      			endif;
        	endif;
        
      		if (RegDBGetKeyValueEx(szKey, "DisplayName", nvType, szDisplayName, nvSize) != 0) then
      			szDisplayName=sDefaultName;
      		endif;
      		if (RegDBGetKeyValueEx(szKey, "DisplayVersion", nvType, szDisplayVersion, nvSize) = 0) then
      			szDisplayName = szDisplayName + " (" + szDisplayVersion + ")";
      		endif;  
      	
	    	if (RunUninstall(szKey,szExe,szCommandeLine,szDisplayName) = FALSE) then 
	    		bReturn = FALSE;
	    	endif;
		endif;      
    endfor;
	
	// Restore the original default root
	RegDBSetDefaultRoot (nvDefaultRoot);
	
	return bReturn;  
end;
  
function RunUninstall (szKey,szExe,szCommandeLine,sVersion)  
	STRING sMessage,szSub;
	NUMBER nContinue, nTimeout; 
begin                 
	 	
	if(szExe = "" && szCommandeLine = "") then   
		Sprintf(sMessage,@IDS_UITEXT_MANUAL_REMOVE_OLD_VERSION,sVersion);
	    MessageBox(sMessage,WARNING);   
	    return FALSE;
	 else  
		Sprintf(sMessage,@IDS_UITEXT_REMOVE_OLD_VERSION,sVersion);
		if (AskYesNo(sMessage, YES) = NO) then    
			return FALSE;  
		endif; 
		
   		RemoveOldService();	     
		RemoveOldProcess();  
	    
 		StrSub(szSub,szCommandeLine,0,1);
    	if (szSub="\"") then
 			StrSub(szSub,szCommandeLine,1,StrLength(szCommandeLine)-2);  
 			szExe=szSub;
    	endif; 

	    Enable (HOURGLASS);
	    //LaunchAppAndWait doesn't work so we just wait until the key is removed
		LaunchApp (szExe, szCommandeLine);
	    nTimeout=0;
	    nContinue=1; 
	    while(nContinue)          
	    	if (RegDBKeyExist (szKey) != 1) then     
	       		nContinue=0; 
	       	else 
	       		if (nTimeout>60) then  
	       			Disable (HOURGLASS);
				    MessageBox(@IDS_UITEXT_UNINSTALL_FAILED,SEVERE);   
	       			return FALSE;
	       		endif;
	       		Delay (1); 
	       		nTimeout++;
	       	endif;
	    endwhile;        
        Disable (HOURGLASS);
	endif;
	
	return TRUE;  
end;