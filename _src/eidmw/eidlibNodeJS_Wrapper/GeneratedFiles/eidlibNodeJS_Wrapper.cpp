/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

void SWIG_V8_Raise(const char* msg) {
  v8::ThrowException(v8::Exception::Error(v8::String::New(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char* msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char* msg) {
    err = v8::Exception::Error(v8::String::New(msg));
    if(code != SWIG_TypeError) {
      v8::ThrowException(err);
    }
  }
  v8::Handle<v8::Value> err;
};

// Note: these typedefs and defines are used to deal with  v8 API changes since version 3.19.00

#if (SWIG_V8_VERSION < 0x031900)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif


/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    v8::V8::AdjustAmountOfExternalAllocatedMemory(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (SWIG_V8_VERSION < 0x031900 || SWIG_V8_VERSION >= 0x032100)
    handle.ClearWeak();
    handle.Dispose();
#else
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#endif

    handle.Clear();
    v8::V8::AdjustAmountOfExternalAllocatedMemory(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#else
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#endif
};

v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void** ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (SWIG_V8_VERSION < 0x031900)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}

#if (SWIG_V8_VERSION < 0x031900)
void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter)
#else
void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy)
#endif
{
#if (SWIG_V8_VERSION < 0x031900)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#endif

  delete proxy;
}

int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void** ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (SWIG_V8_VERSION < 0x031900)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void* ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy* cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (SWIG_V8_VERSION < 0x031900)
  obj->SetPointerInInternalField(0, cdata);
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (SWIG_V8_VERSION < 0x031900)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
  cdata->handle.MarkIndependent();
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }

#if (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

#endif
}

int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void** ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;

  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

v8::Handle<v8::Object> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;
  v8::Handle<v8::FunctionTemplate> class_templ;

#if (SWIG_V8_VERSION < 0x031900)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *iso = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Handle<v8::FunctionTemplate>::New(iso, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Handle<v8::FunctionTemplate>::New(iso, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  return scope.Close(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

#if (SWIG_V8_VERSION < 0x031900)
v8::Handle<v8::Value> _SWIGV8_wrap_equals(const v8::Arguments &args) {
#else
void _SWIGV8_wrap_equals(const v8::FunctionCallbackInfo<v8::Value>& args) {
#endif
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  v8::Boolean::New(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}

#if (SWIG_V8_VERSION < 0x031900)
v8::Handle<v8::Value> _wrap_getCPtr(const v8::Arguments &args) {
#else
void _wrap_getCPtr(const v8::FunctionCallbackInfo<v8::Value>& args) {
#endif
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = v8::Number::New(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void* data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(v8::String::New("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info* SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    v8::HandleScope scope;
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (SWIG_V8_VERSION < 0x031900)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (SWIG_V8_VERSION < 0x031900)
void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter)
{
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#else
void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SwigV8PackedData *cdata)
{
#endif

  delete cdata;

#if (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#else
  object->Dispose();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  v8::HandleScope scope;

  SwigV8PackedData* cdata = new SwigV8PackedData(data, size, type);
  v8::Handle<v8::Object> obj = v8::Object::New();

  obj->SetHiddenValue(v8::String::New("__swig__packed_data__"), v8::Boolean::New(true));

#if (SWIG_V8_VERSION < 0x031900)
  obj->SetPointerInInternalField(0, cdata);
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (SWIG_V8_VERSION < 0x031900)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
  cdata->handle.MarkIndependent();
#else
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
# if (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
# else
  cdata->handle.MarkIndependent();
# endif
#endif

  return scope.Close(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
  v8::HandleScope scope;
  if (result->IsUndefined()) {
    result = v8::Array::New();
  }
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
  arr->Set(arr->Length(), obj);

  return scope.Close(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if SWIG_V8_VERSION < 0x031900
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    v8::HandleScope scope;
    v8::Local<v8::FunctionTemplate> class_templ = v8::FunctionTemplate::New();
    class_templ->SetClassName(v8::String::NewSymbol(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(v8::String::NewSymbol("equals"), v8::FunctionTemplate::New(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(v8::String::NewSymbol("getCPtr"), v8::FunctionTemplate::New(_wrap_getCPtr));

    return scope.Close(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(v8::String::NewSymbol(symbol), v8::FunctionTemplate::New(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(v8::String::NewSymbol(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(v8::String::NewSymbol(symbol), v8::FunctionTemplate::New(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(v8::String::NewSymbol(symbol), getter, setter);
}

void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_eIDMW__PTEIDPin swig_types[1]
#define SWIGTYPE_p_eIDMW__PTEIDPins swig_types[2]
#define SWIGTYPE_p_eIDMW__PTEID_ADDR swig_types[3]
#define SWIGTYPE_p_eIDMW__PTEID_Address swig_types[4]
#define SWIGTYPE_p_eIDMW__PTEID_Biometric swig_types[5]
#define SWIGTYPE_p_eIDMW__PTEID_ByteArray swig_types[6]
#define SWIGTYPE_p_eIDMW__PTEID_CCXML_Doc swig_types[7]
#define SWIGTYPE_p_eIDMW__PTEID_Card swig_types[8]
#define SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo swig_types[9]
#define SWIGTYPE_p_eIDMW__PTEID_Certif swig_types[10]
#define SWIGTYPE_p_eIDMW__PTEID_Certificate swig_types[11]
#define SWIGTYPE_p_eIDMW__PTEID_Certificates swig_types[12]
#define SWIGTYPE_p_eIDMW__PTEID_Certifs swig_types[13]
#define SWIGTYPE_p_eIDMW__PTEID_Config swig_types[14]
#define SWIGTYPE_p_eIDMW__PTEID_Crypto swig_types[15]
#define SWIGTYPE_p_eIDMW__PTEID_EIDCard swig_types[16]
#define SWIGTYPE_p_eIDMW__PTEID_EId swig_types[17]
#define SWIGTYPE_p_eIDMW__PTEID_ExBadTransaction swig_types[18]
#define SWIGTYPE_p_eIDMW__PTEID_ExBadUsage swig_types[19]
#define SWIGTYPE_p_eIDMW__PTEID_ExCardBadType swig_types[20]
#define SWIGTYPE_p_eIDMW__PTEID_ExCardChanged swig_types[21]
#define SWIGTYPE_p_eIDMW__PTEID_ExCardTypeUnknown swig_types[22]
#define SWIGTYPE_p_eIDMW__PTEID_ExCertNoIssuer swig_types[23]
#define SWIGTYPE_p_eIDMW__PTEID_ExCertNoRoot swig_types[24]
#define SWIGTYPE_p_eIDMW__PTEID_ExCmdNotAllowed swig_types[25]
#define SWIGTYPE_p_eIDMW__PTEID_ExCmdNotSupported swig_types[26]
#define SWIGTYPE_p_eIDMW__PTEID_ExDocTypeUnknown swig_types[27]
#define SWIGTYPE_p_eIDMW__PTEID_ExFileTypeUnknown swig_types[28]
#define SWIGTYPE_p_eIDMW__PTEID_ExNoCardPresent swig_types[29]
#define SWIGTYPE_p_eIDMW__PTEID_ExNoReader swig_types[30]
#define SWIGTYPE_p_eIDMW__PTEID_ExNotAllowByUser swig_types[31]
#define SWIGTYPE_p_eIDMW__PTEID_ExParamRange swig_types[32]
#define SWIGTYPE_p_eIDMW__PTEID_ExReaderSetChanged swig_types[33]
#define SWIGTYPE_p_eIDMW__PTEID_ExReleaseNeeded swig_types[34]
#define SWIGTYPE_p_eIDMW__PTEID_ExSOD swig_types[35]
#define SWIGTYPE_p_eIDMW__PTEID_ExUnknown swig_types[36]
#define SWIGTYPE_p_eIDMW__PTEID_ExUserMustAnswer swig_types[37]
#define SWIGTYPE_p_eIDMW__PTEID_Exception swig_types[38]
#define SWIGTYPE_p_eIDMW__PTEID_ID swig_types[39]
#define SWIGTYPE_p_eIDMW__PTEID_MemoryCard swig_types[40]
#define SWIGTYPE_p_eIDMW__PTEID_Object swig_types[41]
#define SWIGTYPE_p_eIDMW__PTEID_PDFSignature swig_types[42]
#define SWIGTYPE_p_eIDMW__PTEID_PIC swig_types[43]
#define SWIGTYPE_p_eIDMW__PTEID_Photo swig_types[44]
#define SWIGTYPE_p_eIDMW__PTEID_Pin swig_types[45]
#define SWIGTYPE_p_eIDMW__PTEID_Pins swig_types[46]
#define SWIGTYPE_p_eIDMW__PTEID_PublicKey swig_types[47]
#define SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey swig_types[48]
#define SWIGTYPE_p_eIDMW__PTEID_RawData_Eid swig_types[49]
#define SWIGTYPE_p_eIDMW__PTEID_ReaderContext swig_types[50]
#define SWIGTYPE_p_eIDMW__PTEID_ReaderSet swig_types[51]
#define SWIGTYPE_p_eIDMW__PTEID_SigVerifier swig_types[52]
#define SWIGTYPE_p_eIDMW__PTEID_SmartCard swig_types[53]
#define SWIGTYPE_p_eIDMW__PTEID_Sod swig_types[54]
#define SWIGTYPE_p_eIDMW__PTEID_TokenInfo swig_types[55]
#define SWIGTYPE_p_eIDMW__PTEID_XMLDoc swig_types[56]
#define SWIGTYPE_p_eIDMW__PTEID_XmlUserRequestedInfo swig_types[57]
#define SWIGTYPE_p_eIDMW__tCapPinChangeState swig_types[58]
#define SWIGTYPE_p_eIDMW__tCompCardType swig_types[59]
#define SWIGTYPE_p_eIDMW__tProxyInfo swig_types[60]
#define SWIGTYPE_p_f_enum_eIDMW__tCapPinChangeState__void swig_types[61]
#define SWIGTYPE_p_f_long_unsigned_long_p_void__void swig_types[62]
#define SWIGTYPE_p_f_p_void_int__void swig_types[63]
#define SWIGTYPE_p_long swig_types[64]
#define SWIGTYPE_p_p_char swig_types[65]
#define SWIGTYPE_p_unsigned_char swig_types[66]
#define SWIGTYPE_p_unsigned_long swig_types[67]
static swig_type_info *swig_types[69];
static swig_module_info swig_module = {swig_types, 68, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#include "eidlib.h"
#include "eidlibException.h"


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return v8::Int32::New(value);
}


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return v8::Number::New(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return v8::Undefined();
    } else {
      v8::Handle<v8::String> js_str = v8::String::New(carray, size);
      return js_str;
    }
  } else {
    return v8::Undefined();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return v8::Boolean::New(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    v8::Integer::NewFromUnsigned(value) : v8::Integer::New((long)(value));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}





SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long_SS_long  (long long value)
{
  return v8::Number::New(value);
}


SWIGINTERN int
SWIG_AsVal_short (v8::Handle<v8::Value> obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (short)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsCharArray(v8::Handle<v8::Value> obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (v8::Handle<v8::Value> obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned char)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#define SWIGV8_INIT pteid_initialize


SWIGV8_ClientData _exports_PTEID_Exception_clientData;
SWIGV8_ClientData _exports_PTEID_ExReleaseNeeded_clientData;
SWIGV8_ClientData _exports_PTEID_ExUnknown_clientData;
SWIGV8_ClientData _exports_PTEID_ExDocTypeUnknown_clientData;
SWIGV8_ClientData _exports_PTEID_ExFileTypeUnknown_clientData;
SWIGV8_ClientData _exports_PTEID_ExParamRange_clientData;
SWIGV8_ClientData _exports_PTEID_ExCmdNotAllowed_clientData;
SWIGV8_ClientData _exports_PTEID_ExCmdNotSupported_clientData;
SWIGV8_ClientData _exports_PTEID_ExNoCardPresent_clientData;
SWIGV8_ClientData _exports_PTEID_ExCardBadType_clientData;
SWIGV8_ClientData _exports_PTEID_ExCardTypeUnknown_clientData;
SWIGV8_ClientData _exports_PTEID_ExCertNoIssuer_clientData;
SWIGV8_ClientData _exports_PTEID_ExCertNoRoot_clientData;
SWIGV8_ClientData _exports_PTEID_ExBadUsage_clientData;
SWIGV8_ClientData _exports_PTEID_ExBadTransaction_clientData;
SWIGV8_ClientData _exports_PTEID_ExCardChanged_clientData;
SWIGV8_ClientData _exports_PTEID_ExReaderSetChanged_clientData;
SWIGV8_ClientData _exports_PTEID_ExNoReader_clientData;
SWIGV8_ClientData _exports_PTEID_ExNotAllowByUser_clientData;
SWIGV8_ClientData _exports_PTEID_ExUserMustAnswer_clientData;
SWIGV8_ClientData _exports_PTEID_ExSOD_clientData;
SWIGV8_ClientData _exports_PTEID_Object_clientData;
SWIGV8_ClientData _exports_PTEID_ByteArray_clientData;
SWIGV8_ClientData _exports_PTEID_Photo_clientData;
SWIGV8_ClientData _exports_PTEID_PublicKey_clientData;
SWIGV8_ClientData _exports_PTEID_RawData_Eid_clientData;
SWIGV8_ClientData _exports_PTEID_ReaderSet_clientData;
SWIGV8_ClientData _exports_PTEID_ReaderContext_clientData;
SWIGV8_ClientData _exports_PTEID_Card_clientData;
SWIGV8_ClientData _exports_PTEID_MemoryCard_clientData;
SWIGV8_ClientData _exports_PTEID_SmartCard_clientData;
SWIGV8_ClientData _exports_PTEID_PDFSignature_clientData;
SWIGV8_ClientData _exports_PTEID_EIDCard_clientData;
SWIGV8_ClientData _exports_PTEID_SigVerifier_clientData;
SWIGV8_ClientData _exports_PTEID_XmlUserRequestedInfo_clientData;
SWIGV8_ClientData _exports_PTEID_XMLDoc_clientData;
SWIGV8_ClientData _exports_PTEID_Biometric_clientData;
SWIGV8_ClientData _exports_PTEID_Crypto_clientData;
SWIGV8_ClientData _exports_PTEID_CardVersionInfo_clientData;
SWIGV8_ClientData _exports_PTEID_Sod_clientData;
SWIGV8_ClientData _exports_PTEID_EId_clientData;
SWIGV8_ClientData _exports_PTEID_Address_clientData;
SWIGV8_ClientData _exports_PTEID_CCXML_Doc_clientData;
SWIGV8_ClientData _exports_PTEID_Pins_clientData;
SWIGV8_ClientData _exports_PTEID_Pin_clientData;
SWIGV8_ClientData _exports_PTEID_Certificates_clientData;
SWIGV8_ClientData _exports_PTEID_Certificate_clientData;
SWIGV8_ClientData _exports_PTEID_Config_clientData;
SWIGV8_ClientData _exports_PTEID_ID_clientData;
SWIGV8_ClientData _exports_PTEID_ADDR_clientData;
SWIGV8_ClientData _exports_PTEID_PIC_clientData;
SWIGV8_ClientData _exports_PTEID_Certif_clientData;
SWIGV8_ClientData _exports_PTEID_Certifs_clientData;
SWIGV8_ClientData _exports_PTEIDPin_clientData;
SWIGV8_ClientData _exports_PTEIDPins_clientData;
SWIGV8_ClientData _exports_PTEID_TokenInfo_clientData;
SWIGV8_ClientData _exports_PTEID_RSAPublicKey_clientData;
SWIGV8_ClientData _exports_tProxyInfo_clientData;


SwigV8ReturnValue _wrap_EIDMW_OK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PARAM_BAD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PARAM_RANGE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00101));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_BAD_PATH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00102));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_ALGO_BAD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00103));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PIN_OPERATION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00104));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PIN_FORMAT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00105));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_BAD_USAGE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00106));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CARD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00200));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_NOT_AUTHENTICATED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00201));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_NOT_SUPPORTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00202));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PIN_BAD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00203));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PIN_BLOCKED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00204));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_NO_CARD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00205));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_BAD_P1P2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00206));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CMD_NOT_ALLOWED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00207));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_FILE_NOT_FOUND(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00208));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_APPLET_VERSION_NOT_FOUND(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00209));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_NOT_ACTIVATED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d0020A));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PINREF_NOT_FOUND(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d0020B));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CARD_COMM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00300));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_NO_READER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00301));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PINPAD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00302));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CANT_CONNECT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00303));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CARD_RESET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00304));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CARD_SHARING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00305));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_NOT_TRANSACTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00306));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_LIMIT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00400));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CHECK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00401));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PCSC_LIB(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00402));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_ZLIB_RESOLVE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00403));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00404));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_PINPAD_ERR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00405));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_CANT_LOAD_LIB(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00406));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_MEMORY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00407));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_DELETE_CACHE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00408));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_CONF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00409));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_CACHE_TAMPERED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d0040A));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SOCKET_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00500));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SOCKET_SEND(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00501));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SOCKET_RECV(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00502));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SOCKET_GETHOST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00503));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SOCKET_CONNECT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00504));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SOCKET_SOCKET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00510));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SOCKET_BIND(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00511));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SOCKET_ACCEPT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00512));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_PIN_CANCEL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00600));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_TIMEOUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00601));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_NEW_PINS_DIFFER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00602));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_WRONG_PIN_FORMAT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00603));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_WRONG_ASN1_FORMAT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00700));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_XERCES_INIT_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00701));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_FILE_NOT_OPENED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00800));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_PERMISSION_DENIED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00801));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_INVALID_PATH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00802));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_TOO_MANY_OPENED_FILES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00803));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_DIR_NOT_OPENED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00804));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_INTERRUPTION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00805));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_OVERFLOW(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00806));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERROR_IO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00807));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_LOGGER_APPLEAVING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00900));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_DOCTYPE_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b00));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CARDTYPE_BAD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CARDTYPE_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CERT_NOISSUER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b03));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_RELEASE_NEEDED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_BAD_TRANSACTION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b05));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_FILETYPE_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b06));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CARD_CHANGED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b07));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_READERSET_CHANGED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_NOT_ALLOW_BY_USER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b09));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CERT_NOCRL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b0A));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CERT_NOOCSP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b0B));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_CERT_NOROOT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b0C));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_USER_MUST_ANSWER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00b0D));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SOD_UNEXPECTED_VALUE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00c01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SOD_UNEXPECTED_ASN1_TAG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00c02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SOD_UNEXPECTED_ALGO_OID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00c03));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SOD_ERR_HASH_NO_MATCH_ID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00c04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SOD_ERR_HASH_NO_MATCH_ADDRESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00c05));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SOD_ERR_HASH_NO_MATCH_PICTURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00c06));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SOD_ERR_HASH_NO_MATCH_PUBLIC_KEY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00c07));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SOD_ERR_VERIFY_SOD_SIGN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00c08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_OTP_CONNECTION_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_OTP_PROTOCOL_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_OTP_CERTIFICATE_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d03));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_OTP_UNKNOWN_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SAM_CONNECTION_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d05));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SAM_PROTOCOL_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d06));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_SAM_UNKNOWN_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d07));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SYSTEM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_EIDMW_ERR_SIGNAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xe1d00d02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CARDTYPE_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CARDTYPE_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CARDTYPE_IAS07(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CARDTYPE_IAS07));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CARDTYPE_IAS101(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CARDTYPE_IAS101));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_DOCTYPE_ID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_DOCTYPE_ID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_DOCTYPE_ADDRESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_DOCTYPE_ADDRESS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_DOCTYPE_SOD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_DOCTYPE_SOD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_DOCTYPE_INFO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_DOCTYPE_INFO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_DOCTYPE_PINS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_DOCTYPE_PINS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_DOCTYPE_CERTIFICATES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_DOCTYPE_CERTIFICATES));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_ID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_ID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_ID_SIG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_ID_SIG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_TRACE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_TRACE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_ADDR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_ADDR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_ADDR_SIG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_ADDR_SIG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_SOD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_SOD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_CARD_INFO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_CARD_INFO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_TOKEN_INFO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_TOKEN_INFO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_CHALLENGE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_CHALLENGE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_RESPONSE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_RESPONSE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_RAWDATA_PERSO_DATA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_RAWDATA_PERSO_DATA));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PIN_USG_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PIN_USG_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PIN_USG_AUTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PIN_USG_AUTH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PIN_USG_SIGN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PIN_USG_SIGN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PIN_USG_ADDRESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PIN_USG_ADDRESS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_VALIDATION_PROCESS_NONE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_VALIDATION_PROCESS_NONE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_VALIDATION_LEVEL_NONE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_VALIDATION_LEVEL_NONE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_VALIDATION_LEVEL_OPTIONAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_VALIDATION_LEVEL_OPTIONAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_VALIDATION_LEVEL_MANDATORY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_VALIDATION_LEVEL_MANDATORY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_STATUS_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_STATUS_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_STATUS_REVOKED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_STATUS_REVOKED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_STATUS_TEST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_STATUS_TEST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_STATUS_DATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_STATUS_DATE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_STATUS_CONNECT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_STATUS_CONNECT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_STATUS_ISSUER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_STATUS_ISSUER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_STATUS_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_STATUS_ERROR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_STATUS_VALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_STATUS_VALID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_TYPE_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_TYPE_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_TYPE_ROOT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_TYPE_ROOT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_TYPE_ROOT_SIGN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_TYPE_ROOT_SIGN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_TYPE_ROOT_AUTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_TYPE_ROOT_AUTH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_TYPE_AUTHENTICATION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_TYPE_AUTHENTICATION));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_CERTIF_TYPE_SIGNATURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_CERTIF_TYPE_SIGNATURE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_ALGO_MD5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_ALGO_MD5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_ALGO_SHA1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_ALGO_SHA1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_FILETYPE_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_FILETYPE_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_FILETYPE_TLV(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_FILETYPE_TLV));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_FILETYPE_XML(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_FILETYPE_XML));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_FILETYPE_CSV(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_FILETYPE_CSV));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GENERAL_INSTALLDIR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GENERAL_INSTALLDIR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GENERAL_INSTALL_PRO_DIR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GENERAL_INSTALL_PRO_DIR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GENERAL_INSTALL_SDK_DIR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GENERAL_INSTALL_SDK_DIR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GENERAL_CACHEDIR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GENERAL_CACHEDIR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GENERAL_LANGUAGE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GENERAL_LANGUAGE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_LOGGING_DIRNAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_LOGGING_DIRNAME));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_LOGGING_PREFIX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_LOGGING_PREFIX));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_LOGGING_FILENUMBER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_LOGGING_FILENUMBER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_LOGGING_FILESIZE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_LOGGING_FILESIZE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_LOGGING_LEVEL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_LOGGING_LEVEL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_LOGGING_GROUP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_LOGGING_GROUP));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_CERTCACHE_CACHEFILE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_CERTCACHE_CACHEFILE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_CERTCACHE_LINENUMB(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_CERTCACHE_LINENUMB));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_CERTCACHE_VALIDITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_CERTCACHE_VALIDITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_CERTCACHE_WAITDELAY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_CERTCACHE_WAITDELAY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_PROXY_HOST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_PROXY_HOST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_PROXY_PORT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_PROXY_PORT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_PROXY_PACFILE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_PROXY_PACFILE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_SECURITY_SINGLESIGNON(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_SECURITY_SINGLESIGNON));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_STARTWIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_STARTWIN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_STARTMINI(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_STARTMINI));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_SHOWPIC(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_SHOWPIC));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_SHOWTBAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_SHOWTBAR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_VIRTUALKBD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_VIRTUALKBD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_AUTOCARDREAD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_AUTOCARDREAD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_CARDREADNUMB(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_CARDREADNUMB));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_REGCERTIF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_REGCERTIF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_REMOVECERTIF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_REMOVECERTIF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_FILESAVE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_FILESAVE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_XSIGN_TSAURL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_XSIGN_TSAURL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_XSIGN_ONLINE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_XSIGN_ONLINE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_XSIGN_WORKINGDIR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_XSIGN_WORKINGDIR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_XSIGN_TIMEOUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_XSIGN_TIMEOUT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_GUITOOL_SHOWNOTIFICATION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_GUITOOL_SHOWNOTIFICATION));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_PROXY_CONNECT_TIMEOUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_PROXY_CONNECT_TIMEOUT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_PARAM_AUTOUPDATES_URL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_PARAM_AUTOUPDATES_URL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_LOG_LEVEL_CRITICAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_LOG_LEVEL_CRITICAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_LOG_LEVEL_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_LOG_LEVEL_ERROR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_LOG_LEVEL_WARNING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_LOG_LEVEL_WARNING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_LOG_LEVEL_INFO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_LOG_LEVEL_INFO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_LOG_LEVEL_DEBUG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::PTEID_LOG_LEVEL_DEBUG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_Exception(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  eIDMW::PTEID_Exception *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_Exception.");
  ecode1 = SWIG_AsVal_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PTEID_Exception" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = (long)(val1);
  result = (eIDMW::PTEID_Exception *)new eIDMW::PTEID_Exception(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_Exception, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Exception(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Exception(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Exception * arg1 = (eIDMW::PTEID_Exception *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Exception_GetError(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Exception *arg1 = (eIDMW::PTEID_Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Exception_GetError.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Exception_GetError" "', argument " "1"" of type '" "eIDMW::PTEID_Exception const *""'"); 
  }
  arg1 = (eIDMW::PTEID_Exception *)(argp1);
  result = (long)((eIDMW::PTEID_Exception const *)arg1)->GetError();
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ExReleaseNeeded(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExReleaseNeeded *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExReleaseNeeded.");
  result = (eIDMW::PTEID_ExReleaseNeeded *)new eIDMW::PTEID_ExReleaseNeeded();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExReleaseNeeded, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExReleaseNeeded(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExReleaseNeeded(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExReleaseNeeded * arg1 = (eIDMW::PTEID_ExReleaseNeeded *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExUnknown(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExUnknown *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExUnknown.");
  result = (eIDMW::PTEID_ExUnknown *)new eIDMW::PTEID_ExUnknown();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExUnknown, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExUnknown(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExUnknown(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExUnknown * arg1 = (eIDMW::PTEID_ExUnknown *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExDocTypeUnknown(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExDocTypeUnknown *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExDocTypeUnknown.");
  result = (eIDMW::PTEID_ExDocTypeUnknown *)new eIDMW::PTEID_ExDocTypeUnknown();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExDocTypeUnknown, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExDocTypeUnknown(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExDocTypeUnknown(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExDocTypeUnknown * arg1 = (eIDMW::PTEID_ExDocTypeUnknown *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExFileTypeUnknown(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExFileTypeUnknown *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExFileTypeUnknown.");
  result = (eIDMW::PTEID_ExFileTypeUnknown *)new eIDMW::PTEID_ExFileTypeUnknown();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExFileTypeUnknown, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExFileTypeUnknown(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExFileTypeUnknown(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExFileTypeUnknown * arg1 = (eIDMW::PTEID_ExFileTypeUnknown *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExParamRange(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExParamRange *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExParamRange.");
  result = (eIDMW::PTEID_ExParamRange *)new eIDMW::PTEID_ExParamRange();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExParamRange, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExParamRange(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExParamRange(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExParamRange * arg1 = (eIDMW::PTEID_ExParamRange *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExCmdNotAllowed(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExCmdNotAllowed *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExCmdNotAllowed.");
  result = (eIDMW::PTEID_ExCmdNotAllowed *)new eIDMW::PTEID_ExCmdNotAllowed();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExCmdNotAllowed, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExCmdNotAllowed(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExCmdNotAllowed(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExCmdNotAllowed * arg1 = (eIDMW::PTEID_ExCmdNotAllowed *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExCmdNotSupported(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExCmdNotSupported *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExCmdNotSupported.");
  result = (eIDMW::PTEID_ExCmdNotSupported *)new eIDMW::PTEID_ExCmdNotSupported();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExCmdNotSupported, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExCmdNotSupported(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExCmdNotSupported(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExCmdNotSupported * arg1 = (eIDMW::PTEID_ExCmdNotSupported *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExNoCardPresent(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExNoCardPresent *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExNoCardPresent.");
  result = (eIDMW::PTEID_ExNoCardPresent *)new eIDMW::PTEID_ExNoCardPresent();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExNoCardPresent, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExNoCardPresent(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExNoCardPresent(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExNoCardPresent * arg1 = (eIDMW::PTEID_ExNoCardPresent *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExCardBadType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExCardBadType *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExCardBadType.");
  result = (eIDMW::PTEID_ExCardBadType *)new eIDMW::PTEID_ExCardBadType();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExCardBadType, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExCardBadType(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExCardBadType(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExCardBadType * arg1 = (eIDMW::PTEID_ExCardBadType *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExCardTypeUnknown(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExCardTypeUnknown *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExCardTypeUnknown.");
  result = (eIDMW::PTEID_ExCardTypeUnknown *)new eIDMW::PTEID_ExCardTypeUnknown();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExCardTypeUnknown, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExCardTypeUnknown(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExCardTypeUnknown(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExCardTypeUnknown * arg1 = (eIDMW::PTEID_ExCardTypeUnknown *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExCertNoIssuer(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExCertNoIssuer *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExCertNoIssuer.");
  result = (eIDMW::PTEID_ExCertNoIssuer *)new eIDMW::PTEID_ExCertNoIssuer();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExCertNoIssuer, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExCertNoIssuer(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExCertNoIssuer(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExCertNoIssuer * arg1 = (eIDMW::PTEID_ExCertNoIssuer *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExCertNoRoot(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExCertNoRoot *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExCertNoRoot.");
  result = (eIDMW::PTEID_ExCertNoRoot *)new eIDMW::PTEID_ExCertNoRoot();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExCertNoRoot, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExCertNoRoot(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExCertNoRoot(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExCertNoRoot * arg1 = (eIDMW::PTEID_ExCertNoRoot *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExBadUsage(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExBadUsage *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExBadUsage.");
  result = (eIDMW::PTEID_ExBadUsage *)new eIDMW::PTEID_ExBadUsage();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExBadUsage, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExBadUsage(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExBadUsage(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExBadUsage * arg1 = (eIDMW::PTEID_ExBadUsage *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExBadTransaction(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExBadTransaction *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExBadTransaction.");
  result = (eIDMW::PTEID_ExBadTransaction *)new eIDMW::PTEID_ExBadTransaction();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExBadTransaction, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExBadTransaction(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExBadTransaction(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExBadTransaction * arg1 = (eIDMW::PTEID_ExBadTransaction *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExCardChanged(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExCardChanged *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExCardChanged.");
  result = (eIDMW::PTEID_ExCardChanged *)new eIDMW::PTEID_ExCardChanged();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExCardChanged, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExCardChanged(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExCardChanged(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExCardChanged * arg1 = (eIDMW::PTEID_ExCardChanged *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExReaderSetChanged(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExReaderSetChanged *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExReaderSetChanged.");
  result = (eIDMW::PTEID_ExReaderSetChanged *)new eIDMW::PTEID_ExReaderSetChanged();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExReaderSetChanged, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExReaderSetChanged(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExReaderSetChanged(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExReaderSetChanged * arg1 = (eIDMW::PTEID_ExReaderSetChanged *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExNoReader(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExNoReader *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExNoReader.");
  result = (eIDMW::PTEID_ExNoReader *)new eIDMW::PTEID_ExNoReader();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExNoReader, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExNoReader(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExNoReader(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExNoReader * arg1 = (eIDMW::PTEID_ExNoReader *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExNotAllowByUser(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExNotAllowByUser *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExNotAllowByUser.");
  result = (eIDMW::PTEID_ExNotAllowByUser *)new eIDMW::PTEID_ExNotAllowByUser();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExNotAllowByUser, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExNotAllowByUser(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExNotAllowByUser(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExNotAllowByUser * arg1 = (eIDMW::PTEID_ExNotAllowByUser *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExUserMustAnswer(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ExUserMustAnswer *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExUserMustAnswer.");
  result = (eIDMW::PTEID_ExUserMustAnswer *)new eIDMW::PTEID_ExUserMustAnswer();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExUserMustAnswer, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExUserMustAnswer(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExUserMustAnswer(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExUserMustAnswer * arg1 = (eIDMW::PTEID_ExUserMustAnswer *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_PTEID_ExSOD(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  eIDMW::PTEID_ExSOD *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ExSOD.");
  ecode1 = SWIG_AsVal_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PTEID_ExSOD" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = (long)(val1);
  result = (eIDMW::PTEID_ExSOD *)new eIDMW::PTEID_ExSOD(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ExSOD, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ExSOD(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ExSOD(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ExSOD * arg1 = (eIDMW::PTEID_ExSOD *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_XML_ROOT_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"ccpt");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ROOT_ELEMENT_ATTR_TIMESTAMP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"timestamp");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ROOT_ELEMENT_ATTR_SERVERNAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"servername");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ROOT_ELEMENT_ATTR_SERVERADDRESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"serveraddress");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ROOT_ELEMENT_ATTR_TOKENID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"tokenid");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_PHOTO_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"photo");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_BASIC_INFO_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"basicInformation");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_NAME_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"name");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_GIVEN_NAME_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"givenName");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_SURNAME_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"surname");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_NIC_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"nic");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_EXPIRY_DATE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"expiryDate");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_CIVIL_INFO_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"CivilInformation");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_GENDER_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"sex");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_HEIGHT_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"height");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_NATIONALITY_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"nationality");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_DATE_OF_BIRTH_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"dateOfBirth");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_GIVEN_NAME_FATHER_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"givenNameFather");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_SURNAME_FATHER_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"surnameFather");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_GIVEN_NAME_MOTHER_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"givenNameMother");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_SURNAME_MOTHER_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"surnameMother");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ACCIDENTAL_INDICATIONS_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"notes");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_IDENTIFICATION_NUMBERS_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"IdentificationNumbers");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_DOCUMENT_NO_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DocumentNo");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_TAX_NO_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"TaxNo");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_SOCIAL_SECURITY_NO_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"SocialSecurityNo");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_HEALTH_NO_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"HealthNo");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_MRZ1_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"mrz1");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_MRZ2_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"mrz2");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_MRZ3_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"mrz3");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_CARD_VALUES_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"CardValues");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_CARD_VERSION_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"cardVersion");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_CARD_NUMBER_PAN_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"cardNumberPAN");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ISSUING_DATE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"issuingDate");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ISSUING_ENTITY_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"issuingEntity");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_DOCUMENT_TYPE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"documentType");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_LOCAL_OF_REQUEST_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"localOfRequest");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_VERSION_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"version");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ADDRESS_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"Address");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_DISTRICT_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"district");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_MUNICIPALITY_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"municipality");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_CIVIL_PARISH_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"civilParish");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ABBR_STREET_TYPE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"abrStreetType");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_STREET_TYPE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"streetType");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_STREET_NAME_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"streetName");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ABBR_BUILDING_TYPE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"abrBuildingType");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_BUILDING_TYPE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"buildingType");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_DOOR_NO_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"doorNo");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_FLOOR_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"floor");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_SIDE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"side");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_PLACE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"place");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_LOCALITY_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"locality");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ZIP4_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"zip4");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ZIP3_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"zip3");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_POSTAL_LOCALITY_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"postalLocality");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_PERSONAL_NOTES_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"userNotes");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_FOREIGN_COUNTRY_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"foreignCountry");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_FOREIGN_ADDRESS_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"foreignAddress");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_FOREIGN_CITY_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"foreignCity");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_FOREIGN_REGION_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"foreignRegion");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_FOREIGN_LOCALITY_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"foreignLocality");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_FOREIGN_POSTAL_CODE_ELEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"foreignPostalCode");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ROOT_S(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"<ccpt ");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_XML_ROOT_E(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)">\n");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_PHOTO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_PHOTO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_NAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_NAME));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_GIVEN_NAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_GIVEN_NAME));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_SURNAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_SURNAME));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_NIC(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_NIC));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_EXPIRY_DATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_EXPIRY_DATE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_GENDER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_GENDER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_HEIGHT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_HEIGHT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_NATIONALITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_NATIONALITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_DATE_OF_BIRTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_DATE_OF_BIRTH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_GIVEN_NAME_FATHER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_GIVEN_NAME_FATHER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_SURNAME_FATHER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_SURNAME_FATHER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_GIVEN_NAME_MOTHER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_GIVEN_NAME_MOTHER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_SURNAME_MOTHER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_SURNAME_MOTHER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_ACCIDENTAL_INDICATIONS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_ACCIDENTAL_INDICATIONS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_DOCUMENT_NO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_DOCUMENT_NO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_TAX_NO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_TAX_NO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_SOCIAL_SECURITY_NO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_SOCIAL_SECURITY_NO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_HEALTH_NO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_HEALTH_NO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_MRZ1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_MRZ1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_MRZ2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_MRZ2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_MRZ3(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_MRZ3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_CARD_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_CARD_VERSION));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_CARD_NUMBER_PAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_CARD_NUMBER_PAN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_ISSUING_DATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_ISSUING_DATE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_ISSUING_ENTITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_ISSUING_ENTITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_DOCUMENT_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_DOCUMENT_TYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_LOCAL_OF_REQUEST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_LOCAL_OF_REQUEST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_VERSION));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_DISTRICT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_DISTRICT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_MUNICIPALITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_MUNICIPALITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_CIVIL_PARISH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_CIVIL_PARISH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_ABBR_STREET_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_ABBR_STREET_TYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_STREET_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_STREET_TYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_STREET_NAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_STREET_NAME));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_ABBR_BUILDING_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_ABBR_BUILDING_TYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_BUILDING_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_BUILDING_TYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_DOOR_NO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_DOOR_NO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_FLOOR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_FLOOR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_SIDE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_SIDE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_PLACE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_PLACE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_LOCALITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_LOCALITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_ZIP4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_ZIP4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_ZIP3(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_ZIP3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_POSTAL_LOCALITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_POSTAL_LOCALITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_PERSONAL_NOTES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_PERSONAL_NOTES));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_FOREIGN_COUNTRY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_FOREIGN_COUNTRY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_FOREIGN_ADDRESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_FOREIGN_ADDRESS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_FOREIGN_CITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_FOREIGN_CITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_FOREIGN_REGION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_FOREIGN_REGION));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_FOREIGN_LOCALITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_FOREIGN_LOCALITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_XML_FOREIGN_POSTAL_CODE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::XML_FOREIGN_POSTAL_CODE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Object(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Object(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Object * arg1 = (eIDMW::PTEID_Object *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_veto_PTEID_Object(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Object can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ByteArray__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ByteArray *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ByteArray__SWIG_0.");
  result = (eIDMW::PTEID_ByteArray *)new eIDMW::PTEID_ByteArray();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ByteArray__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ByteArray *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ByteArray__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_ByteArray" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PTEID_ByteArray" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)new eIDMW::PTEID_ByteArray((eIDMW::PTEID_ByteArray const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ByteArray__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_ByteArray *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ByteArray__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_ByteArray" "', argument " "1"" of type '" "unsigned char const *""'"); 
  }
  arg1 = (unsigned char *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PTEID_ByteArray" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (eIDMW::PTEID_ByteArray *)new eIDMW::PTEID_ByteArray((unsigned char const *)arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ByteArray(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_ByteArray__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_ByteArray__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_ByteArray__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_ByteArray__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_ByteArray__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_ByteArray__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _exports_PTEID_ByteArray");
  
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ByteArray(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ByteArray(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ByteArray * arg1 = (eIDMW::PTEID_ByteArray *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_ByteArray_Append__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ByteArray *arg1 = (eIDMW::PTEID_ByteArray *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ByteArray_Append" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ByteArray_Append" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_ByteArray_Append" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  (arg1)->Append((unsigned char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ByteArray_Append__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ByteArray *arg1 = (eIDMW::PTEID_ByteArray *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ByteArray_Append" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ByteArray_Append" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_ByteArray_Append" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  (arg1)->Append((eIDMW::PTEID_ByteArray const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ByteArray_Append(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ByteArray_Append__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ByteArray_Append__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ByteArray_Append__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ByteArray_Append__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function Append.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ByteArray_Clear(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ByteArray *arg1 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ByteArray_Clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ByteArray_Clear" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  (arg1)->Clear();
  jsresult = v8::Undefined();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ByteArray_Equals(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ByteArray *arg1 = (eIDMW::PTEID_ByteArray *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ByteArray_Equals.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ByteArray_Equals" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray const *""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ByteArray_Equals" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_ByteArray_Equals" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  result = (bool)((eIDMW::PTEID_ByteArray const *)arg1)->Equals((eIDMW::PTEID_ByteArray const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ByteArray_Size(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ByteArray *arg1 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ByteArray_Size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ByteArray_Size" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray const *""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  result = (unsigned long)((eIDMW::PTEID_ByteArray const *)arg1)->Size();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ByteArray_GetBytes(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ByteArray *arg1 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ByteArray_GetBytes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ByteArray_GetBytes" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray const *""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  result = (unsigned char *)((eIDMW::PTEID_ByteArray const *)arg1)->GetBytes();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ByteArray_writeToFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ByteArray *arg1 = (eIDMW::PTEID_ByteArray *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ByteArray_writeToFile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ByteArray_writeToFile" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ByteArray_writeToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (bool)(arg1)->writeToFile((char const *)arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ByteArray_assign(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ByteArray *arg1 = (eIDMW::PTEID_ByteArray *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ByteArray_assign.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ByteArray_assign" "', argument " "1"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg1 = (eIDMW::PTEID_ByteArray *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ByteArray_assign" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_ByteArray_assign" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->operator =((eIDMW::PTEID_ByteArray const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Photo(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Photo(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Photo * arg1 = (eIDMW::PTEID_Photo *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Photo_getphotoRAW(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Photo *arg1 = (eIDMW::PTEID_Photo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Photo_getphotoRAW.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Photo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Photo_getphotoRAW" "', argument " "1"" of type '" "eIDMW::PTEID_Photo *""'"); 
  }
  arg1 = (eIDMW::PTEID_Photo *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getphotoRAW();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Photo_getphoto(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Photo *arg1 = (eIDMW::PTEID_Photo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Photo_getphoto.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Photo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Photo_getphoto" "', argument " "1"" of type '" "eIDMW::PTEID_Photo *""'"); 
  }
  arg1 = (eIDMW::PTEID_Photo *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getphoto();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Photo_getphotoCbeff(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Photo *arg1 = (eIDMW::PTEID_Photo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Photo_getphotoCbeff.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Photo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Photo_getphotoCbeff" "', argument " "1"" of type '" "eIDMW::PTEID_Photo *""'"); 
  }
  arg1 = (eIDMW::PTEID_Photo *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getphotoCbeff();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Photo_getphotoFacialrechdr(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Photo *arg1 = (eIDMW::PTEID_Photo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Photo_getphotoFacialrechdr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Photo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Photo_getphotoFacialrechdr" "', argument " "1"" of type '" "eIDMW::PTEID_Photo *""'"); 
  }
  arg1 = (eIDMW::PTEID_Photo *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getphotoFacialrechdr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Photo_getphotoFacialinfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Photo *arg1 = (eIDMW::PTEID_Photo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Photo_getphotoFacialinfo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Photo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Photo_getphotoFacialinfo" "', argument " "1"" of type '" "eIDMW::PTEID_Photo *""'"); 
  }
  arg1 = (eIDMW::PTEID_Photo *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getphotoFacialinfo();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Photo_getphotoImageinfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Photo *arg1 = (eIDMW::PTEID_Photo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Photo_getphotoImageinfo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Photo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Photo_getphotoImageinfo" "', argument " "1"" of type '" "eIDMW::PTEID_Photo *""'"); 
  }
  arg1 = (eIDMW::PTEID_Photo *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getphotoImageinfo();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_Photo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Photo can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_PublicKey(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_PublicKey(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_PublicKey * arg1 = (eIDMW::PTEID_PublicKey *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_PublicKey_getCardAuthKeyModulus(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PublicKey *arg1 = (eIDMW::PTEID_PublicKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_PublicKey_getCardAuthKeyModulus.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PublicKey_getCardAuthKeyModulus" "', argument " "1"" of type '" "eIDMW::PTEID_PublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_PublicKey *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getCardAuthKeyModulus();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_PublicKey_getCardAuthKeyExponent(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PublicKey *arg1 = (eIDMW::PTEID_PublicKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_PublicKey_getCardAuthKeyExponent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PublicKey_getCardAuthKeyExponent" "', argument " "1"" of type '" "eIDMW::PTEID_PublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_PublicKey *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getCardAuthKeyExponent();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_PublicKey(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_PublicKey can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_OK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_BAD_PARAM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_INTERNAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_INSUFFICIENT_BUFFER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_KEYPAD_CANCELLED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_KEYPAD_TIMEOUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_KEYPAD_PIN_MISMATCH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(6));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_KEYPAD_MSG_TOO_LONG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(7));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_INVALID_PIN_LENGTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_NOT_INITIALIZED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(9));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_FILE_NOT_FOUND(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(11));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_E_USER_CANCELLED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_idData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_idData_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_idData_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->idData = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_idData_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_idData_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->idData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_idSigData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_idSigData_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_idSigData_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->idSigData = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_idSigData_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_idSigData_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->idSigData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_addrData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_addrData_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_addrData_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->addrData = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_addrData_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_addrData_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->addrData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_addrSigData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_addrSigData_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_addrSigData_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->addrSigData = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_addrSigData_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_addrSigData_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->addrSigData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_sodData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_sodData_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_sodData_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->sodData = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_sodData_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_sodData_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->sodData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_cardData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_cardData_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_cardData_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->cardData = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_cardData_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_cardData_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->cardData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_tokenInfo_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_tokenInfo_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_tokenInfo_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->tokenInfo = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_tokenInfo_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_tokenInfo_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->tokenInfo);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_certRN_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_certRN_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_certRN_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->certRN = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_certRN_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_certRN_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->certRN);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_challenge_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_challenge_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_challenge_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->challenge = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_challenge_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_challenge_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->challenge);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_response_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_response_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_response_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->response = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_response_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_response_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->response);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_persoData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_persoData_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_persoData_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->persoData = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_persoData_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_persoData_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->persoData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RawData_Eid_trace_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = (eIDMW::PTEID_ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_trace_set" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RawData_Eid_trace_set" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray *""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  if (arg1) (arg1)->trace = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RawData_Eid_trace_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RawData_Eid *arg1 = (eIDMW::PTEID_RawData_Eid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RawData_Eid_trace_get" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid *""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ByteArray *)& ((arg1)->trace);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_RawData_Eid(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_RawData_Eid *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_RawData_Eid.");
  result = (eIDMW::PTEID_RawData_Eid *)new eIDMW::PTEID_RawData_Eid();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_RawData_Eid, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_RawData_Eid(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_RawData_Eid(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_RawData_Eid * arg1 = (eIDMW::PTEID_RawData_Eid *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_ReaderSet_instance(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_instance.");
  
  result = (eIDMW::PTEID_ReaderSet *) &eIDMW::PTEID_ReaderSet::instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_initSDK__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_ReaderSet_initSDK" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  eIDMW::PTEID_ReaderSet::initSDK(arg1);
  jsresult = v8::Undefined();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_initSDK__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  eIDMW::PTEID_ReaderSet::initSDK();
  jsresult = v8::Undefined();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_initSDK(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderSet_initSDK__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderSet_initSDK__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderSet_initSDK__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderSet_initSDK__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function initSDK.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_releaseSDK(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_releaseSDK.");
  
  eIDMW::PTEID_ReaderSet::releaseSDK();
  jsresult = v8::Undefined();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ReaderSet(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ReaderSet(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ReaderSet * arg1 = (eIDMW::PTEID_ReaderSet *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_ReaderSet_releaseReaders__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_releaseReaders" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ReaderSet_releaseReaders" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->releaseReaders(arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_releaseReaders__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_releaseReaders" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  (arg1)->releaseReaders();
  jsresult = v8::Undefined();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_releaseReaders(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderSet_releaseReaders__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderSet_releaseReaders__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderSet_releaseReaders__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderSet_releaseReaders__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function releaseReaders.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_isReadersChanged(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_isReadersChanged.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_isReadersChanged" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet const *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  result = (bool)((eIDMW::PTEID_ReaderSet const *)arg1)->isReadersChanged();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_readerList__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  char **result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_readerList" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ReaderSet_readerList" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (char **)(arg1)->readerList(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_readerList__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char **result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_readerList" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  result = (char **)(arg1)->readerList();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_readerList(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderSet_readerList__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderSet_readerList__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderSet_readerList__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderSet_readerList__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function readerList.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_getReader(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ReaderContext *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_getReader.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_getReader" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  result = (eIDMW::PTEID_ReaderContext *) &(arg1)->getReader();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_getReaderByName(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  eIDMW::PTEID_ReaderContext *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_getReaderByName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_getReaderByName" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ReaderSet_getReaderByName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (eIDMW::PTEID_ReaderContext *) &(arg1)->getReaderByName((char const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_readerCount__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_readerCount" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ReaderSet_readerCount" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (unsigned long)(arg1)->readerCount(arg2);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_readerCount__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_readerCount" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  result = (unsigned long)(arg1)->readerCount();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_readerCount(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderSet_readerCount__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderSet_readerCount__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderSet_readerCount__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderSet_readerCount__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function readerCount.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_getReaderName(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_getReaderName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_getReaderName" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ReaderSet_getReaderName" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (char *)(arg1)->getReaderName(arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_getReaderByNum(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_ReaderContext *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_getReaderByNum.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_getReaderByNum" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ReaderSet_getReaderByNum" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (eIDMW::PTEID_ReaderContext *) &(arg1)->getReaderByNum(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_getReaderByCardSerialNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  eIDMW::PTEID_ReaderContext *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_getReaderByCardSerialNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_getReaderByCardSerialNumber" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ReaderSet_getReaderByCardSerialNumber" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (eIDMW::PTEID_ReaderContext *) &(arg1)->getReaderByCardSerialNumber((char const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderSet_flushCache(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderSet *arg1 = (eIDMW::PTEID_ReaderSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderSet_flushCache.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderSet_flushCache" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderSet *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderSet *)(argp1);
  result = (bool)(arg1)->flushCache();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_ReaderSet(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_ReaderSet can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ReaderContext__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_FileType arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  eIDMW::PTEID_ReaderContext *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ReaderContext__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PTEID_ReaderContext" "', argument " "1"" of type '" "eIDMW::PTEID_FileType""'");
  } 
  arg1 = (eIDMW::PTEID_FileType)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PTEID_ReaderContext" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (eIDMW::PTEID_ReaderContext *)new eIDMW::PTEID_ReaderContext(arg1,(char const *)arg2);
  
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ReaderContext, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ReaderContext__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_FileType arg1 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  eIDMW::PTEID_ReaderContext *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ReaderContext__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PTEID_ReaderContext" "', argument " "1"" of type '" "eIDMW::PTEID_FileType""'");
  } 
  arg1 = (eIDMW::PTEID_FileType)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PTEID_ReaderContext" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PTEID_ReaderContext" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  result = (eIDMW::PTEID_ReaderContext *)new eIDMW::PTEID_ReaderContext(arg1,(eIDMW::PTEID_ByteArray const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ReaderContext, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ReaderContext__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_RawData_Eid *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  eIDMW::PTEID_ReaderContext *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ReaderContext__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_eIDMW__PTEID_RawData_Eid,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_ReaderContext" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PTEID_ReaderContext" "', argument " "1"" of type '" "eIDMW::PTEID_RawData_Eid const &""'"); 
  }
  arg1 = (eIDMW::PTEID_RawData_Eid *)(argp1);
  result = (eIDMW::PTEID_ReaderContext *)new eIDMW::PTEID_ReaderContext((eIDMW::PTEID_RawData_Eid const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ReaderContext, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_ReaderContext(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_ReaderContext__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_ReaderContext__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_ReaderContext__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_ReaderContext__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_ReaderContext__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_ReaderContext__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _exports_PTEID_ReaderContext");
  
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ReaderContext(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ReaderContext(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ReaderContext * arg1 = (eIDMW::PTEID_ReaderContext *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_ReaderContext_getName(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_getName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_getName" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  result = (char *)(arg1)->getName();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_isCardPresent(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_isCardPresent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_isCardPresent" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  result = (bool)(arg1)->isCardPresent();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_releaseCard__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_releaseCard" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ReaderContext_releaseCard" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->releaseCard(arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_releaseCard__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_releaseCard" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  (arg1)->releaseCard();
  jsresult = v8::Undefined();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_releaseCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderContext_releaseCard__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderContext_releaseCard__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_ReaderContext_releaseCard__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_ReaderContext_releaseCard__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function releaseCard.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_isCardChanged(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_isCardChanged.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_isCardChanged" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ReaderContext_isCardChanged" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_ReaderContext_isCardChanged" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = (unsigned long *)(argp2);
  result = (bool)(arg1)->isCardChanged(*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_getCardType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_CardType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_getCardType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_getCardType" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  result = (eIDMW::PTEID_CardType)(arg1)->getCardType();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_getCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Card *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_getCard.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_getCard" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  result = (eIDMW::PTEID_Card *) &(arg1)->getCard();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_getEIDCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_EIDCard *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_getEIDCard.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_getEIDCard" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  result = (eIDMW::PTEID_EIDCard *) &(arg1)->getEIDCard();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_SetEventCallback(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void (*arg2)(long,unsigned long,void *) = (void (*)(long,unsigned long,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  unsigned long result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_SetEventCallback.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_SetEventCallback" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg2), SWIGTYPE_p_f_long_unsigned_long_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "PTEID_ReaderContext_SetEventCallback" "', argument " "2"" of type '" "void (*)(long,unsigned long,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_ReaderContext_SetEventCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (unsigned long)(arg1)->SetEventCallback(arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_StopEventCallback(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_StopEventCallback.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_StopEventCallback" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ReaderContext_StopEventCallback" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  (arg1)->StopEventCallback(arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_BeginTransaction(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_BeginTransaction.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_BeginTransaction" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  (arg1)->BeginTransaction();
  jsresult = v8::Undefined();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_EndTransaction(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_EndTransaction.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_EndTransaction" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  (arg1)->EndTransaction();
  jsresult = v8::Undefined();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReaderContext_isVirtualReader(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ReaderContext *arg1 = (eIDMW::PTEID_ReaderContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReaderContext_isVirtualReader.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ReaderContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReaderContext_isVirtualReader" "', argument " "1"" of type '" "eIDMW::PTEID_ReaderContext *""'"); 
  }
  arg1 = (eIDMW::PTEID_ReaderContext *)(argp1);
  result = (bool)(arg1)->isVirtualReader();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Card(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Card(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Card * arg1 = (eIDMW::PTEID_Card *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Card_getType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_CardType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Card_getType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_getType" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  result = (eIDMW::PTEID_CardType)(arg1)->getType();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_getDocument(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  eIDMW::PTEID_DocumentType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_XMLDoc *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Card_getDocument.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_getDocument" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Card_getDocument" "', argument " "2"" of type '" "eIDMW::PTEID_DocumentType""'");
  } 
  arg2 = (eIDMW::PTEID_DocumentType)(val2);
  result = (eIDMW::PTEID_XMLDoc *) &(arg1)->getDocument(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_getRawData(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  eIDMW::PTEID_RawDataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Card_getRawData.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_getRawData" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Card_getRawData" "', argument " "2"" of type '" "eIDMW::PTEID_RawDataType""'");
  } 
  arg2 = (eIDMW::PTEID_RawDataType)(val2);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_sendAPDU(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Card_sendAPDU.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_sendAPDU" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Card_sendAPDU" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Card_sendAPDU" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  result = (arg1)->sendAPDU((eIDMW::PTEID_ByteArray const &)*arg2);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_Sign__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_Sign" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Card_Sign" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Card_Sign" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_Card_Sign" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (arg1)->Sign((eIDMW::PTEID_ByteArray const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_Sign__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_Sign" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Card_Sign" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Card_Sign" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  result = (arg1)->Sign((eIDMW::PTEID_ByteArray const &)*arg2);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_Sign(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Card_Sign__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Card_Sign__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Card_Sign__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Card_Sign__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function Sign.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_readFile__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_readFile" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Card_readFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_Card_readFile" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PTEID_Card_readFile" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = (unsigned long)(val4);
  result = (arg1)->readFile((char const *)arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_readFile__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_readFile" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Card_readFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_Card_readFile" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = (arg1)->readFile((char const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_readFile__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_readFile" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Card_readFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (arg1)->readFile((char const *)arg2);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_readFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Card_readFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Card_readFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Card_readFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Card_readFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Card_readFile__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Card_readFile__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function readFile.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_writeFile__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  unsigned long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_writeFile" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Card_writeFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_Card_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Card_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PTEID_Card_writeFile" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = (unsigned long)(val4);
  result = (bool)(arg1)->writeFile((char const *)arg2,(eIDMW::PTEID_ByteArray const &)*arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_writeFile__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Card *arg1 = (eIDMW::PTEID_Card *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Card, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Card_writeFile" "', argument " "1"" of type '" "eIDMW::PTEID_Card *""'"); 
  }
  arg1 = (eIDMW::PTEID_Card *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Card_writeFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_Card_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Card_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  result = (bool)(arg1)->writeFile((char const *)arg2,(eIDMW::PTEID_ByteArray const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Card_writeFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Card_writeFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Card_writeFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Card_writeFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Card_writeFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function writeFile.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_Card(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Card can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_MemoryCard(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_MemoryCard(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_MemoryCard * arg1 = (eIDMW::PTEID_MemoryCard *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_veto_PTEID_MemoryCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_MemoryCard can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_SmartCard(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_SmartCard(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_SmartCard * arg1 = (eIDMW::PTEID_SmartCard *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_SmartCard_selectApplication(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SmartCard_selectApplication.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_selectApplication" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_selectApplication" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_selectApplication" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  (arg1)->selectApplication((eIDMW::PTEID_ByteArray const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_sendAPDU__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  eIDMW::PTEID_Pin *arg3 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "3"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg3 = (eIDMW::PTEID_Pin *)(argp3);
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (arg1)->sendAPDU((eIDMW::PTEID_ByteArray const &)*arg2,arg3,(char const *)arg4);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_sendAPDU__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  eIDMW::PTEID_Pin *arg3 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "3"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg3 = (eIDMW::PTEID_Pin *)(argp3);
  result = (arg1)->sendAPDU((eIDMW::PTEID_ByteArray const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_sendAPDU__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_sendAPDU" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  result = (arg1)->sendAPDU((eIDMW::PTEID_ByteArray const &)*arg2);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_sendAPDU(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_sendAPDU__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_sendAPDU__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_sendAPDU__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_sendAPDU__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_sendAPDU__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_sendAPDU__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function sendAPDU.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_readFile__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  eIDMW::PTEID_Pin *arg4 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_readFile" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_readFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_readFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_readFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_SmartCard_readFile" "', argument " "4"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg4 = (eIDMW::PTEID_Pin *)(argp4);
  res5 = SWIG_AsCharPtrAndSize(args[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PTEID_SmartCard_readFile" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  result = (long)(arg1)->readFile((char const *)arg2,*arg3,arg4,(char const *)arg5);
  jsresult = SWIG_From_long((long)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_readFile__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  eIDMW::PTEID_Pin *arg4 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_readFile" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_readFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_readFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_readFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_SmartCard_readFile" "', argument " "4"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg4 = (eIDMW::PTEID_Pin *)(argp4);
  result = (long)(arg1)->readFile((char const *)arg2,*arg3,arg4);
  jsresult = SWIG_From_long((long)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_readFile__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_readFile" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_readFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_readFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_readFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  result = (long)(arg1)->readFile((char const *)arg2,*arg3);
  jsresult = SWIG_From_long((long)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_readFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_readFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_readFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_readFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_readFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_readFile__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_readFile__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function readFile.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_writeFile__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  eIDMW::PTEID_Pin *arg4 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_writeFile" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_writeFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_SmartCard_writeFile" "', argument " "4"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg4 = (eIDMW::PTEID_Pin *)(argp4);
  res5 = SWIG_AsCharPtrAndSize(args[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PTEID_SmartCard_writeFile" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  result = (bool)(arg1)->writeFile((char const *)arg2,(eIDMW::PTEID_ByteArray const &)*arg3,arg4,(char const *)arg5);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_writeFile__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  eIDMW::PTEID_Pin *arg4 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_writeFile" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_writeFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_SmartCard_writeFile" "', argument " "4"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg4 = (eIDMW::PTEID_Pin *)(argp4);
  result = (bool)(arg1)->writeFile((char const *)arg2,(eIDMW::PTEID_ByteArray const &)*arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_writeFile__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_writeFile" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_writeFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_writeFile" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  result = (bool)(arg1)->writeFile((char const *)arg2,(eIDMW::PTEID_ByteArray const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_writeFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_writeFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_writeFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_writeFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_writeFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_writeFile__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_writeFile__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function writeFile.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_pinCount(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SmartCard_pinCount.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_pinCount" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  result = (unsigned long)(arg1)->pinCount();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_getPins(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Pins *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SmartCard_getPins.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_getPins" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  result = (eIDMW::PTEID_Pins *) &(arg1)->getPins();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Pins, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_certificateCount(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SmartCard_certificateCount.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_certificateCount" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  result = (unsigned long)(arg1)->certificateCount();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_getCertificates(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificates *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SmartCard_getCertificates.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_getCertificates" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  result = (eIDMW::PTEID_Certificates *) &(arg1)->getCertificates();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_getChallenge__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_getChallenge" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_SmartCard_getChallenge" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getChallenge(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_getChallenge__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_getChallenge" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getChallenge();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_getChallenge(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_getChallenge__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_getChallenge__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_SmartCard_getChallenge__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_SmartCard_getChallenge__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getChallenge.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_getChallengeResponse(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SmartCard_getChallengeResponse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_getChallengeResponse" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getChallengeResponse();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SmartCard_verifyChallengeResponse(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SmartCard *arg1 = (eIDMW::PTEID_SmartCard *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SmartCard_verifyChallengeResponse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SmartCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SmartCard_verifyChallengeResponse" "', argument " "1"" of type '" "eIDMW::PTEID_SmartCard const *""'"); 
  }
  arg1 = (eIDMW::PTEID_SmartCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_SmartCard_verifyChallengeResponse" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_verifyChallengeResponse" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SmartCard_verifyChallengeResponse" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_SmartCard_verifyChallengeResponse" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  result = (bool)((eIDMW::PTEID_SmartCard const *)arg1)->verifyChallengeResponse((eIDMW::PTEID_ByteArray const &)*arg2,(eIDMW::PTEID_ByteArray const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_SmartCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_SmartCard can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_PDFSignature__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_PDFSignature *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_PDFSignature__SWIG_0.");
  result = (eIDMW::PTEID_PDFSignature *)new eIDMW::PTEID_PDFSignature();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_PDFSignature, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_PDFSignature__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  eIDMW::PTEID_PDFSignature *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_PDFSignature__SWIG_1.");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_PDFSignature" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (eIDMW::PTEID_PDFSignature *)new eIDMW::PTEID_PDFSignature((char const *)arg1);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_PDFSignature, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_PDFSignature(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_PDFSignature__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_PDFSignature__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_PDFSignature__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_PDFSignature__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _exports_PTEID_PDFSignature");
  
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_PDFSignature(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_PDFSignature(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_PDFSignature * arg1 = (eIDMW::PTEID_PDFSignature *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_PDFSignature_addToBatchSigning(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PDFSignature *arg1 = (eIDMW::PTEID_PDFSignature *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_PDFSignature_addToBatchSigning.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PDFSignature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PDFSignature_addToBatchSigning" "', argument " "1"" of type '" "eIDMW::PTEID_PDFSignature *""'"); 
  }
  arg1 = (eIDMW::PTEID_PDFSignature *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_PDFSignature_addToBatchSigning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->addToBatchSigning(arg2);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_PDFSignature_getPageCount(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PDFSignature *arg1 = (eIDMW::PTEID_PDFSignature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_PDFSignature_getPageCount.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PDFSignature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PDFSignature_getPageCount" "', argument " "1"" of type '" "eIDMW::PTEID_PDFSignature *""'"); 
  }
  arg1 = (eIDMW::PTEID_PDFSignature *)(argp1);
  result = (int)(arg1)->getPageCount();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_PDFSignature_enableTimestamp(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PDFSignature *arg1 = (eIDMW::PTEID_PDFSignature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_PDFSignature_enableTimestamp.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PDFSignature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PDFSignature_enableTimestamp" "', argument " "1"" of type '" "eIDMW::PTEID_PDFSignature *""'"); 
  }
  arg1 = (eIDMW::PTEID_PDFSignature *)(argp1);
  (arg1)->enableTimestamp();
  jsresult = v8::Undefined();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_PDFSignature_getOccupiedSectors(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PDFSignature *arg1 = (eIDMW::PTEID_PDFSignature *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_PDFSignature_getOccupiedSectors.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PDFSignature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PDFSignature_getOccupiedSectors" "', argument " "1"" of type '" "eIDMW::PTEID_PDFSignature *""'"); 
  }
  arg1 = (eIDMW::PTEID_PDFSignature *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_PDFSignature_getOccupiedSectors" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)(arg1)->getOccupiedSectors(arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_EIDCard(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_EIDCard(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_EIDCard * arg1 = (eIDMW::PTEID_EIDCard *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_EIDCard_isApplicationAllowed(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_isApplicationAllowed.");
  
  result = (bool)eIDMW::PTEID_EIDCard::isApplicationAllowed();
  jsresult = SWIG_From_bool((bool)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_isTestCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_isTestCard.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_isTestCard" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (bool)(arg1)->isTestCard();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getAllowTestCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getAllowTestCard.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getAllowTestCard" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (bool)(arg1)->getAllowTestCard();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_setAllowTestCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_setAllowTestCard.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_setAllowTestCard" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_EIDCard_setAllowTestCard" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setAllowTestCard(arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getDocument(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_DocumentType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_XMLDoc *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getDocument.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getDocument" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_EIDCard_getDocument" "', argument " "2"" of type '" "eIDMW::PTEID_DocumentType""'");
  } 
  arg2 = (eIDMW::PTEID_DocumentType)(val2);
  result = (eIDMW::PTEID_XMLDoc *) &(arg1)->getDocument(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getXmlCCDoc(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_XmlUserRequestedInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eIDMW::PTEID_CCXML_Doc *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getXmlCCDoc.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getXmlCCDoc" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_XmlUserRequestedInfo,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_getXmlCCDoc" "', argument " "2"" of type '" "eIDMW::PTEID_XmlUserRequestedInfo &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_EIDCard_getXmlCCDoc" "', argument " "2"" of type '" "eIDMW::PTEID_XmlUserRequestedInfo &""'"); 
  }
  arg2 = (eIDMW::PTEID_XmlUserRequestedInfo *)(argp2);
  result = (eIDMW::PTEID_CCXML_Doc *) &(arg1)->getXmlCCDoc(*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_CCXML_Doc, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getID(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_EId *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getID.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getID" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_EId *) &(arg1)->getID();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getAddr(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Address *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getAddr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getAddr" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_Address *) &(arg1)->getAddr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getSod(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Sod *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getSod.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getSod" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_Sod *) &(arg1)->getSod();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Sod, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getVersionInfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_CardVersionInfo *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getVersionInfo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getVersionInfo" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_CardVersionInfo *) &(arg1)->getVersionInfo();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  eIDMW::PTEID_Pin *arg3 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "3"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg3 = (eIDMW::PTEID_Pin *)(argp3);
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (bool)(arg1)->writePersonalNotes((eIDMW::PTEID_ByteArray const &)*arg2,arg3,(char const *)arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  eIDMW::PTEID_Pin *arg3 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "3"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg3 = (eIDMW::PTEID_Pin *)(argp3);
  result = (bool)(arg1)->writePersonalNotes((eIDMW::PTEID_ByteArray const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_EIDCard_writePersonalNotes" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray const &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  result = (bool)(arg1)->writePersonalNotes((eIDMW::PTEID_ByteArray const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_writePersonalNotes(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_EIDCard_writePersonalNotes__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function writePersonalNotes.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_readPersonalNotes(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_readPersonalNotes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_readPersonalNotes" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (char *)(arg1)->readPersonalNotes();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getCert(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_CertifType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getCert.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getCert" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_EIDCard_getCert" "', argument " "2"" of type '" "eIDMW::PTEID_CertifType""'");
  } 
  arg2 = (eIDMW::PTEID_CertifType)(val2);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getCert(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRoot(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRoot.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRoot" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getRoot();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getCA(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getCA.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getCA" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getCA();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getSignature(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getSignature.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getSignature" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getSignature();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getAuthentication(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getAuthentication.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getAuthentication" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getAuthentication();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRootCAPubKey(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_PublicKey *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRootCAPubKey.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRootCAPubKey" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_PublicKey *) &(arg1)->getRootCAPubKey();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_PublicKey, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_isActive(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_isActive.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_isActive" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (bool)(arg1)->isActive();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_doSODCheck(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_doSODCheck.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_doSODCheck" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_EIDCard_doSODCheck" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->doSODCheck(arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_Activate(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char *arg2 = (char *) 0 ;
  eIDMW::PTEID_ByteArray *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_Activate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_Activate" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_Activate" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_EIDCard_Activate" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_EIDCard_Activate" "', argument " "3"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  arg3 = (eIDMW::PTEID_ByteArray *)(argp3);
  result = (bool)(arg1)->Activate((char const *)arg2,*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_SignXades(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char **arg2 = (char **) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_SignXades.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_SignXades" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_SignXades" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_EIDCard_SignXades" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_EIDCard_SignXades" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (arg1)->SignXades((char const *const *)arg2,arg3,(char const *)arg4);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_SignXadesT(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char **arg2 = (char **) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_SignXadesT.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_SignXadesT" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_SignXadesT" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_EIDCard_SignXadesT" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_EIDCard_SignXadesT" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (arg1)->SignXadesT((char const *const *)arg2,arg3,(char const *)arg4);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_SignXadesA(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char **arg2 = (char **) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_SignXadesA.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_SignXadesA" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_SignXadesA" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_EIDCard_SignXadesA" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_EIDCard_SignXadesA" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (arg1)->SignXadesA((char const *const *)arg2,arg3,(char const *)arg4);
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_SignXadesIndividual(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char **arg2 = (char **) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_SignXadesIndividual.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_SignXadesIndividual" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_SignXadesIndividual" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_EIDCard_SignXadesIndividual" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_EIDCard_SignXadesIndividual" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  (arg1)->SignXadesIndividual((char const *const *)arg2,arg3,(char const *)arg4);
  jsresult = v8::Undefined();
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_SignXadesTIndividual(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char **arg2 = (char **) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_SignXadesTIndividual.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_SignXadesTIndividual" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_SignXadesTIndividual" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_EIDCard_SignXadesTIndividual" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_EIDCard_SignXadesTIndividual" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  (arg1)->SignXadesTIndividual((char const *const *)arg2,arg3,(char const *)arg4);
  jsresult = v8::Undefined();
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_SignPDF__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_PDFSignature *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_PDFSignature,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "2"" of type '" "eIDMW::PTEID_PDFSignature &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_EIDCard_SignPDF" "', argument " "2"" of type '" "eIDMW::PTEID_PDFSignature &""'"); 
  }
  arg2 = (eIDMW::PTEID_PDFSignature *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  res5 = SWIG_AsCharPtrAndSize(args[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  res6 = SWIG_AsCharPtrAndSize(args[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = (char *)(buf6);
  res7 = SWIG_AsCharPtrAndSize(args[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = (char *)(buf7);
  result = (int)(arg1)->SignPDF(*arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_SignPDF__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_PDFSignature *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_PDFSignature,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "2"" of type '" "eIDMW::PTEID_PDFSignature &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_EIDCard_SignPDF" "', argument " "2"" of type '" "eIDMW::PTEID_PDFSignature &""'"); 
  }
  arg2 = (eIDMW::PTEID_PDFSignature *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  res6 = SWIG_AsCharPtrAndSize(args[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = (char *)(buf6);
  res7 = SWIG_AsCharPtrAndSize(args[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = (char *)(buf7);
  res8 = SWIG_AsCharPtrAndSize(args[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PTEID_EIDCard_SignPDF" "', argument " "8"" of type '" "char const *""'");
  }
  arg8 = (char *)(buf8);
  result = (int)(arg1)->SignPDF(*arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_SignPDF(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_EIDCard_SignPDF__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_EIDCard_SignPDF__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_EIDCard_SignPDF__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_EIDCard_SignPDF__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function SignPDF.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_ChangeCapPin(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_ChangeCapPin.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_ChangeCapPin" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_ChangeCapPin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (bool)(arg1)->ChangeCapPin((char const *)arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_ChangeAddress(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  eIDMW::PTEID_EIDCard::t_address_change_callback arg4 = (eIDMW::PTEID_EIDCard::t_address_change_callback) 0 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res5 ;
  bool result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_ChangeAddress.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_ChangeAddress" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_ChangeAddress" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_EIDCard_ChangeAddress" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = (char *)(buf3);
  {
    int res = SWIG_ConvertFunctionPtr(args[2], (void**)(&arg4), SWIGTYPE_p_f_p_void_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "PTEID_EIDCard_ChangeAddress" "', argument " "4"" of type '" "eIDMW::PTEID_EIDCard::t_address_change_callback""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(args[3],SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PTEID_EIDCard_ChangeAddress" "', argument " "5"" of type '" "void *""'"); 
  }
  result = (bool)(arg1)->ChangeAddress(arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_ChangeCapPinCompLayer(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_ChangeCapPinCompLayer.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_ChangeCapPinCompLayer" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_EIDCard_ChangeCapPinCompLayer" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_EIDCard_ChangeCapPinCompLayer" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_EIDCard_ChangeCapPinCompLayer" "', argument " "4"" of type '" "unsigned long &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_EIDCard_ChangeCapPinCompLayer" "', argument " "4"" of type '" "unsigned long &""'"); 
  }
  arg4 = (unsigned long *)(argp4);
  result = (bool)(arg1)->ChangeCapPinCompLayer((char const *)arg2,(char const *)arg3,*arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  eIDMW::PTEID_RawDataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_EIDCard_getRawData" "', argument " "2"" of type '" "eIDMW::PTEID_RawDataType""'");
  } 
  arg2 = (eIDMW::PTEID_RawDataType)(val2);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_Id(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_Id.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_Id" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_Id();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_IdSig(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_IdSig.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_IdSig" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_IdSig();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_Trace(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_Trace.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_Trace" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_Trace();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_Addr(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_Addr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_Addr" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_Addr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_AddrSig(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_AddrSig.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_AddrSig" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_AddrSig();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_Sod(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_Sod.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_Sod" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_Sod();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_CardInfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_CardInfo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_CardInfo" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_CardInfo();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_TokenInfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_TokenInfo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_TokenInfo" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_TokenInfo();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_Challenge(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_Challenge.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_Challenge" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_Challenge();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_Response(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_Response.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_Response" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_Response();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EIDCard_getRawData_PersoData(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EIDCard *arg1 = (eIDMW::PTEID_EIDCard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EIDCard_getRawData_PersoData.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EIDCard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EIDCard_getRawData_PersoData" "', argument " "1"" of type '" "eIDMW::PTEID_EIDCard *""'"); 
  }
  arg1 = (eIDMW::PTEID_EIDCard *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getRawData_PersoData();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_EIDCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_EIDCard can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_SigVerifier(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  eIDMW::PTEID_SigVerifier *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_SigVerifier.");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_SigVerifier" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (eIDMW::PTEID_SigVerifier *)new eIDMW::PTEID_SigVerifier((char const *)arg1);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_SigVerifier, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_SigVerifier(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_SigVerifier(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_SigVerifier * arg1 = (eIDMW::PTEID_SigVerifier *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_SigVerifier_Verify(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SigVerifier *arg1 = (eIDMW::PTEID_SigVerifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SigVerifier_Verify.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SigVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SigVerifier_Verify" "', argument " "1"" of type '" "eIDMW::PTEID_SigVerifier *""'"); 
  }
  arg1 = (eIDMW::PTEID_SigVerifier *)(argp1);
  result = (int)(arg1)->Verify();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SigVerifier_GetSigner(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SigVerifier *arg1 = (eIDMW::PTEID_SigVerifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SigVerifier_GetSigner.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SigVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SigVerifier_GetSigner" "', argument " "1"" of type '" "eIDMW::PTEID_SigVerifier *""'"); 
  }
  arg1 = (eIDMW::PTEID_SigVerifier *)(argp1);
  result = (char *)(arg1)->GetSigner();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SigVerifier_GetTimestampString(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SigVerifier *arg1 = (eIDMW::PTEID_SigVerifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SigVerifier_GetTimestampString.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SigVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SigVerifier_GetTimestampString" "', argument " "1"" of type '" "eIDMW::PTEID_SigVerifier *""'"); 
  }
  arg1 = (eIDMW::PTEID_SigVerifier *)(argp1);
  result = (char *)(arg1)->GetTimestampString();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SigVerifier_GetUnixTimestamp(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_SigVerifier *arg1 = (eIDMW::PTEID_SigVerifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SigVerifier_GetUnixTimestamp.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_SigVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SigVerifier_GetUnixTimestamp" "', argument " "1"" of type '" "eIDMW::PTEID_SigVerifier *""'"); 
  }
  arg1 = (eIDMW::PTEID_SigVerifier *)(argp1);
  result = (long long)(arg1)->GetUnixTimestamp();
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_XmlUserRequestedInfo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_0.");
  result = (eIDMW::PTEID_XmlUserRequestedInfo *)new eIDMW::PTEID_XmlUserRequestedInfo();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_XmlUserRequestedInfo, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  eIDMW::PTEID_XmlUserRequestedInfo *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_1.");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_XmlUserRequestedInfo" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PTEID_XmlUserRequestedInfo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PTEID_XmlUserRequestedInfo" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (eIDMW::PTEID_XmlUserRequestedInfo *)new eIDMW::PTEID_XmlUserRequestedInfo((char const *)arg1,(char const *)arg2,(char const *)arg3);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_XmlUserRequestedInfo, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  eIDMW::PTEID_XmlUserRequestedInfo *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_2.");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_XmlUserRequestedInfo" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PTEID_XmlUserRequestedInfo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PTEID_XmlUserRequestedInfo" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_PTEID_XmlUserRequestedInfo" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (eIDMW::PTEID_XmlUserRequestedInfo *)new eIDMW::PTEID_XmlUserRequestedInfo((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_XmlUserRequestedInfo, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_XmlUserRequestedInfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_XmlUserRequestedInfo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _exports_PTEID_XmlUserRequestedInfo");
  
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_XmlUserRequestedInfo(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_XmlUserRequestedInfo(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_XmlUserRequestedInfo * arg1 = (eIDMW::PTEID_XmlUserRequestedInfo *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_XmlUserRequestedInfo_add(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_XmlUserRequestedInfo *arg1 = (eIDMW::PTEID_XmlUserRequestedInfo *) 0 ;
  eIDMW::XMLUserData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_XmlUserRequestedInfo_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_XmlUserRequestedInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_XmlUserRequestedInfo_add" "', argument " "1"" of type '" "eIDMW::PTEID_XmlUserRequestedInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_XmlUserRequestedInfo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_XmlUserRequestedInfo_add" "', argument " "2"" of type '" "eIDMW::XMLUserData""'");
  } 
  arg2 = (eIDMW::XMLUserData)(val2);
  (arg1)->add(arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_XMLDoc(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_XMLDoc(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_XMLDoc * arg1 = (eIDMW::PTEID_XMLDoc *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_XMLDoc_isAllowed(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_XMLDoc *arg1 = (eIDMW::PTEID_XMLDoc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_XMLDoc_isAllowed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_XMLDoc_isAllowed" "', argument " "1"" of type '" "eIDMW::PTEID_XMLDoc *""'"); 
  }
  arg1 = (eIDMW::PTEID_XMLDoc *)(argp1);
  result = (bool)(arg1)->isAllowed();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_XMLDoc_getXML(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_XMLDoc *arg1 = (eIDMW::PTEID_XMLDoc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_XMLDoc_getXML.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_XMLDoc_getXML" "', argument " "1"" of type '" "eIDMW::PTEID_XMLDoc *""'"); 
  }
  arg1 = (eIDMW::PTEID_XMLDoc *)(argp1);
  result = (arg1)->getXML();
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_XMLDoc_getCSV(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_XMLDoc *arg1 = (eIDMW::PTEID_XMLDoc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_XMLDoc_getCSV.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_XMLDoc_getCSV" "', argument " "1"" of type '" "eIDMW::PTEID_XMLDoc *""'"); 
  }
  arg1 = (eIDMW::PTEID_XMLDoc *)(argp1);
  result = (arg1)->getCSV();
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_XMLDoc_getTLV(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_XMLDoc *arg1 = (eIDMW::PTEID_XMLDoc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_XMLDoc_getTLV.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_XMLDoc_getTLV" "', argument " "1"" of type '" "eIDMW::PTEID_XMLDoc *""'"); 
  }
  arg1 = (eIDMW::PTEID_XMLDoc *)(argp1);
  result = (arg1)->getTLV();
  jsresult = SWIG_NewPointerObj((new eIDMW::PTEID_ByteArray((const eIDMW::PTEID_ByteArray&)(result))), SWIGTYPE_p_eIDMW__PTEID_ByteArray, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_XMLDoc_writeXmlToFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_XMLDoc *arg1 = (eIDMW::PTEID_XMLDoc *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_XMLDoc_writeXmlToFile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_XMLDoc_writeXmlToFile" "', argument " "1"" of type '" "eIDMW::PTEID_XMLDoc *""'"); 
  }
  arg1 = (eIDMW::PTEID_XMLDoc *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_XMLDoc_writeXmlToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (bool)(arg1)->writeXmlToFile((char const *)arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_XMLDoc_writeCsvToFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_XMLDoc *arg1 = (eIDMW::PTEID_XMLDoc *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_XMLDoc_writeCsvToFile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_XMLDoc_writeCsvToFile" "', argument " "1"" of type '" "eIDMW::PTEID_XMLDoc *""'"); 
  }
  arg1 = (eIDMW::PTEID_XMLDoc *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_XMLDoc_writeCsvToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (bool)(arg1)->writeCsvToFile((char const *)arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_XMLDoc_writeTlvToFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_XMLDoc *arg1 = (eIDMW::PTEID_XMLDoc *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_XMLDoc_writeTlvToFile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_XMLDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_XMLDoc_writeTlvToFile" "', argument " "1"" of type '" "eIDMW::PTEID_XMLDoc *""'"); 
  }
  arg1 = (eIDMW::PTEID_XMLDoc *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_XMLDoc_writeTlvToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (bool)(arg1)->writeTlvToFile((char const *)arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_XMLDoc(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_XMLDoc can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Biometric(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Biometric(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Biometric * arg1 = (eIDMW::PTEID_Biometric *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_veto_PTEID_Biometric(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Biometric can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Crypto(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Crypto(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Crypto * arg1 = (eIDMW::PTEID_Crypto *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_new_veto_PTEID_Crypto(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Crypto can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_CardVersionInfo(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_CardVersionInfo(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_CardVersionInfo * arg1 = (eIDMW::PTEID_CardVersionInfo *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getSerialNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getSerialNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getSerialNumber" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getSerialNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getTokenLabel(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getTokenLabel.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getTokenLabel" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getTokenLabel();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getComponentCode(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getComponentCode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getComponentCode" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getComponentCode();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getOsNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getOsNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getOsNumber" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getOsNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getOsVersion(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getOsVersion.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getOsVersion" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getOsVersion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getSoftmaskNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getSoftmaskNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getSoftmaskNumber" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getSoftmaskNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getSoftmaskVersion(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getSoftmaskVersion.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getSoftmaskVersion" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getSoftmaskVersion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getAppletVersion(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getAppletVersion.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getAppletVersion" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getAppletVersion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getGlobalOsVersion(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getGlobalOsVersion.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getGlobalOsVersion" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getGlobalOsVersion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getAppletInterfaceVersion(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getAppletInterfaceVersion.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getAppletInterfaceVersion" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getAppletInterfaceVersion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getPKCS1Support(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getPKCS1Support.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getPKCS1Support" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getPKCS1Support();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getKeyExchangeVersion(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getKeyExchangeVersion.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getKeyExchangeVersion" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getKeyExchangeVersion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getAppletLifeCycle(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getAppletLifeCycle.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getAppletLifeCycle" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getAppletLifeCycle();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getGraphicalPersonalisation(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getGraphicalPersonalisation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getGraphicalPersonalisation" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getGraphicalPersonalisation();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getElectricalPersonalisation(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getElectricalPersonalisation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getElectricalPersonalisation" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getElectricalPersonalisation();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getElectricalPersonalisationInterface(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getElectricalPersonalisationInterface.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getElectricalPersonalisationInterface" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (char *)(arg1)->getElectricalPersonalisationInterface();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CardVersionInfo_getSignature(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CardVersionInfo *arg1 = (eIDMW::PTEID_CardVersionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CardVersionInfo_getSignature.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CardVersionInfo_getSignature" "', argument " "1"" of type '" "eIDMW::PTEID_CardVersionInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_CardVersionInfo *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getSignature();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_CardVersionInfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_CardVersionInfo can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Sod(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Sod(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Sod * arg1 = (eIDMW::PTEID_Sod *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Sod_getData(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Sod *arg1 = (eIDMW::PTEID_Sod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Sod_getData.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Sod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Sod_getData" "', argument " "1"" of type '" "eIDMW::PTEID_Sod *""'"); 
  }
  arg1 = (eIDMW::PTEID_Sod *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getData();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Sod_getHash(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Sod *arg1 = (eIDMW::PTEID_Sod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Sod_getHash.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Sod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Sod_getHash" "', argument " "1"" of type '" "eIDMW::PTEID_Sod *""'"); 
  }
  arg1 = (eIDMW::PTEID_Sod *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getHash();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_Sod(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Sod can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_EId(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_EId(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_EId * arg1 = (eIDMW::PTEID_EId *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_EId_getDocumentVersion(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getDocumentVersion.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getDocumentVersion" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getDocumentVersion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getDocumentType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getDocumentType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getDocumentType" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getDocumentType();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getCountry(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getCountry.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getCountry" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getCountry();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getGivenName(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getGivenName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getGivenName" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getGivenName();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getSurname(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getSurname.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getSurname" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getSurname();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getGender(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getGender.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getGender" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getGender();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getDateOfBirth(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getDateOfBirth.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getDateOfBirth" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getDateOfBirth();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getLocationOfBirth(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getLocationOfBirth.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getLocationOfBirth" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getLocationOfBirth();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getNationality(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getNationality.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getNationality" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getNationality();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getDuplicata(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getDuplicata.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getDuplicata" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getDuplicata();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getSpecialOrganization(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getSpecialOrganization.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getSpecialOrganization" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getSpecialOrganization();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getMemberOfFamily(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getMemberOfFamily.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getMemberOfFamily" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getMemberOfFamily();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getLogicalNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getLogicalNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getLogicalNumber" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getLogicalNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getDocumentPAN(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getDocumentPAN.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getDocumentPAN" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getDocumentPAN();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getValidityBeginDate(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getValidityBeginDate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getValidityBeginDate" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getValidityBeginDate();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getValidityEndDate(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getValidityEndDate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getValidityEndDate" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getValidityEndDate();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getSpecialStatus(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getSpecialStatus.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getSpecialStatus" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getSpecialStatus();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getHeight(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getHeight.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getHeight" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getHeight();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getDocumentNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getDocumentNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getDocumentNumber" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getDocumentNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getCivilianIdNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getCivilianIdNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getCivilianIdNumber" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getCivilianIdNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getTaxNo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getTaxNo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getTaxNo" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getTaxNo();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getSocialSecurityNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getSocialSecurityNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getSocialSecurityNumber" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getSocialSecurityNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getHealthNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getHealthNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getHealthNumber" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getHealthNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getIssuingEntity(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getIssuingEntity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getIssuingEntity" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getIssuingEntity();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getLocalofRequest(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getLocalofRequest.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getLocalofRequest" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getLocalofRequest();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getGivenNameFather(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getGivenNameFather.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getGivenNameFather" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getGivenNameFather();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getSurnameFather(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getSurnameFather.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getSurnameFather" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getSurnameFather();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getGivenNameMother(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getGivenNameMother.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getGivenNameMother" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getGivenNameMother();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getSurnameMother(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getSurnameMother.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getSurnameMother" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getSurnameMother();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getParents(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getParents.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getParents" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getParents();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getPhotoObj(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Photo *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getPhotoObj.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getPhotoObj" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (eIDMW::PTEID_Photo *) &(arg1)->getPhotoObj();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Photo, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getCardAuthKeyObj(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_PublicKey *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getCardAuthKeyObj.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getCardAuthKeyObj" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (eIDMW::PTEID_PublicKey *) &(arg1)->getCardAuthKeyObj();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_PublicKey, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getValidation(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getValidation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getValidation" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getValidation();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getMRZ1(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getMRZ1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getMRZ1" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getMRZ1();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getMRZ2(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getMRZ2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getMRZ2" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getMRZ2();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getMRZ3(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getMRZ3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getMRZ3" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getMRZ3();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_EId_getAccidentalIndications(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_EId *arg1 = (eIDMW::PTEID_EId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_EId_getAccidentalIndications.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_EId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_EId_getAccidentalIndications" "', argument " "1"" of type '" "eIDMW::PTEID_EId *""'"); 
  }
  arg1 = (eIDMW::PTEID_EId *)(argp1);
  result = (char *)(arg1)->getAccidentalIndications();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_EId(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_EId can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Address(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Address(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Address * arg1 = (eIDMW::PTEID_Address *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Address_isNationalAddress(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_isNationalAddress.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_isNationalAddress" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (bool)(arg1)->isNationalAddress();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getCountryCode(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getCountryCode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getCountryCode" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getCountryCode();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getDistrict(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getDistrict.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getDistrict" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getDistrict();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getDistrictCode(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getDistrictCode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getDistrictCode" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getDistrictCode();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getMunicipality(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getMunicipality.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getMunicipality" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getMunicipality();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getMunicipalityCode(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getMunicipalityCode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getMunicipalityCode" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getMunicipalityCode();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getCivilParish(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getCivilParish.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getCivilParish" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getCivilParish();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getCivilParishCode(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getCivilParishCode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getCivilParishCode" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getCivilParishCode();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getAbbrStreetType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getAbbrStreetType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getAbbrStreetType" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getAbbrStreetType();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getStreetType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getStreetType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getStreetType" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getStreetType();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getStreetName(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getStreetName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getStreetName" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getStreetName();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getAbbrBuildingType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getAbbrBuildingType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getAbbrBuildingType" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getAbbrBuildingType();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getBuildingType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getBuildingType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getBuildingType" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getBuildingType();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getDoorNo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getDoorNo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getDoorNo" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getDoorNo();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getFloor(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getFloor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getFloor" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getFloor();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getSide(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getSide.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getSide" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getSide();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getLocality(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getLocality.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getLocality" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getLocality();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getPlace(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getPlace.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getPlace" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getPlace();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getZip4(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getZip4.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getZip4" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getZip4();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getZip3(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getZip3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getZip3" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getZip3();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getPostalLocality(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getPostalLocality.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getPostalLocality" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getPostalLocality();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getGeneratedAddressCode(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getGeneratedAddressCode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getGeneratedAddressCode" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getGeneratedAddressCode();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getForeignCountry(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getForeignCountry.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getForeignCountry" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getForeignCountry();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getForeignAddress(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getForeignAddress.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getForeignAddress" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getForeignAddress();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getForeignCity(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getForeignCity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getForeignCity" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getForeignCity();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getForeignRegion(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getForeignRegion.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getForeignRegion" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getForeignRegion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getForeignLocality(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getForeignLocality.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getForeignLocality" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getForeignLocality();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Address_getForeignPostalCode(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Address *arg1 = (eIDMW::PTEID_Address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Address_getForeignPostalCode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Address_getForeignPostalCode" "', argument " "1"" of type '" "eIDMW::PTEID_Address *""'"); 
  }
  arg1 = (eIDMW::PTEID_Address *)(argp1);
  result = (char *)(arg1)->getForeignPostalCode();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_Address(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Address can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_CCXML_Doc(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_CCXML_Doc(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_CCXML_Doc * arg1 = (eIDMW::PTEID_CCXML_Doc *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_CCXML_Doc_getCCXML(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_CCXML_Doc *arg1 = (eIDMW::PTEID_CCXML_Doc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CCXML_Doc_getCCXML.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_CCXML_Doc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CCXML_Doc_getCCXML" "', argument " "1"" of type '" "eIDMW::PTEID_CCXML_Doc *""'"); 
  }
  arg1 = (eIDMW::PTEID_CCXML_Doc *)(argp1);
  result = (char *)(arg1)->getCCXML();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_CCXML_Doc(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_CCXML_Doc can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Pins(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Pins(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Pins * arg1 = (eIDMW::PTEID_Pins *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Pins_count(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pins *arg1 = (eIDMW::PTEID_Pins *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pins_count.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pins_count" "', argument " "1"" of type '" "eIDMW::PTEID_Pins *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pins *)(argp1);
  result = (unsigned long)(arg1)->count();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pins_getPinByNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pins *arg1 = (eIDMW::PTEID_Pins *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_Pin *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pins_getPinByNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pins_getPinByNumber" "', argument " "1"" of type '" "eIDMW::PTEID_Pins *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pins *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Pins_getPinByNumber" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (eIDMW::PTEID_Pin *) &(arg1)->getPinByNumber(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pins_getPinByPinRef(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pins *arg1 = (eIDMW::PTEID_Pins *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_Pin *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pins_getPinByPinRef.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pins_getPinByPinRef" "', argument " "1"" of type '" "eIDMW::PTEID_Pins *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pins *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Pins_getPinByPinRef" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (eIDMW::PTEID_Pin *) &(arg1)->getPinByPinRef(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_Pins(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Pins can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_Pin_AUTH_PIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(eIDMW::PTEID_Pin::AUTH_PIN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_Pin_SIGN_PIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(eIDMW::PTEID_Pin::SIGN_PIN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_Pin_ADDR_PIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(eIDMW::PTEID_Pin::ADDR_PIN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Pin(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Pin(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Pin * arg1 = (eIDMW::PTEID_Pin *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Pin_getIndex(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getIndex.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getIndex" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (unsigned long)(arg1)->getIndex();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_getType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getType" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (unsigned long)(arg1)->getType();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_getId(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getId.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getId" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (unsigned long)(arg1)->getId();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_getPinRef(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getPinRef.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getPinRef" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (unsigned long)(arg1)->getPinRef();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_getUsageCode(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_PinUsage result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getUsageCode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getUsageCode" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (eIDMW::PTEID_PinUsage)(arg1)->getUsageCode();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_getFlags(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getFlags.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getFlags" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (unsigned long)(arg1)->getFlags();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_getLabel(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getLabel.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getLabel" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (char *)(arg1)->getLabel();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_unlockPin(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_unlockPin.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_unlockPin" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Pin_unlockPin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_Pin_unlockPin" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_Pin_unlockPin" "', argument " "4"" of type '" "unsigned long &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Pin_unlockPin" "', argument " "4"" of type '" "unsigned long &""'"); 
  }
  arg4 = (unsigned long *)(argp4);
  result = (bool)(arg1)->unlockPin((char const *)arg2,(char const *)arg3,*arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_getSignature(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getSignature.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getSignature" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getSignature();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_getTriesLeft(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Pin_getTriesLeft.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_getTriesLeft" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (long)(arg1)->getTriesLeft();
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_verifyPin__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_verifyPin" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (bool)(arg1)->verifyPin();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_verifyPin__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_verifyPin" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Pin_verifyPin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_Pin_verifyPin" "', argument " "3"" of type '" "unsigned long &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Pin_verifyPin" "', argument " "3"" of type '" "unsigned long &""'"); 
  }
  arg3 = (unsigned long *)(argp3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PTEID_Pin_verifyPin" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->verifyPin((char const *)arg2,*arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_verifyPin__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_verifyPin" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Pin_verifyPin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_Pin_verifyPin" "', argument " "3"" of type '" "unsigned long &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Pin_verifyPin" "', argument " "3"" of type '" "unsigned long &""'"); 
  }
  arg3 = (unsigned long *)(argp3);
  result = (bool)(arg1)->verifyPin((char const *)arg2,*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_verifyPin(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Pin_verifyPin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Pin_verifyPin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Pin_verifyPin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Pin_verifyPin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Pin_verifyPin__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Pin_verifyPin__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function verifyPin.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_changePin__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_changePin" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  result = (bool)(arg1)->changePin();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_changePin__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_changePin" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Pin_changePin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_Pin_changePin" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_Pin_changePin" "', argument " "4"" of type '" "unsigned long &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Pin_changePin" "', argument " "4"" of type '" "unsigned long &""'"); 
  }
  arg4 = (unsigned long *)(argp4);
  res5 = SWIG_AsCharPtrAndSize(args[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PTEID_Pin_changePin" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  ecode6 = SWIG_AsVal_bool(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PTEID_Pin_changePin" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  result = (bool)(arg1)->changePin((char const *)arg2,(char const *)arg3,*arg4,(char const *)arg5,arg6);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_changePin__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Pin *arg1 = (eIDMW::PTEID_Pin *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Pin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Pin_changePin" "', argument " "1"" of type '" "eIDMW::PTEID_Pin *""'"); 
  }
  arg1 = (eIDMW::PTEID_Pin *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Pin_changePin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_Pin_changePin" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_Pin_changePin" "', argument " "4"" of type '" "unsigned long &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Pin_changePin" "', argument " "4"" of type '" "unsigned long &""'"); 
  }
  arg4 = (unsigned long *)(argp4);
  res5 = SWIG_AsCharPtrAndSize(args[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PTEID_Pin_changePin" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  result = (bool)(arg1)->changePin((char const *)arg2,(char const *)arg3,*arg4,(char const *)arg5);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Pin_changePin(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Pin_changePin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Pin_changePin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Pin_changePin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Pin_changePin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Pin_changePin__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Pin_changePin__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function changePin.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_Pin(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Pin can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_Certificates(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_Certificates *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_Certificates.");
  result = (eIDMW::PTEID_Certificates *)new eIDMW::PTEID_Certificates();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_Certificates, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Certificates(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Certificates(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Certificates * arg1 = (eIDMW::PTEID_Certificates *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Certificates_countFromCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_countFromCard.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_countFromCard" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  result = (unsigned long)(arg1)->countFromCard();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_countAll(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_countAll.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_countAll" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  result = (unsigned long)(arg1)->countAll();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getCertFromCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getCertFromCard.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getCertFromCard" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getCertFromCard" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getCertFromCard(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getCert__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getCert" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getCert" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getCert(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getExternalCertData(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getExternalCertData.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getExternalCertData" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getExternalCertData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)(arg1)->getExternalCertData(arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getExternalCertDataSize(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getExternalCertDataSize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getExternalCertDataSize" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getExternalCertDataSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)(arg1)->getExternalCertDataSize(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getExternalCertSubject(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getExternalCertSubject.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getExternalCertSubject" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getExternalCertSubject" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)(arg1)->getExternalCertSubject(arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getExternalCertIssuer(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getExternalCertIssuer.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getExternalCertIssuer" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getExternalCertIssuer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)(arg1)->getExternalCertIssuer(arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getExternalCertNotBefore(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getExternalCertNotBefore.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getExternalCertNotBefore" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getExternalCertNotBefore" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)(arg1)->getExternalCertNotBefore(arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getExternalCertNotAfter(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getExternalCertNotAfter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getExternalCertNotAfter" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getExternalCertNotAfter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)(arg1)->getExternalCertNotAfter(arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getExternalCertKeylenght(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getExternalCertKeylenght.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getExternalCertKeylenght" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getExternalCertKeylenght" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (unsigned long)(arg1)->getExternalCertKeylenght(arg2);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getCert__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  eIDMW::PTEID_CertifType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getCert" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificates_getCert" "', argument " "2"" of type '" "eIDMW::PTEID_CertifType""'");
  } 
  arg2 = (eIDMW::PTEID_CertifType)(val2);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getCert(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getCert(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Certificates_getCert__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Certificates_getCert__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031900)
    jsresult = _wrap_PTEID_Certificates_getCert__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
#else
    _wrap_PTEID_Certificates_getCert__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getCert.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getRoot(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getRoot.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getRoot" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getRoot();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getCA(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getCA.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getCA" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getCA();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getSignature(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getSignature.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getSignature" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getSignature();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_getAuthentication(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_getAuthentication.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_getAuthentication" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getAuthentication();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificates_addCertificate(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificates *arg1 = (eIDMW::PTEID_Certificates *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificates_addCertificate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificates_addCertificate" "', argument " "1"" of type '" "eIDMW::PTEID_Certificates *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificates *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Certificates_addCertificate" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Certificates_addCertificate" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->addCertificate(*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_Certificate_CITIZEN_AUTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(eIDMW::PTEID_Certificate::CITIZEN_AUTH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_Certificate_CITIZEN_SIGN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(eIDMW::PTEID_Certificate::CITIZEN_SIGN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_Certificate_SUB_CA_SIGN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(eIDMW::PTEID_Certificate::SUB_CA_SIGN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_PTEID_Certificate_SUB_CA_AUTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(eIDMW::PTEID_Certificate::SUB_CA_AUTH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Certificate(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Certificate(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Certificate * arg1 = (eIDMW::PTEID_Certificate *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Certificate_getLabel(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getLabel.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getLabel" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (char *)(arg1)->getLabel();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getID(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getID.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getID" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (unsigned long)(arg1)->getID();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_CertifType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getType" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (eIDMW::PTEID_CertifType)(arg1)->getType();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getCertData(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_ByteArray *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getCertData.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getCertData" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (eIDMW::PTEID_ByteArray *) &(arg1)->getCertData();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_ByteArray, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getFormattedData(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  eIDMW::PTEID_ByteArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getFormattedData.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getFormattedData" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_eIDMW__PTEID_ByteArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Certificate_getFormattedData" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PTEID_Certificate_getFormattedData" "', argument " "2"" of type '" "eIDMW::PTEID_ByteArray &""'"); 
  }
  arg2 = (eIDMW::PTEID_ByteArray *)(argp2);
  (arg1)->getFormattedData(*arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getSerialNumber(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getSerialNumber.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getSerialNumber" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (char *)(arg1)->getSerialNumber();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getOwnerName(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getOwnerName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getOwnerName" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (char *)(arg1)->getOwnerName();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getIssuerName(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getIssuerName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getIssuerName" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (char *)(arg1)->getIssuerName();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getValidityBegin(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getValidityBegin.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getValidityBegin" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (char *)(arg1)->getValidityBegin();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getValidityEnd(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getValidityEnd.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getValidityEnd" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (char *)(arg1)->getValidityEnd();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getKeyLength(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getKeyLength.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getKeyLength" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (unsigned long)(arg1)->getKeyLength();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_isRoot(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_isRoot.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_isRoot" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (bool)(arg1)->isRoot();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_isTest(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_isTest.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_isTest" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (bool)(arg1)->isTest();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_isFromPteidValidChain(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_isFromPteidValidChain.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_isFromPteidValidChain" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (bool)(arg1)->isFromPteidValidChain();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_isFromCard(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_isFromCard.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_isFromCard" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (bool)(arg1)->isFromCard();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getIssuer(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getIssuer.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getIssuer" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getIssuer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_countChildren(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_countChildren.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_countChildren" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  result = (unsigned long)(arg1)->countChildren();
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Certificate_getChildren(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certificate *arg1 = (eIDMW::PTEID_Certificate *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  eIDMW::PTEID_Certificate *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Certificate_getChildren.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certificate_getChildren" "', argument " "1"" of type '" "eIDMW::PTEID_Certificate *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certificate *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certificate_getChildren" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (eIDMW::PTEID_Certificate *) &(arg1)->getChildren(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certificate, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_veto_PTEID_Certificate(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class PTEID_Certificate can not be instantiated");
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_Config__SWIG_0(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_Param arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  eIDMW::PTEID_Config *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_Config__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PTEID_Config" "', argument " "1"" of type '" "eIDMW::PTEID_Param""'");
  } 
  arg1 = (eIDMW::PTEID_Param)(val1);
  result = (eIDMW::PTEID_Config *)new eIDMW::PTEID_Config(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_Config, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_Config__SWIG_1(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  eIDMW::PTEID_Config *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_Config__SWIG_1.");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_Config" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PTEID_Config" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PTEID_Config" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (eIDMW::PTEID_Config *)new eIDMW::PTEID_Config((char const *)arg1,(char const *)arg2,(char const *)arg3);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_Config, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_Config__SWIG_2(const SwigV8Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  eIDMW::PTEID_Config *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_Config__SWIG_2.");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTEID_Config" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PTEID_Config" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PTEID_Config" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = (long)(val3);
  result = (eIDMW::PTEID_Config *)new eIDMW::PTEID_Config((char const *)arg1,(char const *)arg2,arg3);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_Config, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_new_PTEID_Config(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_Config__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_Config__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_Config__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_Config__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if SWIG_V8_VERSION < 0x031900
    self = _wrap_new_PTEID_Config__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
#else
    _wrap_new_PTEID_Config__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _exports_PTEID_Config");
  
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Config(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Config(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Config * arg1 = (eIDMW::PTEID_Config *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_PTEID_Config_getString(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Config *arg1 = (eIDMW::PTEID_Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Config_getString.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Config_getString" "', argument " "1"" of type '" "eIDMW::PTEID_Config *""'"); 
  }
  arg1 = (eIDMW::PTEID_Config *)(argp1);
  result = (char *)(arg1)->getString();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Config_getLong(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Config *arg1 = (eIDMW::PTEID_Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Config_getLong.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Config_getLong" "', argument " "1"" of type '" "eIDMW::PTEID_Config *""'"); 
  }
  arg1 = (eIDMW::PTEID_Config *)(argp1);
  result = (long)(arg1)->getLong();
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Config_setString(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Config *arg1 = (eIDMW::PTEID_Config *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Config_setString.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Config_setString" "', argument " "1"" of type '" "eIDMW::PTEID_Config *""'"); 
  }
  arg1 = (eIDMW::PTEID_Config *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Config_setString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->setString((char const *)arg2);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Config_setLong(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Config *arg1 = (eIDMW::PTEID_Config *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Config_setLong.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Config_setLong" "', argument " "1"" of type '" "eIDMW::PTEID_Config *""'"); 
  }
  arg1 = (eIDMW::PTEID_Config *)(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Config_setLong" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  (arg1)->setLong(arg2);
  jsresult = v8::Undefined();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_LOG(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_LOG.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_LOG" "', argument " "1"" of type '" "eIDMW::PTEID_LogLevel""'");
  } 
  arg1 = (eIDMW::PTEID_LogLevel)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_LOG" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_LOG" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  eIDMW::PTEID_LOG(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_COMP_LAYER_NATIONAL_ADDRESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"N");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_COMP_LAYER_FOREIGN_ADDRESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"I");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DELIVERY_ENTITY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(40));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_COUNTRY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(80));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DOCUMENT_TYPE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(34));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_CARDNUMBER_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(28));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_CARDNUMBER_PAN_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(32));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_CARDVERSION_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DATE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_LOCALE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(60));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NAME_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(120));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_SEX_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NATIONALITY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(6));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_HEIGHT_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NUMBI_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(18));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NUMNIF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(18));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NUMSS_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(22));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NUMSNS_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(18));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_INDICATIONEV_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(120));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MRZ_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(30));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DELIVERY_ENTITY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(40+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_COUNTRY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(80+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DOCUMENT_TYPE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(34+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CARDNUMBER_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(28+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CARDNUMBER_PAN_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(32+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CARDVERSION_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(16+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DATE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_LOCALE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(60+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NAME_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(120+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_SEX_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NATIONALITY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(6+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_HEIGHT_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NUMBI_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(18+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NUMNIF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(18+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NUMSS_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(22+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NUMSNS_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(18+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_INDICATIONEV_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(120+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_MRZ_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(30+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ADDR_TYPE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ADDR_COUNTRY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DISTRICT_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DISTRICT_DESC_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DISTRICT_CON_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DISTRICT_CON_DESC_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DISTRICT_FREG_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_DISTRICT_FREG_DESC_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ROAD_ABBR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ROAD_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ROAD_DESIG_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(200));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_HOUSE_ABBR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_HOUSE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NUMDOOR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_FLOOR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(40));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_SIDE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(40));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_PLACE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_LOCALITY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_CP4_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_CP3_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(6));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_POSTAL_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(50));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NUMMOR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ADDR_COUNTRYF_DESC_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ADDRF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(300));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_CITYF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_REGIOF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_LOCALITYF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_POSTALF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NUMMORF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_ADDR_TYPE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_ADDR_COUNTRY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DISTRICT_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DISTRICT_DESC_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DISTRICT_CON_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DISTRICT_CON_DESC_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DISTRICT_FREG_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_DISTRICT_FREG_DESC_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_ROAD_ABBR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_ROAD_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_ROAD_DESIG_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(200+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_HOUSE_ABBR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_HOUSE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NUMDOOR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_FLOOR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(40+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_SIDE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(40+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_PLACE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_LOCALITY_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CP4_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CP3_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(6+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_POSTAL_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(50+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NUMMOR_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_ADDR_COUNTRYF_DESC_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_ADDRF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(300+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CITYF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_REGIOF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_LOCALITYF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_POSTALF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(100+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_NUMMORF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12+2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_PICTURE_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(14128));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_PICTURE_LEN_HEADER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(111));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_PICTUREH_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((14128+111)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CBEFF_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(34));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_FACRECH_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(14));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_FACINFO_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_IMAGEINFO_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_IMAGEHEADER_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((34+14+20+12)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CERT_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2500));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CERT_NUMBER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_CERT_LABEL_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(256));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_PINS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_PIN_LABEL_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(256));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_MAX_ID_NUMBER_LEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(64));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_SOD_FILE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"3F005F00EF06");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ACTIVE_CARD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_INACTIVE_CARD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_ADDRESS_PIN_ID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(131));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_NO_PIN_NEEDED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_MODE_ACTIVATE_BLOCK_PIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_COMP_CARD_TYPE_ERR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::COMP_CARD_TYPE_ERR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_COMP_CARD_TYPE_IAS07(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::COMP_CARD_TYPE_IAS07));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_COMP_CARD_TYPE_IAS101(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::COMP_CARD_TYPE_IAS101));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_version_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_version_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  ecode2 = SWIG_AsVal_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ID_version_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = (short)(val2);
  if (arg1) (arg1)->version = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_version_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_version_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (short) ((arg1)->version);
  jsresult = SWIG_From_short((short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_deliveryEntity_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[40+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_deliveryEntity_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 40+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_deliveryEntity_set" "', argument " "2"" of type '" "char [40+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->deliveryEntity,arg2,40+2*sizeof(char));
  else memset(arg1->deliveryEntity,0,40+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_deliveryEntity_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_deliveryEntity_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->deliveryEntity);
  {
    size_t size = SWIG_strnlen(result, 40+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_country_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[80+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_country_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 80+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_country_set" "', argument " "2"" of type '" "char [80+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->country,arg2,80+2*sizeof(char));
  else memset(arg1->country,0,80+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_country_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_country_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->country);
  {
    size_t size = SWIG_strnlen(result, 80+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_documentType_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[34+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_documentType_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 34+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_documentType_set" "', argument " "2"" of type '" "char [34+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->documentType,arg2,34+2*sizeof(char));
  else memset(arg1->documentType,0,34+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_documentType_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_documentType_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->documentType);
  {
    size_t size = SWIG_strnlen(result, 34+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_cardNumber_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[28+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_cardNumber_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 28+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_cardNumber_set" "', argument " "2"" of type '" "char [28+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->cardNumber,arg2,28+2*sizeof(char));
  else memset(arg1->cardNumber,0,28+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_cardNumber_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_cardNumber_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->cardNumber);
  {
    size_t size = SWIG_strnlen(result, 28+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_cardNumberPAN_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_cardNumberPAN_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 32+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_cardNumberPAN_set" "', argument " "2"" of type '" "char [32+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->cardNumberPAN,arg2,32+2*sizeof(char));
  else memset(arg1->cardNumberPAN,0,32+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_cardNumberPAN_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_cardNumberPAN_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->cardNumberPAN);
  {
    size_t size = SWIG_strnlen(result, 32+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_cardVersion_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_cardVersion_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 16+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_cardVersion_set" "', argument " "2"" of type '" "char [16+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->cardVersion,arg2,16+2*sizeof(char));
  else memset(arg1->cardVersion,0,16+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_cardVersion_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_cardVersion_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->cardVersion);
  {
    size_t size = SWIG_strnlen(result, 16+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_deliveryDate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[20+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_deliveryDate_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 20+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_deliveryDate_set" "', argument " "2"" of type '" "char [20+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->deliveryDate,arg2,20+2*sizeof(char));
  else memset(arg1->deliveryDate,0,20+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_deliveryDate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_deliveryDate_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->deliveryDate);
  {
    size_t size = SWIG_strnlen(result, 20+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_locale_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[60+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_locale_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 60+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_locale_set" "', argument " "2"" of type '" "char [60+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->locale,arg2,60+2*sizeof(char));
  else memset(arg1->locale,0,60+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_locale_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_locale_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->locale);
  {
    size_t size = SWIG_strnlen(result, 60+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_validityDate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[20+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_validityDate_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 20+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_validityDate_set" "', argument " "2"" of type '" "char [20+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->validityDate,arg2,20+2*sizeof(char));
  else memset(arg1->validityDate,0,20+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_validityDate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_validityDate_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->validityDate);
  {
    size_t size = SWIG_strnlen(result, 20+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_name_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[120+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_name_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 120+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_name_set" "', argument " "2"" of type '" "char [120+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->name,arg2,120+2*sizeof(char));
  else memset(arg1->name,0,120+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_name_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->name);
  {
    size_t size = SWIG_strnlen(result, 120+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_firstname_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[120+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_firstname_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 120+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_firstname_set" "', argument " "2"" of type '" "char [120+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->firstname,arg2,120+2*sizeof(char));
  else memset(arg1->firstname,0,120+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_firstname_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_firstname_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->firstname);
  {
    size_t size = SWIG_strnlen(result, 120+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_sex_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[2+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_sex_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 2+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_sex_set" "', argument " "2"" of type '" "char [2+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->sex,arg2,2+2*sizeof(char));
  else memset(arg1->sex,0,2+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_sex_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_sex_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->sex);
  {
    size_t size = SWIG_strnlen(result, 2+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_nationality_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[6+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_nationality_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 6+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_nationality_set" "', argument " "2"" of type '" "char [6+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->nationality,arg2,6+2*sizeof(char));
  else memset(arg1->nationality,0,6+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_nationality_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_nationality_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->nationality);
  {
    size_t size = SWIG_strnlen(result, 6+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_birthDate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[20+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_birthDate_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 20+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_birthDate_set" "', argument " "2"" of type '" "char [20+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->birthDate,arg2,20+2*sizeof(char));
  else memset(arg1->birthDate,0,20+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_birthDate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_birthDate_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->birthDate);
  {
    size_t size = SWIG_strnlen(result, 20+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[8+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_height_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 8+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_height_set" "', argument " "2"" of type '" "char [8+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->height,arg2,8+2*sizeof(char));
  else memset(arg1->height,0,8+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_height_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_height_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->height);
  {
    size_t size = SWIG_strnlen(result, 8+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_numBI_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[18+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_numBI_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 18+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_numBI_set" "', argument " "2"" of type '" "char [18+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->numBI,arg2,18+2*sizeof(char));
  else memset(arg1->numBI,0,18+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_numBI_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_numBI_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->numBI);
  {
    size_t size = SWIG_strnlen(result, 18+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_nameFather_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[120+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_nameFather_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 120+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_nameFather_set" "', argument " "2"" of type '" "char [120+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->nameFather,arg2,120+2*sizeof(char));
  else memset(arg1->nameFather,0,120+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_nameFather_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_nameFather_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->nameFather);
  {
    size_t size = SWIG_strnlen(result, 120+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_firstnameFather_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[120+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_firstnameFather_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 120+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_firstnameFather_set" "', argument " "2"" of type '" "char [120+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->firstnameFather,arg2,120+2*sizeof(char));
  else memset(arg1->firstnameFather,0,120+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_firstnameFather_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_firstnameFather_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->firstnameFather);
  {
    size_t size = SWIG_strnlen(result, 120+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_nameMother_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[120+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_nameMother_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 120+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_nameMother_set" "', argument " "2"" of type '" "char [120+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->nameMother,arg2,120+2*sizeof(char));
  else memset(arg1->nameMother,0,120+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_nameMother_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_nameMother_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->nameMother);
  {
    size_t size = SWIG_strnlen(result, 120+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_firstnameMother_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[120+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_firstnameMother_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 120+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_firstnameMother_set" "', argument " "2"" of type '" "char [120+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->firstnameMother,arg2,120+2*sizeof(char));
  else memset(arg1->firstnameMother,0,120+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_firstnameMother_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_firstnameMother_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->firstnameMother);
  {
    size_t size = SWIG_strnlen(result, 120+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_numNIF_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[18+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_numNIF_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 18+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_numNIF_set" "', argument " "2"" of type '" "char [18+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->numNIF,arg2,18+2*sizeof(char));
  else memset(arg1->numNIF,0,18+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_numNIF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_numNIF_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->numNIF);
  {
    size_t size = SWIG_strnlen(result, 18+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_numSS_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[22+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_numSS_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 22+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_numSS_set" "', argument " "2"" of type '" "char [22+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->numSS,arg2,22+2*sizeof(char));
  else memset(arg1->numSS,0,22+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_numSS_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_numSS_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->numSS);
  {
    size_t size = SWIG_strnlen(result, 22+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_numSNS_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[18+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_numSNS_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 18+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_numSNS_set" "', argument " "2"" of type '" "char [18+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->numSNS,arg2,18+2*sizeof(char));
  else memset(arg1->numSNS,0,18+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_numSNS_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_numSNS_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->numSNS);
  {
    size_t size = SWIG_strnlen(result, 18+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_notes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[120+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_notes_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 120+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_notes_set" "', argument " "2"" of type '" "char [120+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->notes,arg2,120+2*sizeof(char));
  else memset(arg1->notes,0,120+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_notes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_notes_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->notes);
  {
    size_t size = SWIG_strnlen(result, 120+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_mrz1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[30+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_mrz1_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 30+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_mrz1_set" "', argument " "2"" of type '" "char [30+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->mrz1,arg2,30+2*sizeof(char));
  else memset(arg1->mrz1,0,30+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_mrz1_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_mrz1_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->mrz1);
  {
    size_t size = SWIG_strnlen(result, 30+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_mrz2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[30+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_mrz2_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 30+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_mrz2_set" "', argument " "2"" of type '" "char [30+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->mrz2,arg2,30+2*sizeof(char));
  else memset(arg1->mrz2,0,30+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_mrz2_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_mrz2_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->mrz2);
  {
    size_t size = SWIG_strnlen(result, 30+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ID_mrz3_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[30+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_mrz3_set" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 30+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ID_mrz3_set" "', argument " "2"" of type '" "char [30+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->mrz3,arg2,30+2*sizeof(char));
  else memset(arg1->mrz3,0,30+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ID_mrz3_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ID_mrz3_get" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (char *)(char *) ((arg1)->mrz3);
  {
    size_t size = SWIG_strnlen(result, 30+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_ID(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ID *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ID.");
  result = (eIDMW::PTEID_ID *)new eIDMW::PTEID_ID();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ID, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ID(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ID(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ID * arg1 = (eIDMW::PTEID_ID *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_PTEID_ADDR_version_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_version_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  ecode2 = SWIG_AsVal_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ADDR_version_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = (short)(val2);
  if (arg1) (arg1)->version = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_version_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_version_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (short) ((arg1)->version);
  jsresult = SWIG_From_short((short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_addrType_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[2+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_addrType_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 2+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_addrType_set" "', argument " "2"" of type '" "char [2+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->addrType,arg2,2+2*sizeof(char));
  else memset(arg1->addrType,0,2+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_addrType_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_addrType_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->addrType);
  {
    size_t size = SWIG_strnlen(result, 2+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_country_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[4+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_country_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 4+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_country_set" "', argument " "2"" of type '" "char [4+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->country,arg2,4+2*sizeof(char));
  else memset(arg1->country,0,4+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_country_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_country_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->country);
  {
    size_t size = SWIG_strnlen(result, 4+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_district_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[4+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_district_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 4+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_district_set" "', argument " "2"" of type '" "char [4+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->district,arg2,4+2*sizeof(char));
  else memset(arg1->district,0,4+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_district_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_district_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->district);
  {
    size_t size = SWIG_strnlen(result, 4+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_districtDesc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_districtDesc_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_districtDesc_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->districtDesc,arg2,100+2*sizeof(char));
  else memset(arg1->districtDesc,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_districtDesc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_districtDesc_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->districtDesc);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_municipality_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[8+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_municipality_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 8+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_municipality_set" "', argument " "2"" of type '" "char [8+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->municipality,arg2,8+2*sizeof(char));
  else memset(arg1->municipality,0,8+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_municipality_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_municipality_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->municipality);
  {
    size_t size = SWIG_strnlen(result, 8+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_municipalityDesc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_municipalityDesc_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_municipalityDesc_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->municipalityDesc,arg2,100+2*sizeof(char));
  else memset(arg1->municipalityDesc,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_municipalityDesc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_municipalityDesc_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->municipalityDesc);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_freguesia_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[12+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_freguesia_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 12+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_freguesia_set" "', argument " "2"" of type '" "char [12+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->freguesia,arg2,12+2*sizeof(char));
  else memset(arg1->freguesia,0,12+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_freguesia_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_freguesia_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->freguesia);
  {
    size_t size = SWIG_strnlen(result, 12+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_freguesiaDesc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_freguesiaDesc_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_freguesiaDesc_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->freguesiaDesc,arg2,100+2*sizeof(char));
  else memset(arg1->freguesiaDesc,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_freguesiaDesc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_freguesiaDesc_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->freguesiaDesc);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_streettypeAbbr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[20+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_streettypeAbbr_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 20+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_streettypeAbbr_set" "', argument " "2"" of type '" "char [20+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->streettypeAbbr,arg2,20+2*sizeof(char));
  else memset(arg1->streettypeAbbr,0,20+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_streettypeAbbr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_streettypeAbbr_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->streettypeAbbr);
  {
    size_t size = SWIG_strnlen(result, 20+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_streettype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_streettype_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_streettype_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->streettype,arg2,100+2*sizeof(char));
  else memset(arg1->streettype,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_streettype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_streettype_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->streettype);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_street_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[200+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_street_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 200+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_street_set" "', argument " "2"" of type '" "char [200+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->street,arg2,200+2*sizeof(char));
  else memset(arg1->street,0,200+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_street_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_street_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->street);
  {
    size_t size = SWIG_strnlen(result, 200+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_buildingAbbr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[20+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_buildingAbbr_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 20+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_buildingAbbr_set" "', argument " "2"" of type '" "char [20+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->buildingAbbr,arg2,20+2*sizeof(char));
  else memset(arg1->buildingAbbr,0,20+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_buildingAbbr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_buildingAbbr_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->buildingAbbr);
  {
    size_t size = SWIG_strnlen(result, 20+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_building_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_building_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_building_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->building,arg2,100+2*sizeof(char));
  else memset(arg1->building,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_building_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_building_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->building);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_door_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[20+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_door_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 20+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_door_set" "', argument " "2"" of type '" "char [20+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->door,arg2,20+2*sizeof(char));
  else memset(arg1->door,0,20+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_door_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_door_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->door);
  {
    size_t size = SWIG_strnlen(result, 20+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_floor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[40+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_floor_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 40+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_floor_set" "', argument " "2"" of type '" "char [40+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->floor,arg2,40+2*sizeof(char));
  else memset(arg1->floor,0,40+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_floor_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_floor_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->floor);
  {
    size_t size = SWIG_strnlen(result, 40+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_side_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[40+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_side_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 40+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_side_set" "', argument " "2"" of type '" "char [40+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->side,arg2,40+2*sizeof(char));
  else memset(arg1->side,0,40+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_side_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_side_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->side);
  {
    size_t size = SWIG_strnlen(result, 40+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_place_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_place_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_place_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->place,arg2,100+2*sizeof(char));
  else memset(arg1->place,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_place_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_place_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->place);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_locality_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_locality_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_locality_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->locality,arg2,100+2*sizeof(char));
  else memset(arg1->locality,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_locality_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_locality_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->locality);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_cp4_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[8+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_cp4_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 8+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_cp4_set" "', argument " "2"" of type '" "char [8+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->cp4,arg2,8+2*sizeof(char));
  else memset(arg1->cp4,0,8+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_cp4_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_cp4_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->cp4);
  {
    size_t size = SWIG_strnlen(result, 8+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_cp3_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[6+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_cp3_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 6+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_cp3_set" "', argument " "2"" of type '" "char [6+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->cp3,arg2,6+2*sizeof(char));
  else memset(arg1->cp3,0,6+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_cp3_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_cp3_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->cp3);
  {
    size_t size = SWIG_strnlen(result, 6+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_postal_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[50+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_postal_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 50+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_postal_set" "', argument " "2"" of type '" "char [50+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->postal,arg2,50+2*sizeof(char));
  else memset(arg1->postal,0,50+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_postal_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_postal_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->postal);
  {
    size_t size = SWIG_strnlen(result, 50+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_numMor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[12+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_numMor_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 12+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_numMor_set" "', argument " "2"" of type '" "char [12+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->numMor,arg2,12+2*sizeof(char));
  else memset(arg1->numMor,0,12+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_numMor_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_numMor_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->numMor);
  {
    size_t size = SWIG_strnlen(result, 12+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_countryDescF_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_countryDescF_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_countryDescF_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->countryDescF,arg2,100+2*sizeof(char));
  else memset(arg1->countryDescF,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_countryDescF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_countryDescF_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->countryDescF);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_addressF_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[300+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_addressF_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 300+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_addressF_set" "', argument " "2"" of type '" "char [300+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->addressF,arg2,300+2*sizeof(char));
  else memset(arg1->addressF,0,300+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_addressF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_addressF_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->addressF);
  {
    size_t size = SWIG_strnlen(result, 300+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_cityF_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_cityF_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_cityF_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->cityF,arg2,100+2*sizeof(char));
  else memset(arg1->cityF,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_cityF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_cityF_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->cityF);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_regioF_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_regioF_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_regioF_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->regioF,arg2,100+2*sizeof(char));
  else memset(arg1->regioF,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_regioF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_regioF_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->regioF);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_localityF_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_localityF_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_localityF_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->localityF,arg2,100+2*sizeof(char));
  else memset(arg1->localityF,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_localityF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_localityF_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->localityF);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_postalF_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_postalF_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 100+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_postalF_set" "', argument " "2"" of type '" "char [100+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->postalF,arg2,100+2*sizeof(char));
  else memset(arg1->postalF,0,100+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_postalF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_postalF_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->postalF);
  {
    size_t size = SWIG_strnlen(result, 100+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_ADDR_numMorF_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[12+2] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_numMorF_set" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 12+2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ADDR_numMorF_set" "', argument " "2"" of type '" "char [12+2]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->numMorF,arg2,12+2*sizeof(char));
  else memset(arg1->numMorF,0,12+2*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_ADDR_numMorF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ADDR_numMorF_get" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (char *)(char *) ((arg1)->numMorF);
  {
    size_t size = SWIG_strnlen(result, 12+2);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_ADDR(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_ADDR *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_ADDR.");
  result = (eIDMW::PTEID_ADDR *)new eIDMW::PTEID_ADDR();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_ADDR, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_ADDR(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_ADDR(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_ADDR * arg1 = (eIDMW::PTEID_ADDR *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_PTEID_PIC_version_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_version_set" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  ecode2 = SWIG_AsVal_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_PIC_version_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = (short)(val2);
  if (arg1) (arg1)->version = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_PIC_version_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_version_get" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  result = (short) ((arg1)->version);
  jsresult = SWIG_From_short((short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_PIC_cbeff_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  unsigned char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_cbeff_set" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_PIC_cbeff_set" "', argument " "2"" of type '" "unsigned char [34]""'"); 
  } 
  arg2 = (unsigned char *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)34; ++ii) *(unsigned char *)&arg1->cbeff[ii] = (unsigned char)arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""cbeff""' of type '""unsigned char [34]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_PIC_cbeff_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_cbeff_get" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  result = (unsigned char *)(unsigned char *) ((arg1)->cbeff);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_PIC_facialrechdr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  unsigned char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_facialrechdr_set" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_PIC_facialrechdr_set" "', argument " "2"" of type '" "unsigned char [14]""'"); 
  } 
  arg2 = (unsigned char *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)14; ++ii) *(unsigned char *)&arg1->facialrechdr[ii] = (unsigned char)arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""facialrechdr""' of type '""unsigned char [14]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_PIC_facialrechdr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_facialrechdr_get" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  result = (unsigned char *)(unsigned char *) ((arg1)->facialrechdr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_PIC_facialinfo_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  unsigned char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_facialinfo_set" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_PIC_facialinfo_set" "', argument " "2"" of type '" "unsigned char [20]""'"); 
  } 
  arg2 = (unsigned char *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)20; ++ii) *(unsigned char *)&arg1->facialinfo[ii] = (unsigned char)arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""facialinfo""' of type '""unsigned char [20]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_PIC_facialinfo_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_facialinfo_get" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  result = (unsigned char *)(unsigned char *) ((arg1)->facialinfo);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_PIC_imageinfo_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  unsigned char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_imageinfo_set" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_PIC_imageinfo_set" "', argument " "2"" of type '" "unsigned char [12]""'"); 
  } 
  arg2 = (unsigned char *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)12; ++ii) *(unsigned char *)&arg1->imageinfo[ii] = (unsigned char)arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""imageinfo""' of type '""unsigned char [12]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_PIC_imageinfo_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_imageinfo_get" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  result = (unsigned char *)(unsigned char *) ((arg1)->imageinfo);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_PIC_picture_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  unsigned char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_picture_set" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_PIC_picture_set" "', argument " "2"" of type '" "unsigned char [(14128+111)]""'"); 
  } 
  arg2 = (unsigned char *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(14128+111); ++ii) *(unsigned char *)&arg1->picture[ii] = (unsigned char)arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""picture""' of type '""unsigned char [(14128+111)]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_PIC_picture_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_picture_get" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  result = (unsigned char *)(unsigned char *) ((arg1)->picture);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_PIC_piclength_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_piclength_set" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_PIC_piclength_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->piclength = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_PIC_piclength_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_PIC_piclength_get" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  result = (unsigned long) ((arg1)->piclength);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_PIC(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_PIC *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_PIC.");
  result = (eIDMW::PTEID_PIC *)new eIDMW::PTEID_PIC();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_PIC, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_PIC(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_PIC(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_PIC * arg1 = (eIDMW::PTEID_PIC *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_PTEID_Certif_certif_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_Certif *arg1 = (eIDMW::PTEID_Certif *) 0 ;
  unsigned char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certif_certif_set" "', argument " "1"" of type '" "eIDMW::PTEID_Certif *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certif *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Certif_certif_set" "', argument " "2"" of type '" "unsigned char [2500]""'"); 
  } 
  arg2 = (unsigned char *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2500; ++ii) *(unsigned char *)&arg1->certif[ii] = (unsigned char)arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""certif""' of type '""unsigned char [2500]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_Certif_certif_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certif *arg1 = (eIDMW::PTEID_Certif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certif_certif_get" "', argument " "1"" of type '" "eIDMW::PTEID_Certif *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certif *)(argp1);
  result = (unsigned char *)(unsigned char *) ((arg1)->certif);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_Certif_certifLength_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_Certif *arg1 = (eIDMW::PTEID_Certif *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certif_certifLength_set" "', argument " "1"" of type '" "eIDMW::PTEID_Certif *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certif *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certif_certifLength_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  if (arg1) (arg1)->certifLength = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_Certif_certifLength_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certif *arg1 = (eIDMW::PTEID_Certif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certif_certifLength_get" "', argument " "1"" of type '" "eIDMW::PTEID_Certif *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certif *)(argp1);
  result = (long) ((arg1)->certifLength);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_Certif_certifLabel_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_Certif *arg1 = (eIDMW::PTEID_Certif *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[256] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certif_certifLabel_set" "', argument " "1"" of type '" "eIDMW::PTEID_Certif *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certif *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 256);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Certif_certifLabel_set" "', argument " "2"" of type '" "char [256]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->certifLabel,arg2,256*sizeof(char));
  else memset(arg1->certifLabel,0,256*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_Certif_certifLabel_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certif *arg1 = (eIDMW::PTEID_Certif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certif_certifLabel_get" "', argument " "1"" of type '" "eIDMW::PTEID_Certif *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certif *)(argp1);
  result = (char *)(char *) ((arg1)->certifLabel);
  {
    size_t size = SWIG_strnlen(result, 256);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_Certif(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_Certif *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_Certif.");
  result = (eIDMW::PTEID_Certif *)new eIDMW::PTEID_Certif();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_Certif, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Certif(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Certif(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Certif * arg1 = (eIDMW::PTEID_Certif *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_PTEID_Certifs_certificates_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_Certifs *arg1 = (eIDMW::PTEID_Certifs *) 0 ;
  eIDMW::PTEID_Certif *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certifs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certifs_certificates_set" "', argument " "1"" of type '" "eIDMW::PTEID_Certifs *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certifs *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEID_Certif, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Certifs_certificates_set" "', argument " "2"" of type '" "eIDMW::PTEID_Certif [10]""'"); 
  } 
  arg2 = (eIDMW::PTEID_Certif *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)10; ++ii) *(eIDMW::PTEID_Certif *)&arg1->certificates[ii] = (eIDMW::PTEID_Certif)arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""certificates""' of type '""eIDMW::PTEID_Certif [10]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_Certifs_certificates_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certifs *arg1 = (eIDMW::PTEID_Certifs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEID_Certif *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certifs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certifs_certificates_get" "', argument " "1"" of type '" "eIDMW::PTEID_Certifs *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certifs *)(argp1);
  result = (eIDMW::PTEID_Certif *)(eIDMW::PTEID_Certif *) ((arg1)->certificates);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEID_Certif, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_Certifs_certificatesLength_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_Certifs *arg1 = (eIDMW::PTEID_Certifs *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certifs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certifs_certificatesLength_set" "', argument " "1"" of type '" "eIDMW::PTEID_Certifs *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certifs *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_Certifs_certificatesLength_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  if (arg1) (arg1)->certificatesLength = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_Certifs_certificatesLength_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certifs *arg1 = (eIDMW::PTEID_Certifs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_Certifs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Certifs_certificatesLength_get" "', argument " "1"" of type '" "eIDMW::PTEID_Certifs *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certifs *)(argp1);
  result = (long) ((arg1)->certificatesLength);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_Certifs(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_Certifs *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_Certifs.");
  result = (eIDMW::PTEID_Certifs *)new eIDMW::PTEID_Certifs();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_Certifs, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_Certifs(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_Certifs(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_Certifs * arg1 = (eIDMW::PTEID_Certifs *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_PTEIDPin_pinType_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_pinType_set" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEIDPin_pinType_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  if (arg1) (arg1)->pinType = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPin_pinType_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_pinType_get" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  result = (long) ((arg1)->pinType);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEIDPin_id_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_id_set" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEIDPin_id_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = (unsigned char)(val2);
  if (arg1) (arg1)->id = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPin_id_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_id_get" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  result = (unsigned char) ((arg1)->id);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEIDPin_usageCode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_usageCode_set" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEIDPin_usageCode_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  if (arg1) (arg1)->usageCode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPin_usageCode_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_usageCode_get" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  result = (long) ((arg1)->usageCode);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEIDPin_triesLeft_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_triesLeft_set" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEIDPin_triesLeft_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  if (arg1) (arg1)->triesLeft = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPin_triesLeft_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_triesLeft_get" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  result = (long) ((arg1)->triesLeft);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEIDPin_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_flags_set" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEIDPin_flags_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPin_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_flags_get" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  result = (long) ((arg1)->flags);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEIDPin_label_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[256] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_label_set" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 256);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEIDPin_label_set" "', argument " "2"" of type '" "char [256]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->label,arg2,256*sizeof(char));
  else memset(arg1->label,0,256*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPin_label_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_label_get" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  result = (char *)(char *) ((arg1)->label);
  {
    size_t size = SWIG_strnlen(result, 256);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEIDPin_shortUsage_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_shortUsage_set" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEIDPin_shortUsage_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->shortUsage) delete[] arg1->shortUsage;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->shortUsage = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->shortUsage = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPin_shortUsage_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_shortUsage_get" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  result = (char *) ((arg1)->shortUsage);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEIDPin_longUsage_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_longUsage_set" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEIDPin_longUsage_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->longUsage) delete[] arg1->longUsage;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->longUsage = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->longUsage = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPin_longUsage_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPin *arg1 = (eIDMW::PTEIDPin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPin_longUsage_get" "', argument " "1"" of type '" "eIDMW::PTEIDPin *""'"); 
  }
  arg1 = (eIDMW::PTEIDPin *)(argp1);
  result = (char *) ((arg1)->longUsage);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEIDPin(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEIDPin *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEIDPin.");
  result = (eIDMW::PTEIDPin *)new eIDMW::PTEIDPin();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEIDPin, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEIDPin(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEIDPin(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEIDPin * arg1 = (eIDMW::PTEIDPin *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_PTEIDPins_pins_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPins *arg1 = (eIDMW::PTEIDPins *) 0 ;
  eIDMW::PTEIDPin *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPins_pins_set" "', argument " "1"" of type '" "eIDMW::PTEIDPins *""'"); 
  }
  arg1 = (eIDMW::PTEIDPins *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEIDPins_pins_set" "', argument " "2"" of type '" "eIDMW::PTEIDPin [8]""'"); 
  } 
  arg2 = (eIDMW::PTEIDPin *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(eIDMW::PTEIDPin *)&arg1->pins[ii] = (eIDMW::PTEIDPin)arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""pins""' of type '""eIDMW::PTEIDPin [8]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPins_pins_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPins *arg1 = (eIDMW::PTEIDPins *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eIDMW::PTEIDPin *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPins_pins_get" "', argument " "1"" of type '" "eIDMW::PTEIDPins *""'"); 
  }
  arg1 = (eIDMW::PTEIDPins *)(argp1);
  result = (eIDMW::PTEIDPin *)(eIDMW::PTEIDPin *) ((arg1)->pins);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eIDMW__PTEIDPin, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEIDPins_pinsLength_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEIDPins *arg1 = (eIDMW::PTEIDPins *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPins_pinsLength_set" "', argument " "1"" of type '" "eIDMW::PTEIDPins *""'"); 
  }
  arg1 = (eIDMW::PTEIDPins *)(argp1);
  ecode2 = SWIG_AsVal_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEIDPins_pinsLength_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  if (arg1) (arg1)->pinsLength = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEIDPins_pinsLength_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPins *arg1 = (eIDMW::PTEIDPins *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEIDPins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEIDPins_pinsLength_get" "', argument " "1"" of type '" "eIDMW::PTEIDPins *""'"); 
  }
  arg1 = (eIDMW::PTEIDPins *)(argp1);
  result = (long) ((arg1)->pinsLength);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEIDPins(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEIDPins *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEIDPins.");
  result = (eIDMW::PTEIDPins *)new eIDMW::PTEIDPins();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEIDPins, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEIDPins(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEIDPins(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEIDPins * arg1 = (eIDMW::PTEIDPins *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_PTEID_TokenInfo_label_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_TokenInfo *arg1 = (eIDMW::PTEID_TokenInfo *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[256] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_TokenInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_TokenInfo_label_set" "', argument " "1"" of type '" "eIDMW::PTEID_TokenInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_TokenInfo *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 256);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_TokenInfo_label_set" "', argument " "2"" of type '" "char [256]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->label,arg2,256*sizeof(char));
  else memset(arg1->label,0,256*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_TokenInfo_label_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_TokenInfo *arg1 = (eIDMW::PTEID_TokenInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_TokenInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_TokenInfo_label_get" "', argument " "1"" of type '" "eIDMW::PTEID_TokenInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_TokenInfo *)(argp1);
  result = (char *)(char *) ((arg1)->label);
  {
    size_t size = SWIG_strnlen(result, 256);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_TokenInfo_serial_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_TokenInfo *arg1 = (eIDMW::PTEID_TokenInfo *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_TokenInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_TokenInfo_serial_set" "', argument " "1"" of type '" "eIDMW::PTEID_TokenInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_TokenInfo *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_TokenInfo_serial_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->serial,arg2,64*sizeof(char));
  else memset(arg1->serial,0,64*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_TokenInfo_serial_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_TokenInfo *arg1 = (eIDMW::PTEID_TokenInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_TokenInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_TokenInfo_serial_get" "', argument " "1"" of type '" "eIDMW::PTEID_TokenInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_TokenInfo *)(argp1);
  result = (char *)(char *) ((arg1)->serial);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_TokenInfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_TokenInfo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_TokenInfo.");
  result = (eIDMW::PTEID_TokenInfo *)new eIDMW::PTEID_TokenInfo();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_TokenInfo, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_TokenInfo(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_TokenInfo(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_TokenInfo * arg1 = (eIDMW::PTEID_TokenInfo *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_PTEID_RSAPublicKey_modulus_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RSAPublicKey_modulus_set" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RSAPublicKey_modulus_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  if (arg1) (arg1)->modulus = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RSAPublicKey_modulus_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RSAPublicKey_modulus_get" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  result = (unsigned char *) ((arg1)->modulus);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RSAPublicKey_modulusLength_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RSAPublicKey_modulusLength_set" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_RSAPublicKey_modulusLength_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->modulusLength = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RSAPublicKey_modulusLength_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RSAPublicKey_modulusLength_get" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  result = (unsigned long) ((arg1)->modulusLength);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RSAPublicKey_exponent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RSAPublicKey_exponent_set" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_RSAPublicKey_exponent_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  if (arg1) (arg1)->exponent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RSAPublicKey_exponent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RSAPublicKey_exponent_get" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  result = (unsigned char *) ((arg1)->exponent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_PTEID_RSAPublicKey_exponentLength_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RSAPublicKey_exponentLength_set" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_RSAPublicKey_exponentLength_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = (unsigned char)(val2);
  if (arg1) (arg1)->exponentLength = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_PTEID_RSAPublicKey_exponentLength_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_RSAPublicKey_exponentLength_get" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  result = (unsigned char) ((arg1)->exponentLength);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_PTEID_RSAPublicKey(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::PTEID_RSAPublicKey *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PTEID_RSAPublicKey.");
  result = (eIDMW::PTEID_RSAPublicKey *)new eIDMW::PTEID_RSAPublicKey();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_PTEID_RSAPublicKey(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_PTEID_RSAPublicKey(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::PTEID_RSAPublicKey * arg1 = (eIDMW::PTEID_RSAPublicKey *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


void _wrap_tProxyInfo_csProxy_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::tProxyInfo *arg1 = (eIDMW::tProxyInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tProxyInfo_csProxy_set" "', argument " "1"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg1 = (eIDMW::tProxyInfo *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tProxyInfo_csProxy_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->csProxy = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->csProxy = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_tProxyInfo_csProxy_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::tProxyInfo *arg1 = (eIDMW::tProxyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tProxyInfo_csProxy_get" "', argument " "1"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg1 = (eIDMW::tProxyInfo *)(argp1);
  result = (char *) ((arg1)->csProxy);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_tProxyInfo_uiPort_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::tProxyInfo *arg1 = (eIDMW::tProxyInfo *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tProxyInfo_uiPort_set" "', argument " "1"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg1 = (eIDMW::tProxyInfo *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tProxyInfo_uiPort_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->uiPort = arg2;
  
  
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_tProxyInfo_uiPort_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::tProxyInfo *arg1 = (eIDMW::tProxyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tProxyInfo_uiPort_get" "', argument " "1"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg1 = (eIDMW::tProxyInfo *)(argp1);
  result = (unsigned int) ((arg1)->uiPort);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_tProxyInfo_csUserName_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::tProxyInfo *arg1 = (eIDMW::tProxyInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tProxyInfo_csUserName_set" "', argument " "1"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg1 = (eIDMW::tProxyInfo *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tProxyInfo_csUserName_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->csUserName = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->csUserName = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_tProxyInfo_csUserName_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::tProxyInfo *arg1 = (eIDMW::tProxyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tProxyInfo_csUserName_get" "', argument " "1"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg1 = (eIDMW::tProxyInfo *)(argp1);
  result = (char *) ((arg1)->csUserName);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


void _wrap_tProxyInfo_csPassword_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info) {
  v8::HandleScope scope;
  eIDMW::tProxyInfo *arg1 = (eIDMW::tProxyInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tProxyInfo_csPassword_set" "', argument " "1"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg1 = (eIDMW::tProxyInfo *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tProxyInfo_csPassword_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->csPassword = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->csPassword = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


SwigV8ReturnValue _wrap_tProxyInfo_csPassword_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::tProxyInfo *arg1 = (eIDMW::tProxyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tProxyInfo_csPassword_get" "', argument " "1"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg1 = (eIDMW::tProxyInfo *)(argp1);
  result = (char *) ((arg1)->csPassword);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_new_tProxyInfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  eIDMW::tProxyInfo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_tProxyInfo.");
  result = (eIDMW::tProxyInfo *)new eIDMW::tProxyInfo();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_eIDMW__tProxyInfo, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


#if (SWIG_V8_VERSION < 0x031900)
void _wrap_delete_tProxyInfo(v8::Persistent< v8::Value > object, void *parameter)
{
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#else
  void _wrap_delete_tProxyInfo(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy)
  {
#endif
    if(proxy->swigCMemOwn && proxy->swigCObject) {
      eIDMW::tProxyInfo * arg1 = (eIDMW::tProxyInfo *)proxy->swigCObject;
      delete arg1;
    }
    delete proxy;
    
#if (SWIG_V8_VERSION < 0x031900)
    object.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    object->Dispose(isolate);
#else
    object->Dispose();
#endif
  }


SwigV8ReturnValue _wrap_eIDMW_CAP_INITIALISING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::CAP_INITIALISING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_CAP_CONNECTING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::CAP_CONNECTING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_CAP_READING_INFO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::CAP_READING_INFO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_CAP_SENDING_INFO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::CAP_SENDING_INFO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_CAP_WRITE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::CAP_WRITE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_CAP_FINISH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::CAP_FINISH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_CAP_FINISHED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::CAP_FINISHED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_eIDMW_CAP_CANCELLED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(eIDMW::CAP_CANCELLED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(v8::Undefined(), info);
}


SwigV8ReturnValue _wrap_PTEID_Init(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Init.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Init" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = (char *)(buf1);
  result = (long)eIDMW::PTEID_Init(arg1);
  jsresult = SWIG_From_long((long)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Exit(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Exit.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_Exit" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = (unsigned long)(val1);
  result = (long)eIDMW::PTEID_Exit(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetCardType(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::tCompCardType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetCardType.");
  
  result = (eIDMW::tCompCardType)eIDMW::PTEID_GetCardType();
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetID(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ID *arg1 = (eIDMW::PTEID_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetID.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEID_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_GetID" "', argument " "1"" of type '" "eIDMW::PTEID_ID *""'"); 
  }
  arg1 = (eIDMW::PTEID_ID *)(argp1);
  result = (long)eIDMW::PTEID_GetID(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetAddr(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_ADDR *arg1 = (eIDMW::PTEID_ADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetAddr.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEID_ADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_GetAddr" "', argument " "1"" of type '" "eIDMW::PTEID_ADDR *""'"); 
  }
  arg1 = (eIDMW::PTEID_ADDR *)(argp1);
  result = (long)eIDMW::PTEID_GetAddr(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetPic(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_PIC *arg1 = (eIDMW::PTEID_PIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetPic.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEID_PIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_GetPic" "', argument " "1"" of type '" "eIDMW::PTEID_PIC *""'"); 
  }
  arg1 = (eIDMW::PTEID_PIC *)(argp1);
  result = (long)eIDMW::PTEID_GetPic(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetCertificates(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certifs *arg1 = (eIDMW::PTEID_Certifs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetCertificates.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEID_Certifs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_GetCertificates" "', argument " "1"" of type '" "eIDMW::PTEID_Certifs *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certifs *)(argp1);
  result = (long)eIDMW::PTEID_GetCertificates(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_VerifyPIN(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char arg1 ;
  char *arg2 = (char *) 0 ;
  long *arg3 = (long *) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  long result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_VerifyPIN.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_char(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_VerifyPIN" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = (unsigned char)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_VerifyPIN" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_VerifyPIN" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = (long *)(argp3);
  result = (long)eIDMW::PTEID_VerifyPIN(arg1,arg2,arg3);
  jsresult = SWIG_From_long((long)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_VerifyPIN_No_Alert(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char arg1 ;
  char *arg2 = (char *) 0 ;
  long *arg3 = (long *) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  long result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_VerifyPIN_No_Alert.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_char(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_VerifyPIN_No_Alert" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = (unsigned char)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_VerifyPIN_No_Alert" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_VerifyPIN_No_Alert" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = (long *)(argp3);
  result = (long)eIDMW::PTEID_VerifyPIN_No_Alert(arg1,arg2,arg3);
  jsresult = SWIG_From_long((long)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ChangePIN(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long *arg4 = (long *) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  long result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ChangePIN.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_char(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_ChangePIN" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = (unsigned char)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ChangePIN" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_ChangePIN" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_ChangePIN" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = (long *)(argp4);
  result = (long)eIDMW::PTEID_ChangePIN(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_long((long)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetPINs(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEIDPins *arg1 = (eIDMW::PTEIDPins *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetPINs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEIDPins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_GetPINs" "', argument " "1"" of type '" "eIDMW::PTEIDPins *""'"); 
  }
  arg1 = (eIDMW::PTEIDPins *)(argp1);
  result = (long)eIDMW::PTEID_GetPINs(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetTokenInfo(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_TokenInfo *arg1 = (eIDMW::PTEID_TokenInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetTokenInfo.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEID_TokenInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_GetTokenInfo" "', argument " "1"" of type '" "eIDMW::PTEID_TokenInfo *""'"); 
  }
  arg1 = (eIDMW::PTEID_TokenInfo *)(argp1);
  result = (long)eIDMW::PTEID_GetTokenInfo(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReadSOD(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReadSOD.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReadSOD" "', argument " "1"" of type '" "unsigned char *""'"); 
  }
  arg1 = (unsigned char *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_ReadSOD" "', argument " "2"" of type '" "unsigned long *""'"); 
  }
  arg2 = (unsigned long *)(argp2);
  result = (long)eIDMW::PTEID_ReadSOD(arg1,arg2);
  jsresult = SWIG_From_long((long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_UnblockPIN(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long *arg4 = (long *) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  long result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_UnblockPIN.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_char(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_UnblockPIN" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = (unsigned char)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_UnblockPIN" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_UnblockPIN" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_UnblockPIN" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = (long *)(argp4);
  result = (long)eIDMW::PTEID_UnblockPIN(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_long((long)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_UnblockPIN_Ext(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long *arg4 = (long *) 0 ;
  unsigned long arg5 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  long result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_UnblockPIN_Ext.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_char(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_UnblockPIN_Ext" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = (unsigned char)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_UnblockPIN_Ext" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_UnblockPIN_Ext" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_UnblockPIN_Ext" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = (long *)(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PTEID_UnblockPIN_Ext" "', argument " "5"" of type '" "unsigned long""'");
  } 
  arg5 = (unsigned long)(val5);
  result = (long)eIDMW::PTEID_UnblockPIN_Ext(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_long((long)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SelectADF(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char *arg1 = (unsigned char *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SelectADF.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SelectADF" "', argument " "1"" of type '" "unsigned char *""'"); 
  }
  arg1 = (unsigned char *)(argp1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_SelectADF" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  result = (long)eIDMW::PTEID_SelectADF(arg1,arg2);
  jsresult = SWIG_From_long((long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_ReadFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned long *arg4 = (unsigned long *) 0 ;
  unsigned char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  long result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_ReadFile.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_ReadFile" "', argument " "1"" of type '" "unsigned char *""'"); 
  }
  arg1 = (unsigned char *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_ReadFile" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_ReadFile" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = (unsigned char *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_ReadFile" "', argument " "4"" of type '" "unsigned long *""'"); 
  }
  arg4 = (unsigned long *)(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PTEID_ReadFile" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = (unsigned char)(val5);
  result = (long)eIDMW::PTEID_ReadFile(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_long((long)(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_WriteFile(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned long arg4 ;
  unsigned char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  long result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_WriteFile.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_WriteFile" "', argument " "1"" of type '" "unsigned char *""'"); 
  }
  arg1 = (unsigned char *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_WriteFile" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_WriteFile" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = (unsigned char *)(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PTEID_WriteFile" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = (unsigned long)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PTEID_WriteFile" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = (unsigned char)(val5);
  result = (long)eIDMW::PTEID_WriteFile(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_long((long)(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_IsActivated(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned long *arg1 = (unsigned long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_IsActivated.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_IsActivated" "', argument " "1"" of type '" "unsigned long *""'"); 
  }
  arg1 = (unsigned long *)(argp1);
  result = (long)eIDMW::PTEID_IsActivated(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_Activate(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  long result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_Activate.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_Activate" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_Activate" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_Activate" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = (long)eIDMW::PTEID_Activate(arg1,arg2,arg3);
  jsresult = SWIG_From_long((long)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SetSODChecking(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SetSODChecking.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTEID_SetSODChecking" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (long)eIDMW::PTEID_SetSODChecking(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SetSODCAs(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_Certifs *arg1 = (eIDMW::PTEID_Certifs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SetSODCAs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEID_Certifs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SetSODCAs" "', argument " "1"" of type '" "eIDMW::PTEID_Certifs *""'"); 
  }
  arg1 = (eIDMW::PTEID_Certifs *)(argp1);
  result = (long)eIDMW::PTEID_SetSODCAs(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetCardAuthenticationKey(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetCardAuthenticationKey.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_GetCardAuthenticationKey" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  result = (long)eIDMW::PTEID_GetCardAuthenticationKey(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_GetCVCRoot(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::PTEID_RSAPublicKey *arg1 = (eIDMW::PTEID_RSAPublicKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_GetCVCRoot.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_GetCVCRoot" "', argument " "1"" of type '" "eIDMW::PTEID_RSAPublicKey *""'"); 
  }
  arg1 = (eIDMW::PTEID_RSAPublicKey *)(argp1);
  result = (long)eIDMW::PTEID_GetCVCRoot(arg1);
  jsresult = SWIG_From_long((long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_SendAPDU(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned long arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned long *arg4 = (unsigned long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  long result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_SendAPDU.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_SendAPDU" "', argument " "1"" of type '" "unsigned char const *""'"); 
  }
  arg1 = (unsigned char *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PTEID_SendAPDU" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PTEID_SendAPDU" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = (unsigned char *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_SendAPDU" "', argument " "4"" of type '" "unsigned long *""'"); 
  }
  arg4 = (unsigned long *)(argp4);
  result = (long)eIDMW::PTEID_SendAPDU((unsigned char const *)arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_long((long)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CAP_ChangeCapPin(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned long arg3 ;
  eIDMW::tProxyInfo *arg4 = (eIDMW::tProxyInfo *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  long *arg7 = (long *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  long result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CAP_ChangeCapPin.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTEID_CAP_ChangeCapPin" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PTEID_CAP_ChangeCapPin" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PTEID_CAP_ChangeCapPin" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_eIDMW__tProxyInfo, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PTEID_CAP_ChangeCapPin" "', argument " "4"" of type '" "eIDMW::tProxyInfo *""'"); 
  }
  arg4 = (eIDMW::tProxyInfo *)(argp4);
  res5 = SWIG_AsCharPtrAndSize(args[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PTEID_CAP_ChangeCapPin" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  res6 = SWIG_AsCharPtrAndSize(args[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PTEID_CAP_ChangeCapPin" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = (char *)(buf6);
  res7 = SWIG_ConvertPtr(args[6], &argp7,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PTEID_CAP_ChangeCapPin" "', argument " "7"" of type '" "long *""'"); 
  }
  arg7 = (long *)(argp7);
  result = (long)eIDMW::PTEID_CAP_ChangeCapPin((char const *)arg1,(unsigned char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,arg7);
  jsresult = SWIG_From_long((long)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CAP_GetCapPinChangeProgress(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  eIDMW::tCapPinChangeState result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CAP_GetCapPinChangeProgress.");
  
  result = (eIDMW::tCapPinChangeState)eIDMW::PTEID_CAP_GetCapPinChangeProgress();
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CAP_SetCapPinChangeCallback(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  void (*arg1)(eIDMW::tCapPinChangeState) = (void (*)(eIDMW::tCapPinChangeState)) 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CAP_SetCapPinChangeCallback.");
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_enum_eIDMW__tCapPinChangeState__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "PTEID_CAP_SetCapPinChangeCallback" "', argument " "1"" of type '" "void (*)(eIDMW::tCapPinChangeState)""'"); 
    }
  }
  eIDMW::PTEID_CAP_SetCapPinChangeCallback(arg1);
  jsresult = v8::Undefined();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


SwigV8ReturnValue _wrap_PTEID_CAP_CancelCapPinChange(const SwigV8Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PTEID_CAP_CancelCapPinChange.");
  
  eIDMW::PTEID_CAP_CancelCapPinChange();
  jsresult = v8::Undefined();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_eIDMW__PTEID_EIDCardTo_p_eIDMW__PTEID_SmartCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_SmartCard *)  ((eIDMW::PTEID_EIDCard *) x));
}
static void *_p_eIDMW__PTEID_CardVersionInfoTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *)  ((eIDMW::PTEID_CardVersionInfo *) x));
}
static void *_p_eIDMW__PTEID_PinsTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *) (eIDMW::PTEID_Crypto *) ((eIDMW::PTEID_Pins *) x));
}
static void *_p_eIDMW__PTEID_CertificateTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *) (eIDMW::PTEID_Crypto *) ((eIDMW::PTEID_Certificate *) x));
}
static void *_p_eIDMW__PTEID_CertificatesTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *) (eIDMW::PTEID_Crypto *) ((eIDMW::PTEID_Certificates *) x));
}
static void *_p_eIDMW__PTEID_CryptoTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *)  ((eIDMW::PTEID_Crypto *) x));
}
static void *_p_eIDMW__PTEID_SodTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *) (eIDMW::PTEID_Biometric *) ((eIDMW::PTEID_Sod *) x));
}
static void *_p_eIDMW__PTEID_AddressTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *)  ((eIDMW::PTEID_Address *) x));
}
static void *_p_eIDMW__PTEID_BiometricTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *)  ((eIDMW::PTEID_Biometric *) x));
}
static void *_p_eIDMW__PTEID_CCXML_DocTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *)  ((eIDMW::PTEID_CCXML_Doc *) x));
}
static void *_p_eIDMW__PTEID_PinTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *) (eIDMW::PTEID_Crypto *) ((eIDMW::PTEID_Pin *) x));
}
static void *_p_eIDMW__PTEID_EIdTo_p_eIDMW__PTEID_XMLDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_XMLDoc *)  ((eIDMW::PTEID_EId *) x));
}
static void *_p_eIDMW__PTEID_SodTo_p_eIDMW__PTEID_Biometric(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Biometric *)  ((eIDMW::PTEID_Sod *) x));
}
static void *_p_eIDMW__PTEID_ExBadUsageTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExBadUsage *) x));
}
static void *_p_eIDMW__PTEID_ExCardTypeUnknownTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExCardTypeUnknown *) x));
}
static void *_p_eIDMW__PTEID_ExFileTypeUnknownTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExFileTypeUnknown *) x));
}
static void *_p_eIDMW__PTEID_ExDocTypeUnknownTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExDocTypeUnknown *) x));
}
static void *_p_eIDMW__PTEID_ExUnknownTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExUnknown *) x));
}
static void *_p_eIDMW__PTEID_ExCertNoIssuerTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExCertNoIssuer *) x));
}
static void *_p_eIDMW__PTEID_ExUserMustAnswerTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExUserMustAnswer *) x));
}
static void *_p_eIDMW__PTEID_ExSODTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExSOD *) x));
}
static void *_p_eIDMW__PTEID_ExCertNoRootTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExCertNoRoot *) x));
}
static void *_p_eIDMW__PTEID_ExReleaseNeededTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExReleaseNeeded *) x));
}
static void *_p_eIDMW__PTEID_ExNoCardPresentTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExNoCardPresent *) x));
}
static void *_p_eIDMW__PTEID_ExNoReaderTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExNoReader *) x));
}
static void *_p_eIDMW__PTEID_ExCardBadTypeTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExCardBadType *) x));
}
static void *_p_eIDMW__PTEID_ExCardChangedTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExCardChanged *) x));
}
static void *_p_eIDMW__PTEID_ExReaderSetChangedTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExReaderSetChanged *) x));
}
static void *_p_eIDMW__PTEID_ExCmdNotSupportedTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExCmdNotSupported *) x));
}
static void *_p_eIDMW__PTEID_ExParamRangeTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExParamRange *) x));
}
static void *_p_eIDMW__PTEID_ExNotAllowByUserTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExNotAllowByUser *) x));
}
static void *_p_eIDMW__PTEID_ExBadTransactionTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExBadTransaction *) x));
}
static void *_p_eIDMW__PTEID_ExCmdNotAllowedTo_p_eIDMW__PTEID_Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Exception *)  ((eIDMW::PTEID_ExCmdNotAllowed *) x));
}
static void *_p_eIDMW__PTEID_MemoryCardTo_p_eIDMW__PTEID_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Card *)  ((eIDMW::PTEID_MemoryCard *) x));
}
static void *_p_eIDMW__PTEID_SmartCardTo_p_eIDMW__PTEID_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Card *)  ((eIDMW::PTEID_SmartCard *) x));
}
static void *_p_eIDMW__PTEID_EIDCardTo_p_eIDMW__PTEID_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Card *) (eIDMW::PTEID_SmartCard *) ((eIDMW::PTEID_EIDCard *) x));
}
static void *_p_eIDMW__PTEID_PhotoTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_Photo *) x));
}
static void *_p_eIDMW__PTEID_XMLDocTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_XMLDoc *) x));
}
static void *_p_eIDMW__PTEID_SmartCardTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_Card *) ((eIDMW::PTEID_SmartCard *) x));
}
static void *_p_eIDMW__PTEID_PinTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *)(eIDMW::PTEID_Crypto *) ((eIDMW::PTEID_Pin *) x));
}
static void *_p_eIDMW__PTEID_CertificateTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *)(eIDMW::PTEID_Crypto *) ((eIDMW::PTEID_Certificate *) x));
}
static void *_p_eIDMW__PTEID_CCXML_DocTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *) ((eIDMW::PTEID_CCXML_Doc *) x));
}
static void *_p_eIDMW__PTEID_ReaderContextTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_ReaderContext *) x));
}
static void *_p_eIDMW__PTEID_BiometricTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *) ((eIDMW::PTEID_Biometric *) x));
}
static void *_p_eIDMW__PTEID_PublicKeyTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_PublicKey *) x));
}
static void *_p_eIDMW__PTEID_CardVersionInfoTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *) ((eIDMW::PTEID_CardVersionInfo *) x));
}
static void *_p_eIDMW__PTEID_ReaderSetTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_ReaderSet *) x));
}
static void *_p_eIDMW__PTEID_CardTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_Card *) x));
}
static void *_p_eIDMW__PTEID_ByteArrayTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_ByteArray *) x));
}
static void *_p_eIDMW__PTEID_SodTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *)(eIDMW::PTEID_Biometric *) ((eIDMW::PTEID_Sod *) x));
}
static void *_p_eIDMW__PTEID_XmlUserRequestedInfoTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_XmlUserRequestedInfo *) x));
}
static void *_p_eIDMW__PTEID_PinsTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *)(eIDMW::PTEID_Crypto *) ((eIDMW::PTEID_Pins *) x));
}
static void *_p_eIDMW__PTEID_CertificatesTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *)(eIDMW::PTEID_Crypto *) ((eIDMW::PTEID_Certificates *) x));
}
static void *_p_eIDMW__PTEID_ConfigTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *)  ((eIDMW::PTEID_Config *) x));
}
static void *_p_eIDMW__PTEID_EIDCardTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_Card *)(eIDMW::PTEID_SmartCard *) ((eIDMW::PTEID_EIDCard *) x));
}
static void *_p_eIDMW__PTEID_EIdTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *) ((eIDMW::PTEID_EId *) x));
}
static void *_p_eIDMW__PTEID_CryptoTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *) ((eIDMW::PTEID_Crypto *) x));
}
static void *_p_eIDMW__PTEID_MemoryCardTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_Card *) ((eIDMW::PTEID_MemoryCard *) x));
}
static void *_p_eIDMW__PTEID_AddressTo_p_eIDMW__PTEID_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Object *) (eIDMW::PTEID_XMLDoc *) ((eIDMW::PTEID_Address *) x));
}
static void *_p_eIDMW__PTEID_PinsTo_p_eIDMW__PTEID_Crypto(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Crypto *)  ((eIDMW::PTEID_Pins *) x));
}
static void *_p_eIDMW__PTEID_CertificateTo_p_eIDMW__PTEID_Crypto(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Crypto *)  ((eIDMW::PTEID_Certificate *) x));
}
static void *_p_eIDMW__PTEID_CertificatesTo_p_eIDMW__PTEID_Crypto(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Crypto *)  ((eIDMW::PTEID_Certificates *) x));
}
static void *_p_eIDMW__PTEID_PinTo_p_eIDMW__PTEID_Crypto(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((eIDMW::PTEID_Crypto *)  ((eIDMW::PTEID_Pin *) x));
}
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEIDPin = {"_p_eIDMW__PTEIDPin", "p_eIDMW__PTEIDPin|eIDMW::PTEIDPin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEIDPins = {"_p_eIDMW__PTEIDPins", "p_eIDMW__PTEIDPins|eIDMW::PTEIDPins *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ADDR = {"_p_eIDMW__PTEID_ADDR", "eIDMW::PTEID_ADDR *|p_eIDMW__PTEID_ADDR", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Address = {"_p_eIDMW__PTEID_Address", "eIDMW::PTEID_Address *|p_eIDMW__PTEID_Address", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Biometric = {"_p_eIDMW__PTEID_Biometric", "eIDMW::PTEID_Biometric *|p_eIDMW__PTEID_Biometric", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ByteArray = {"_p_eIDMW__PTEID_ByteArray", "eIDMW::PTEID_ByteArray *|p_eIDMW__PTEID_ByteArray", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_CCXML_Doc = {"_p_eIDMW__PTEID_CCXML_Doc", "eIDMW::PTEID_CCXML_Doc *|p_eIDMW__PTEID_CCXML_Doc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Card = {"_p_eIDMW__PTEID_Card", "p_eIDMW__PTEID_Card|eIDMW::PTEID_Card *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_CardVersionInfo = {"_p_eIDMW__PTEID_CardVersionInfo", "eIDMW::PTEID_CardVersionInfo *|p_eIDMW__PTEID_CardVersionInfo", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Certif = {"_p_eIDMW__PTEID_Certif", "p_eIDMW__PTEID_Certif|eIDMW::PTEID_Certif *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Certificate = {"_p_eIDMW__PTEID_Certificate", "eIDMW::PTEID_Certificate *|p_eIDMW__PTEID_Certificate", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Certificates = {"_p_eIDMW__PTEID_Certificates", "eIDMW::PTEID_Certificates *|p_eIDMW__PTEID_Certificates", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Certifs = {"_p_eIDMW__PTEID_Certifs", "eIDMW::PTEID_Certifs *|p_eIDMW__PTEID_Certifs", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Config = {"_p_eIDMW__PTEID_Config", "eIDMW::PTEID_Config *|p_eIDMW__PTEID_Config", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Crypto = {"_p_eIDMW__PTEID_Crypto", "p_eIDMW__PTEID_Crypto|eIDMW::PTEID_Crypto *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_EIDCard = {"_p_eIDMW__PTEID_EIDCard", "p_eIDMW__PTEID_EIDCard|eIDMW::PTEID_EIDCard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_EId = {"_p_eIDMW__PTEID_EId", "eIDMW::PTEID_EId *|p_eIDMW__PTEID_EId", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExBadTransaction = {"_p_eIDMW__PTEID_ExBadTransaction", "p_eIDMW__PTEID_ExBadTransaction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExBadUsage = {"_p_eIDMW__PTEID_ExBadUsage", "p_eIDMW__PTEID_ExBadUsage", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExCardBadType = {"_p_eIDMW__PTEID_ExCardBadType", "p_eIDMW__PTEID_ExCardBadType", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExCardChanged = {"_p_eIDMW__PTEID_ExCardChanged", "p_eIDMW__PTEID_ExCardChanged", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExCardTypeUnknown = {"_p_eIDMW__PTEID_ExCardTypeUnknown", "p_eIDMW__PTEID_ExCardTypeUnknown", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExCertNoIssuer = {"_p_eIDMW__PTEID_ExCertNoIssuer", "p_eIDMW__PTEID_ExCertNoIssuer", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExCertNoRoot = {"_p_eIDMW__PTEID_ExCertNoRoot", "p_eIDMW__PTEID_ExCertNoRoot", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExCmdNotAllowed = {"_p_eIDMW__PTEID_ExCmdNotAllowed", "p_eIDMW__PTEID_ExCmdNotAllowed", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExCmdNotSupported = {"_p_eIDMW__PTEID_ExCmdNotSupported", "p_eIDMW__PTEID_ExCmdNotSupported", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExDocTypeUnknown = {"_p_eIDMW__PTEID_ExDocTypeUnknown", "p_eIDMW__PTEID_ExDocTypeUnknown", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExFileTypeUnknown = {"_p_eIDMW__PTEID_ExFileTypeUnknown", "p_eIDMW__PTEID_ExFileTypeUnknown", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExNoCardPresent = {"_p_eIDMW__PTEID_ExNoCardPresent", "p_eIDMW__PTEID_ExNoCardPresent", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExNoReader = {"_p_eIDMW__PTEID_ExNoReader", "p_eIDMW__PTEID_ExNoReader", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExNotAllowByUser = {"_p_eIDMW__PTEID_ExNotAllowByUser", "p_eIDMW__PTEID_ExNotAllowByUser", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExParamRange = {"_p_eIDMW__PTEID_ExParamRange", "p_eIDMW__PTEID_ExParamRange", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExReaderSetChanged = {"_p_eIDMW__PTEID_ExReaderSetChanged", "p_eIDMW__PTEID_ExReaderSetChanged", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExReleaseNeeded = {"_p_eIDMW__PTEID_ExReleaseNeeded", "p_eIDMW__PTEID_ExReleaseNeeded", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExSOD = {"_p_eIDMW__PTEID_ExSOD", "p_eIDMW__PTEID_ExSOD", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExUnknown = {"_p_eIDMW__PTEID_ExUnknown", "p_eIDMW__PTEID_ExUnknown", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ExUserMustAnswer = {"_p_eIDMW__PTEID_ExUserMustAnswer", "p_eIDMW__PTEID_ExUserMustAnswer", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Exception = {"_p_eIDMW__PTEID_Exception", "p_eIDMW__PTEID_Exception|eIDMW::PTEID_Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ID = {"_p_eIDMW__PTEID_ID", "p_eIDMW__PTEID_ID|eIDMW::PTEID_ID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_MemoryCard = {"_p_eIDMW__PTEID_MemoryCard", "p_eIDMW__PTEID_MemoryCard", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Object = {"_p_eIDMW__PTEID_Object", "eIDMW::PTEID_Object *|p_eIDMW__PTEID_Object", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_PDFSignature = {"_p_eIDMW__PTEID_PDFSignature", "eIDMW::PTEID_PDFSignature *|p_eIDMW__PTEID_PDFSignature", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_PIC = {"_p_eIDMW__PTEID_PIC", "p_eIDMW__PTEID_PIC|eIDMW::PTEID_PIC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Photo = {"_p_eIDMW__PTEID_Photo", "p_eIDMW__PTEID_Photo|eIDMW::PTEID_Photo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Pin = {"_p_eIDMW__PTEID_Pin", "eIDMW::PTEID_Pin *|p_eIDMW__PTEID_Pin", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Pins = {"_p_eIDMW__PTEID_Pins", "p_eIDMW__PTEID_Pins|eIDMW::PTEID_Pins *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_PublicKey = {"_p_eIDMW__PTEID_PublicKey", "eIDMW::PTEID_PublicKey *|p_eIDMW__PTEID_PublicKey", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_RSAPublicKey = {"_p_eIDMW__PTEID_RSAPublicKey", "eIDMW::PTEID_RSAPublicKey *|p_eIDMW__PTEID_RSAPublicKey", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_RawData_Eid = {"_p_eIDMW__PTEID_RawData_Eid", "eIDMW::PTEID_RawData_Eid *|p_eIDMW__PTEID_RawData_Eid", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ReaderContext = {"_p_eIDMW__PTEID_ReaderContext", "eIDMW::PTEID_ReaderContext *|p_eIDMW__PTEID_ReaderContext", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_ReaderSet = {"_p_eIDMW__PTEID_ReaderSet", "p_eIDMW__PTEID_ReaderSet|eIDMW::PTEID_ReaderSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_SigVerifier = {"_p_eIDMW__PTEID_SigVerifier", "eIDMW::PTEID_SigVerifier *|p_eIDMW__PTEID_SigVerifier", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_SmartCard = {"_p_eIDMW__PTEID_SmartCard", "p_eIDMW__PTEID_SmartCard|eIDMW::PTEID_SmartCard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_Sod = {"_p_eIDMW__PTEID_Sod", "eIDMW::PTEID_Sod *|p_eIDMW__PTEID_Sod", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_TokenInfo = {"_p_eIDMW__PTEID_TokenInfo", "eIDMW::PTEID_TokenInfo *|p_eIDMW__PTEID_TokenInfo", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_XMLDoc = {"_p_eIDMW__PTEID_XMLDoc", "eIDMW::PTEID_XMLDoc *|p_eIDMW__PTEID_XMLDoc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__PTEID_XmlUserRequestedInfo = {"_p_eIDMW__PTEID_XmlUserRequestedInfo", "eIDMW::PTEID_XmlUserRequestedInfo *|p_eIDMW__PTEID_XmlUserRequestedInfo", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__tCapPinChangeState = {"_p_eIDMW__tCapPinChangeState", "enum eIDMW::tCapPinChangeState *|eIDMW::tCapPinChangeState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__tCompCardType = {"_p_eIDMW__tCompCardType", "enum eIDMW::tCompCardType *|eIDMW::tCompCardType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eIDMW__tProxyInfo = {"_p_eIDMW__tProxyInfo", "p_eIDMW__tProxyInfo|eIDMW::tProxyInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_eIDMW__tCapPinChangeState__void = {"_p_f_enum_eIDMW__tCapPinChangeState__void", "void (*)(enum eIDMW::tCapPinChangeState)|void (*)(eIDMW::tCapPinChangeState)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_long_unsigned_long_p_void__void = {"_p_f_long_unsigned_long_p_void__void", "void (*)(long,unsigned long,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int__void = {"_p_f_p_void_int__void", "void (*)(void *,int)|eIDMW::PTEID_EIDCard::t_address_change_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_eIDMW__PTEIDPin,
  &_swigt__p_eIDMW__PTEIDPins,
  &_swigt__p_eIDMW__PTEID_ADDR,
  &_swigt__p_eIDMW__PTEID_Address,
  &_swigt__p_eIDMW__PTEID_Biometric,
  &_swigt__p_eIDMW__PTEID_ByteArray,
  &_swigt__p_eIDMW__PTEID_CCXML_Doc,
  &_swigt__p_eIDMW__PTEID_Card,
  &_swigt__p_eIDMW__PTEID_CardVersionInfo,
  &_swigt__p_eIDMW__PTEID_Certif,
  &_swigt__p_eIDMW__PTEID_Certificate,
  &_swigt__p_eIDMW__PTEID_Certificates,
  &_swigt__p_eIDMW__PTEID_Certifs,
  &_swigt__p_eIDMW__PTEID_Config,
  &_swigt__p_eIDMW__PTEID_Crypto,
  &_swigt__p_eIDMW__PTEID_EIDCard,
  &_swigt__p_eIDMW__PTEID_EId,
  &_swigt__p_eIDMW__PTEID_ExBadTransaction,
  &_swigt__p_eIDMW__PTEID_ExBadUsage,
  &_swigt__p_eIDMW__PTEID_ExCardBadType,
  &_swigt__p_eIDMW__PTEID_ExCardChanged,
  &_swigt__p_eIDMW__PTEID_ExCardTypeUnknown,
  &_swigt__p_eIDMW__PTEID_ExCertNoIssuer,
  &_swigt__p_eIDMW__PTEID_ExCertNoRoot,
  &_swigt__p_eIDMW__PTEID_ExCmdNotAllowed,
  &_swigt__p_eIDMW__PTEID_ExCmdNotSupported,
  &_swigt__p_eIDMW__PTEID_ExDocTypeUnknown,
  &_swigt__p_eIDMW__PTEID_ExFileTypeUnknown,
  &_swigt__p_eIDMW__PTEID_ExNoCardPresent,
  &_swigt__p_eIDMW__PTEID_ExNoReader,
  &_swigt__p_eIDMW__PTEID_ExNotAllowByUser,
  &_swigt__p_eIDMW__PTEID_ExParamRange,
  &_swigt__p_eIDMW__PTEID_ExReaderSetChanged,
  &_swigt__p_eIDMW__PTEID_ExReleaseNeeded,
  &_swigt__p_eIDMW__PTEID_ExSOD,
  &_swigt__p_eIDMW__PTEID_ExUnknown,
  &_swigt__p_eIDMW__PTEID_ExUserMustAnswer,
  &_swigt__p_eIDMW__PTEID_Exception,
  &_swigt__p_eIDMW__PTEID_ID,
  &_swigt__p_eIDMW__PTEID_MemoryCard,
  &_swigt__p_eIDMW__PTEID_Object,
  &_swigt__p_eIDMW__PTEID_PDFSignature,
  &_swigt__p_eIDMW__PTEID_PIC,
  &_swigt__p_eIDMW__PTEID_Photo,
  &_swigt__p_eIDMW__PTEID_Pin,
  &_swigt__p_eIDMW__PTEID_Pins,
  &_swigt__p_eIDMW__PTEID_PublicKey,
  &_swigt__p_eIDMW__PTEID_RSAPublicKey,
  &_swigt__p_eIDMW__PTEID_RawData_Eid,
  &_swigt__p_eIDMW__PTEID_ReaderContext,
  &_swigt__p_eIDMW__PTEID_ReaderSet,
  &_swigt__p_eIDMW__PTEID_SigVerifier,
  &_swigt__p_eIDMW__PTEID_SmartCard,
  &_swigt__p_eIDMW__PTEID_Sod,
  &_swigt__p_eIDMW__PTEID_TokenInfo,
  &_swigt__p_eIDMW__PTEID_XMLDoc,
  &_swigt__p_eIDMW__PTEID_XmlUserRequestedInfo,
  &_swigt__p_eIDMW__tCapPinChangeState,
  &_swigt__p_eIDMW__tCompCardType,
  &_swigt__p_eIDMW__tProxyInfo,
  &_swigt__p_f_enum_eIDMW__tCapPinChangeState__void,
  &_swigt__p_f_long_unsigned_long_p_void__void,
  &_swigt__p_f_p_void_int__void,
  &_swigt__p_long,
  &_swigt__p_p_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEIDPin[] = {  {&_swigt__p_eIDMW__PTEIDPin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEIDPins[] = {  {&_swigt__p_eIDMW__PTEIDPins, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ADDR[] = {  {&_swigt__p_eIDMW__PTEID_ADDR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Address[] = {  {&_swigt__p_eIDMW__PTEID_Address, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Biometric[] = {  {&_swigt__p_eIDMW__PTEID_Sod, _p_eIDMW__PTEID_SodTo_p_eIDMW__PTEID_Biometric, 0, 0},  {&_swigt__p_eIDMW__PTEID_Biometric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ByteArray[] = {  {&_swigt__p_eIDMW__PTEID_ByteArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_CCXML_Doc[] = {  {&_swigt__p_eIDMW__PTEID_CCXML_Doc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Card[] = {  {&_swigt__p_eIDMW__PTEID_MemoryCard, _p_eIDMW__PTEID_MemoryCardTo_p_eIDMW__PTEID_Card, 0, 0},  {&_swigt__p_eIDMW__PTEID_SmartCard, _p_eIDMW__PTEID_SmartCardTo_p_eIDMW__PTEID_Card, 0, 0},  {&_swigt__p_eIDMW__PTEID_Card, 0, 0, 0},  {&_swigt__p_eIDMW__PTEID_EIDCard, _p_eIDMW__PTEID_EIDCardTo_p_eIDMW__PTEID_Card, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_CardVersionInfo[] = {  {&_swigt__p_eIDMW__PTEID_CardVersionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Certif[] = {  {&_swigt__p_eIDMW__PTEID_Certif, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Certificate[] = {  {&_swigt__p_eIDMW__PTEID_Certificate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Certificates[] = {  {&_swigt__p_eIDMW__PTEID_Certificates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Certifs[] = {  {&_swigt__p_eIDMW__PTEID_Certifs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Config[] = {  {&_swigt__p_eIDMW__PTEID_Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Crypto[] = {  {&_swigt__p_eIDMW__PTEID_Pins, _p_eIDMW__PTEID_PinsTo_p_eIDMW__PTEID_Crypto, 0, 0},  {&_swigt__p_eIDMW__PTEID_Certificate, _p_eIDMW__PTEID_CertificateTo_p_eIDMW__PTEID_Crypto, 0, 0},  {&_swigt__p_eIDMW__PTEID_Certificates, _p_eIDMW__PTEID_CertificatesTo_p_eIDMW__PTEID_Crypto, 0, 0},  {&_swigt__p_eIDMW__PTEID_Crypto, 0, 0, 0},  {&_swigt__p_eIDMW__PTEID_Pin, _p_eIDMW__PTEID_PinTo_p_eIDMW__PTEID_Crypto, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_EIDCard[] = {  {&_swigt__p_eIDMW__PTEID_EIDCard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_EId[] = {  {&_swigt__p_eIDMW__PTEID_EId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExBadTransaction[] = {  {&_swigt__p_eIDMW__PTEID_ExBadTransaction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExBadUsage[] = {  {&_swigt__p_eIDMW__PTEID_ExBadUsage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExCardBadType[] = {  {&_swigt__p_eIDMW__PTEID_ExCardBadType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExCardChanged[] = {  {&_swigt__p_eIDMW__PTEID_ExCardChanged, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExCardTypeUnknown[] = {  {&_swigt__p_eIDMW__PTEID_ExCardTypeUnknown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExCertNoIssuer[] = {  {&_swigt__p_eIDMW__PTEID_ExCertNoIssuer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExCertNoRoot[] = {  {&_swigt__p_eIDMW__PTEID_ExCertNoRoot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExCmdNotAllowed[] = {  {&_swigt__p_eIDMW__PTEID_ExCmdNotAllowed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExCmdNotSupported[] = {  {&_swigt__p_eIDMW__PTEID_ExCmdNotSupported, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExDocTypeUnknown[] = {  {&_swigt__p_eIDMW__PTEID_ExDocTypeUnknown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExFileTypeUnknown[] = {  {&_swigt__p_eIDMW__PTEID_ExFileTypeUnknown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExNoCardPresent[] = {  {&_swigt__p_eIDMW__PTEID_ExNoCardPresent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExNoReader[] = {  {&_swigt__p_eIDMW__PTEID_ExNoReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExNotAllowByUser[] = {  {&_swigt__p_eIDMW__PTEID_ExNotAllowByUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExParamRange[] = {  {&_swigt__p_eIDMW__PTEID_ExParamRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExReaderSetChanged[] = {  {&_swigt__p_eIDMW__PTEID_ExReaderSetChanged, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExReleaseNeeded[] = {  {&_swigt__p_eIDMW__PTEID_ExReleaseNeeded, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExSOD[] = {  {&_swigt__p_eIDMW__PTEID_ExSOD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExUnknown[] = {  {&_swigt__p_eIDMW__PTEID_ExUnknown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ExUserMustAnswer[] = {  {&_swigt__p_eIDMW__PTEID_ExUserMustAnswer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Exception[] = {  {&_swigt__p_eIDMW__PTEID_ExBadUsage, _p_eIDMW__PTEID_ExBadUsageTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExCardTypeUnknown, _p_eIDMW__PTEID_ExCardTypeUnknownTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExFileTypeUnknown, _p_eIDMW__PTEID_ExFileTypeUnknownTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExDocTypeUnknown, _p_eIDMW__PTEID_ExDocTypeUnknownTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExUnknown, _p_eIDMW__PTEID_ExUnknownTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExCertNoIssuer, _p_eIDMW__PTEID_ExCertNoIssuerTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExUserMustAnswer, _p_eIDMW__PTEID_ExUserMustAnswerTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExSOD, _p_eIDMW__PTEID_ExSODTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExCertNoRoot, _p_eIDMW__PTEID_ExCertNoRootTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExReleaseNeeded, _p_eIDMW__PTEID_ExReleaseNeededTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExNoCardPresent, _p_eIDMW__PTEID_ExNoCardPresentTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_Exception, 0, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExNoReader, _p_eIDMW__PTEID_ExNoReaderTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExCardBadType, _p_eIDMW__PTEID_ExCardBadTypeTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExCardChanged, _p_eIDMW__PTEID_ExCardChangedTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExReaderSetChanged, _p_eIDMW__PTEID_ExReaderSetChangedTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExCmdNotSupported, _p_eIDMW__PTEID_ExCmdNotSupportedTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExParamRange, _p_eIDMW__PTEID_ExParamRangeTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExNotAllowByUser, _p_eIDMW__PTEID_ExNotAllowByUserTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExBadTransaction, _p_eIDMW__PTEID_ExBadTransactionTo_p_eIDMW__PTEID_Exception, 0, 0},  {&_swigt__p_eIDMW__PTEID_ExCmdNotAllowed, _p_eIDMW__PTEID_ExCmdNotAllowedTo_p_eIDMW__PTEID_Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ID[] = {  {&_swigt__p_eIDMW__PTEID_ID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_MemoryCard[] = {  {&_swigt__p_eIDMW__PTEID_MemoryCard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Object[] = {  {&_swigt__p_eIDMW__PTEID_Photo, _p_eIDMW__PTEID_PhotoTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_XMLDoc, _p_eIDMW__PTEID_XMLDocTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Pin, _p_eIDMW__PTEID_PinTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Certificate, _p_eIDMW__PTEID_CertificateTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_SmartCard, _p_eIDMW__PTEID_SmartCardTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_CCXML_Doc, _p_eIDMW__PTEID_CCXML_DocTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_ReaderContext, _p_eIDMW__PTEID_ReaderContextTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Biometric, _p_eIDMW__PTEID_BiometricTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_PublicKey, _p_eIDMW__PTEID_PublicKeyTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_CardVersionInfo, _p_eIDMW__PTEID_CardVersionInfoTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_ReaderSet, _p_eIDMW__PTEID_ReaderSetTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_ByteArray, _p_eIDMW__PTEID_ByteArrayTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Card, _p_eIDMW__PTEID_CardTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Sod, _p_eIDMW__PTEID_SodTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Certificates, _p_eIDMW__PTEID_CertificatesTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Pins, _p_eIDMW__PTEID_PinsTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_XmlUserRequestedInfo, _p_eIDMW__PTEID_XmlUserRequestedInfoTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Config, _p_eIDMW__PTEID_ConfigTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_EIDCard, _p_eIDMW__PTEID_EIDCardTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_EId, _p_eIDMW__PTEID_EIdTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Crypto, _p_eIDMW__PTEID_CryptoTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_MemoryCard, _p_eIDMW__PTEID_MemoryCardTo_p_eIDMW__PTEID_Object, 0, 0},  {&_swigt__p_eIDMW__PTEID_Object, 0, 0, 0},  {&_swigt__p_eIDMW__PTEID_Address, _p_eIDMW__PTEID_AddressTo_p_eIDMW__PTEID_Object, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_PDFSignature[] = {  {&_swigt__p_eIDMW__PTEID_PDFSignature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_PIC[] = {  {&_swigt__p_eIDMW__PTEID_PIC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Photo[] = {  {&_swigt__p_eIDMW__PTEID_Photo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Pin[] = {  {&_swigt__p_eIDMW__PTEID_Pin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Pins[] = {  {&_swigt__p_eIDMW__PTEID_Pins, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_PublicKey[] = {  {&_swigt__p_eIDMW__PTEID_PublicKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_RSAPublicKey[] = {  {&_swigt__p_eIDMW__PTEID_RSAPublicKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_RawData_Eid[] = {  {&_swigt__p_eIDMW__PTEID_RawData_Eid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ReaderContext[] = {  {&_swigt__p_eIDMW__PTEID_ReaderContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_ReaderSet[] = {  {&_swigt__p_eIDMW__PTEID_ReaderSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_SigVerifier[] = {  {&_swigt__p_eIDMW__PTEID_SigVerifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_SmartCard[] = {  {&_swigt__p_eIDMW__PTEID_SmartCard, 0, 0, 0},  {&_swigt__p_eIDMW__PTEID_EIDCard, _p_eIDMW__PTEID_EIDCardTo_p_eIDMW__PTEID_SmartCard, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_Sod[] = {  {&_swigt__p_eIDMW__PTEID_Sod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_TokenInfo[] = {  {&_swigt__p_eIDMW__PTEID_TokenInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_XMLDoc[] = {  {&_swigt__p_eIDMW__PTEID_CardVersionInfo, _p_eIDMW__PTEID_CardVersionInfoTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_Pins, _p_eIDMW__PTEID_PinsTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_Certificate, _p_eIDMW__PTEID_CertificateTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_Certificates, _p_eIDMW__PTEID_CertificatesTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_Crypto, _p_eIDMW__PTEID_CryptoTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_Sod, _p_eIDMW__PTEID_SodTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_Address, _p_eIDMW__PTEID_AddressTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_Pin, _p_eIDMW__PTEID_PinTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_Biometric, _p_eIDMW__PTEID_BiometricTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_CCXML_Doc, _p_eIDMW__PTEID_CCXML_DocTo_p_eIDMW__PTEID_XMLDoc, 0, 0},  {&_swigt__p_eIDMW__PTEID_XMLDoc, 0, 0, 0},  {&_swigt__p_eIDMW__PTEID_EId, _p_eIDMW__PTEID_EIdTo_p_eIDMW__PTEID_XMLDoc, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__PTEID_XmlUserRequestedInfo[] = {  {&_swigt__p_eIDMW__PTEID_XmlUserRequestedInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__tCapPinChangeState[] = {  {&_swigt__p_eIDMW__tCapPinChangeState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__tCompCardType[] = {  {&_swigt__p_eIDMW__tCompCardType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eIDMW__tProxyInfo[] = {  {&_swigt__p_eIDMW__tProxyInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_eIDMW__tCapPinChangeState__void[] = {  {&_swigt__p_f_enum_eIDMW__tCapPinChangeState__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_long_unsigned_long_p_void__void[] = {  {&_swigt__p_f_long_unsigned_long_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int__void[] = {  {&_swigt__p_f_p_void_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_eIDMW__PTEIDPin,
  _swigc__p_eIDMW__PTEIDPins,
  _swigc__p_eIDMW__PTEID_ADDR,
  _swigc__p_eIDMW__PTEID_Address,
  _swigc__p_eIDMW__PTEID_Biometric,
  _swigc__p_eIDMW__PTEID_ByteArray,
  _swigc__p_eIDMW__PTEID_CCXML_Doc,
  _swigc__p_eIDMW__PTEID_Card,
  _swigc__p_eIDMW__PTEID_CardVersionInfo,
  _swigc__p_eIDMW__PTEID_Certif,
  _swigc__p_eIDMW__PTEID_Certificate,
  _swigc__p_eIDMW__PTEID_Certificates,
  _swigc__p_eIDMW__PTEID_Certifs,
  _swigc__p_eIDMW__PTEID_Config,
  _swigc__p_eIDMW__PTEID_Crypto,
  _swigc__p_eIDMW__PTEID_EIDCard,
  _swigc__p_eIDMW__PTEID_EId,
  _swigc__p_eIDMW__PTEID_ExBadTransaction,
  _swigc__p_eIDMW__PTEID_ExBadUsage,
  _swigc__p_eIDMW__PTEID_ExCardBadType,
  _swigc__p_eIDMW__PTEID_ExCardChanged,
  _swigc__p_eIDMW__PTEID_ExCardTypeUnknown,
  _swigc__p_eIDMW__PTEID_ExCertNoIssuer,
  _swigc__p_eIDMW__PTEID_ExCertNoRoot,
  _swigc__p_eIDMW__PTEID_ExCmdNotAllowed,
  _swigc__p_eIDMW__PTEID_ExCmdNotSupported,
  _swigc__p_eIDMW__PTEID_ExDocTypeUnknown,
  _swigc__p_eIDMW__PTEID_ExFileTypeUnknown,
  _swigc__p_eIDMW__PTEID_ExNoCardPresent,
  _swigc__p_eIDMW__PTEID_ExNoReader,
  _swigc__p_eIDMW__PTEID_ExNotAllowByUser,
  _swigc__p_eIDMW__PTEID_ExParamRange,
  _swigc__p_eIDMW__PTEID_ExReaderSetChanged,
  _swigc__p_eIDMW__PTEID_ExReleaseNeeded,
  _swigc__p_eIDMW__PTEID_ExSOD,
  _swigc__p_eIDMW__PTEID_ExUnknown,
  _swigc__p_eIDMW__PTEID_ExUserMustAnswer,
  _swigc__p_eIDMW__PTEID_Exception,
  _swigc__p_eIDMW__PTEID_ID,
  _swigc__p_eIDMW__PTEID_MemoryCard,
  _swigc__p_eIDMW__PTEID_Object,
  _swigc__p_eIDMW__PTEID_PDFSignature,
  _swigc__p_eIDMW__PTEID_PIC,
  _swigc__p_eIDMW__PTEID_Photo,
  _swigc__p_eIDMW__PTEID_Pin,
  _swigc__p_eIDMW__PTEID_Pins,
  _swigc__p_eIDMW__PTEID_PublicKey,
  _swigc__p_eIDMW__PTEID_RSAPublicKey,
  _swigc__p_eIDMW__PTEID_RawData_Eid,
  _swigc__p_eIDMW__PTEID_ReaderContext,
  _swigc__p_eIDMW__PTEID_ReaderSet,
  _swigc__p_eIDMW__PTEID_SigVerifier,
  _swigc__p_eIDMW__PTEID_SmartCard,
  _swigc__p_eIDMW__PTEID_Sod,
  _swigc__p_eIDMW__PTEID_TokenInfo,
  _swigc__p_eIDMW__PTEID_XMLDoc,
  _swigc__p_eIDMW__PTEID_XmlUserRequestedInfo,
  _swigc__p_eIDMW__tCapPinChangeState,
  _swigc__p_eIDMW__tCompCardType,
  _swigc__p_eIDMW__tProxyInfo,
  _swigc__p_f_enum_eIDMW__tCapPinChangeState__void,
  _swigc__p_f_long_unsigned_long_p_void__void,
  _swigc__p_f_p_void_int__void,
  _swigc__p_long,
  _swigc__p_p_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = v8::Context::GetCurrent()->Global();
  v8::Local<v8::External> mod = v8::External::New(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(v8::String::New("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = v8::Context::GetCurrent()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(v8::String::New("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  v8::HandleScope scope;
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
#if (SWIG_V8_VERSION < 0x031900)
  SWIGV8_SWIGTYPE_Proxy_class_templ = v8::Persistent<v8::FunctionTemplate>::New(SWIGV8_CreateClassTemplate("SwigProxy"));
#else
  SWIGV8_SWIGTYPE_Proxy_class_templ.Reset(v8::Isolate::GetCurrent(), SWIGV8_CreateClassTemplate("SwigProxy"));
#endif

  /* create objects for namespaces */
  

  /* create class templates */
  v8::Handle<v8::FunctionTemplate> _exports_PTEID_Exception_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Exception");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Exception_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Exception_class);
#else
_exports_PTEID_Exception_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Exception_class);
#endif
_exports_PTEID_Exception_clientData.dtor = _wrap_delete_PTEID_Exception;
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata = &_exports_PTEID_Exception_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExReleaseNeeded_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExReleaseNeeded");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExReleaseNeeded_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExReleaseNeeded_class);
#else
_exports_PTEID_ExReleaseNeeded_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExReleaseNeeded_class);
#endif
_exports_PTEID_ExReleaseNeeded_clientData.dtor = _wrap_delete_PTEID_ExReleaseNeeded;
if (SWIGTYPE_p_eIDMW__PTEID_ExReleaseNeeded->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExReleaseNeeded->clientdata = &_exports_PTEID_ExReleaseNeeded_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExUnknown_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExUnknown");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExUnknown_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExUnknown_class);
#else
_exports_PTEID_ExUnknown_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExUnknown_class);
#endif
_exports_PTEID_ExUnknown_clientData.dtor = _wrap_delete_PTEID_ExUnknown;
if (SWIGTYPE_p_eIDMW__PTEID_ExUnknown->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExUnknown->clientdata = &_exports_PTEID_ExUnknown_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExDocTypeUnknown_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExDocTypeUnknown");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExDocTypeUnknown_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExDocTypeUnknown_class);
#else
_exports_PTEID_ExDocTypeUnknown_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExDocTypeUnknown_class);
#endif
_exports_PTEID_ExDocTypeUnknown_clientData.dtor = _wrap_delete_PTEID_ExDocTypeUnknown;
if (SWIGTYPE_p_eIDMW__PTEID_ExDocTypeUnknown->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExDocTypeUnknown->clientdata = &_exports_PTEID_ExDocTypeUnknown_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExFileTypeUnknown_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExFileTypeUnknown");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExFileTypeUnknown_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExFileTypeUnknown_class);
#else
_exports_PTEID_ExFileTypeUnknown_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExFileTypeUnknown_class);
#endif
_exports_PTEID_ExFileTypeUnknown_clientData.dtor = _wrap_delete_PTEID_ExFileTypeUnknown;
if (SWIGTYPE_p_eIDMW__PTEID_ExFileTypeUnknown->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExFileTypeUnknown->clientdata = &_exports_PTEID_ExFileTypeUnknown_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExParamRange_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExParamRange");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExParamRange_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExParamRange_class);
#else
_exports_PTEID_ExParamRange_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExParamRange_class);
#endif
_exports_PTEID_ExParamRange_clientData.dtor = _wrap_delete_PTEID_ExParamRange;
if (SWIGTYPE_p_eIDMW__PTEID_ExParamRange->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExParamRange->clientdata = &_exports_PTEID_ExParamRange_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCmdNotAllowed_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExCmdNotAllowed");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExCmdNotAllowed_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExCmdNotAllowed_class);
#else
_exports_PTEID_ExCmdNotAllowed_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExCmdNotAllowed_class);
#endif
_exports_PTEID_ExCmdNotAllowed_clientData.dtor = _wrap_delete_PTEID_ExCmdNotAllowed;
if (SWIGTYPE_p_eIDMW__PTEID_ExCmdNotAllowed->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExCmdNotAllowed->clientdata = &_exports_PTEID_ExCmdNotAllowed_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCmdNotSupported_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExCmdNotSupported");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExCmdNotSupported_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExCmdNotSupported_class);
#else
_exports_PTEID_ExCmdNotSupported_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExCmdNotSupported_class);
#endif
_exports_PTEID_ExCmdNotSupported_clientData.dtor = _wrap_delete_PTEID_ExCmdNotSupported;
if (SWIGTYPE_p_eIDMW__PTEID_ExCmdNotSupported->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExCmdNotSupported->clientdata = &_exports_PTEID_ExCmdNotSupported_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExNoCardPresent_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExNoCardPresent");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExNoCardPresent_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExNoCardPresent_class);
#else
_exports_PTEID_ExNoCardPresent_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExNoCardPresent_class);
#endif
_exports_PTEID_ExNoCardPresent_clientData.dtor = _wrap_delete_PTEID_ExNoCardPresent;
if (SWIGTYPE_p_eIDMW__PTEID_ExNoCardPresent->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExNoCardPresent->clientdata = &_exports_PTEID_ExNoCardPresent_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCardBadType_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExCardBadType");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExCardBadType_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExCardBadType_class);
#else
_exports_PTEID_ExCardBadType_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExCardBadType_class);
#endif
_exports_PTEID_ExCardBadType_clientData.dtor = _wrap_delete_PTEID_ExCardBadType;
if (SWIGTYPE_p_eIDMW__PTEID_ExCardBadType->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExCardBadType->clientdata = &_exports_PTEID_ExCardBadType_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCardTypeUnknown_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExCardTypeUnknown");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExCardTypeUnknown_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExCardTypeUnknown_class);
#else
_exports_PTEID_ExCardTypeUnknown_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExCardTypeUnknown_class);
#endif
_exports_PTEID_ExCardTypeUnknown_clientData.dtor = _wrap_delete_PTEID_ExCardTypeUnknown;
if (SWIGTYPE_p_eIDMW__PTEID_ExCardTypeUnknown->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExCardTypeUnknown->clientdata = &_exports_PTEID_ExCardTypeUnknown_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCertNoIssuer_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExCertNoIssuer");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExCertNoIssuer_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExCertNoIssuer_class);
#else
_exports_PTEID_ExCertNoIssuer_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExCertNoIssuer_class);
#endif
_exports_PTEID_ExCertNoIssuer_clientData.dtor = _wrap_delete_PTEID_ExCertNoIssuer;
if (SWIGTYPE_p_eIDMW__PTEID_ExCertNoIssuer->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExCertNoIssuer->clientdata = &_exports_PTEID_ExCertNoIssuer_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCertNoRoot_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExCertNoRoot");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExCertNoRoot_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExCertNoRoot_class);
#else
_exports_PTEID_ExCertNoRoot_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExCertNoRoot_class);
#endif
_exports_PTEID_ExCertNoRoot_clientData.dtor = _wrap_delete_PTEID_ExCertNoRoot;
if (SWIGTYPE_p_eIDMW__PTEID_ExCertNoRoot->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExCertNoRoot->clientdata = &_exports_PTEID_ExCertNoRoot_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExBadUsage_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExBadUsage");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExBadUsage_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExBadUsage_class);
#else
_exports_PTEID_ExBadUsage_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExBadUsage_class);
#endif
_exports_PTEID_ExBadUsage_clientData.dtor = _wrap_delete_PTEID_ExBadUsage;
if (SWIGTYPE_p_eIDMW__PTEID_ExBadUsage->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExBadUsage->clientdata = &_exports_PTEID_ExBadUsage_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExBadTransaction_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExBadTransaction");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExBadTransaction_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExBadTransaction_class);
#else
_exports_PTEID_ExBadTransaction_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExBadTransaction_class);
#endif
_exports_PTEID_ExBadTransaction_clientData.dtor = _wrap_delete_PTEID_ExBadTransaction;
if (SWIGTYPE_p_eIDMW__PTEID_ExBadTransaction->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExBadTransaction->clientdata = &_exports_PTEID_ExBadTransaction_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCardChanged_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExCardChanged");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExCardChanged_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExCardChanged_class);
#else
_exports_PTEID_ExCardChanged_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExCardChanged_class);
#endif
_exports_PTEID_ExCardChanged_clientData.dtor = _wrap_delete_PTEID_ExCardChanged;
if (SWIGTYPE_p_eIDMW__PTEID_ExCardChanged->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExCardChanged->clientdata = &_exports_PTEID_ExCardChanged_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExReaderSetChanged_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExReaderSetChanged");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExReaderSetChanged_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExReaderSetChanged_class);
#else
_exports_PTEID_ExReaderSetChanged_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExReaderSetChanged_class);
#endif
_exports_PTEID_ExReaderSetChanged_clientData.dtor = _wrap_delete_PTEID_ExReaderSetChanged;
if (SWIGTYPE_p_eIDMW__PTEID_ExReaderSetChanged->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExReaderSetChanged->clientdata = &_exports_PTEID_ExReaderSetChanged_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExNoReader_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExNoReader");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExNoReader_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExNoReader_class);
#else
_exports_PTEID_ExNoReader_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExNoReader_class);
#endif
_exports_PTEID_ExNoReader_clientData.dtor = _wrap_delete_PTEID_ExNoReader;
if (SWIGTYPE_p_eIDMW__PTEID_ExNoReader->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExNoReader->clientdata = &_exports_PTEID_ExNoReader_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExNotAllowByUser_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExNotAllowByUser");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExNotAllowByUser_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExNotAllowByUser_class);
#else
_exports_PTEID_ExNotAllowByUser_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExNotAllowByUser_class);
#endif
_exports_PTEID_ExNotAllowByUser_clientData.dtor = _wrap_delete_PTEID_ExNotAllowByUser;
if (SWIGTYPE_p_eIDMW__PTEID_ExNotAllowByUser->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExNotAllowByUser->clientdata = &_exports_PTEID_ExNotAllowByUser_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExUserMustAnswer_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExUserMustAnswer");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExUserMustAnswer_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExUserMustAnswer_class);
#else
_exports_PTEID_ExUserMustAnswer_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExUserMustAnswer_class);
#endif
_exports_PTEID_ExUserMustAnswer_clientData.dtor = _wrap_delete_PTEID_ExUserMustAnswer;
if (SWIGTYPE_p_eIDMW__PTEID_ExUserMustAnswer->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExUserMustAnswer->clientdata = &_exports_PTEID_ExUserMustAnswer_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExSOD_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ExSOD");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ExSOD_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ExSOD_class);
#else
_exports_PTEID_ExSOD_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ExSOD_class);
#endif
_exports_PTEID_ExSOD_clientData.dtor = _wrap_delete_PTEID_ExSOD;
if (SWIGTYPE_p_eIDMW__PTEID_ExSOD->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ExSOD->clientdata = &_exports_PTEID_ExSOD_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Object_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Object");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Object_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Object_class);
#else
_exports_PTEID_Object_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Object_class);
#endif
_exports_PTEID_Object_clientData.dtor = _wrap_delete_PTEID_Object;
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Object->clientdata = &_exports_PTEID_Object_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ByteArray_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ByteArray");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ByteArray_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ByteArray_class);
#else
_exports_PTEID_ByteArray_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ByteArray_class);
#endif
_exports_PTEID_ByteArray_clientData.dtor = _wrap_delete_PTEID_ByteArray;
if (SWIGTYPE_p_eIDMW__PTEID_ByteArray->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ByteArray->clientdata = &_exports_PTEID_ByteArray_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Photo_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Photo");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Photo_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Photo_class);
#else
_exports_PTEID_Photo_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Photo_class);
#endif
_exports_PTEID_Photo_clientData.dtor = _wrap_delete_PTEID_Photo;
if (SWIGTYPE_p_eIDMW__PTEID_Photo->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Photo->clientdata = &_exports_PTEID_Photo_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_PublicKey_class = SWIGV8_CreateClassTemplate("_exports_PTEID_PublicKey");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_PublicKey_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_PublicKey_class);
#else
_exports_PTEID_PublicKey_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_PublicKey_class);
#endif
_exports_PTEID_PublicKey_clientData.dtor = _wrap_delete_PTEID_PublicKey;
if (SWIGTYPE_p_eIDMW__PTEID_PublicKey->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_PublicKey->clientdata = &_exports_PTEID_PublicKey_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_RawData_Eid_class = SWIGV8_CreateClassTemplate("_exports_PTEID_RawData_Eid");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_RawData_Eid_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_RawData_Eid_class);
#else
_exports_PTEID_RawData_Eid_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_RawData_Eid_class);
#endif
_exports_PTEID_RawData_Eid_clientData.dtor = _wrap_delete_PTEID_RawData_Eid;
if (SWIGTYPE_p_eIDMW__PTEID_RawData_Eid->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_RawData_Eid->clientdata = &_exports_PTEID_RawData_Eid_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ReaderSet_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ReaderSet");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ReaderSet_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ReaderSet_class);
#else
_exports_PTEID_ReaderSet_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ReaderSet_class);
#endif
_exports_PTEID_ReaderSet_clientData.dtor = _wrap_delete_PTEID_ReaderSet;
if (SWIGTYPE_p_eIDMW__PTEID_ReaderSet->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ReaderSet->clientdata = &_exports_PTEID_ReaderSet_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ReaderContext_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ReaderContext");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ReaderContext_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ReaderContext_class);
#else
_exports_PTEID_ReaderContext_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ReaderContext_class);
#endif
_exports_PTEID_ReaderContext_clientData.dtor = _wrap_delete_PTEID_ReaderContext;
if (SWIGTYPE_p_eIDMW__PTEID_ReaderContext->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ReaderContext->clientdata = &_exports_PTEID_ReaderContext_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Card_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Card");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Card_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Card_class);
#else
_exports_PTEID_Card_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Card_class);
#endif
_exports_PTEID_Card_clientData.dtor = _wrap_delete_PTEID_Card;
if (SWIGTYPE_p_eIDMW__PTEID_Card->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Card->clientdata = &_exports_PTEID_Card_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_MemoryCard_class = SWIGV8_CreateClassTemplate("_exports_PTEID_MemoryCard");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_MemoryCard_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_MemoryCard_class);
#else
_exports_PTEID_MemoryCard_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_MemoryCard_class);
#endif
_exports_PTEID_MemoryCard_clientData.dtor = _wrap_delete_PTEID_MemoryCard;
if (SWIGTYPE_p_eIDMW__PTEID_MemoryCard->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_MemoryCard->clientdata = &_exports_PTEID_MemoryCard_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_SmartCard_class = SWIGV8_CreateClassTemplate("_exports_PTEID_SmartCard");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_SmartCard_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_SmartCard_class);
#else
_exports_PTEID_SmartCard_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_SmartCard_class);
#endif
_exports_PTEID_SmartCard_clientData.dtor = _wrap_delete_PTEID_SmartCard;
if (SWIGTYPE_p_eIDMW__PTEID_SmartCard->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_SmartCard->clientdata = &_exports_PTEID_SmartCard_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_PDFSignature_class = SWIGV8_CreateClassTemplate("_exports_PTEID_PDFSignature");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_PDFSignature_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_PDFSignature_class);
#else
_exports_PTEID_PDFSignature_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_PDFSignature_class);
#endif
_exports_PTEID_PDFSignature_clientData.dtor = _wrap_delete_PTEID_PDFSignature;
if (SWIGTYPE_p_eIDMW__PTEID_PDFSignature->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_PDFSignature->clientdata = &_exports_PTEID_PDFSignature_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_EIDCard_class = SWIGV8_CreateClassTemplate("_exports_PTEID_EIDCard");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_EIDCard_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_EIDCard_class);
#else
_exports_PTEID_EIDCard_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_EIDCard_class);
#endif
_exports_PTEID_EIDCard_clientData.dtor = _wrap_delete_PTEID_EIDCard;
if (SWIGTYPE_p_eIDMW__PTEID_EIDCard->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_EIDCard->clientdata = &_exports_PTEID_EIDCard_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_SigVerifier_class = SWIGV8_CreateClassTemplate("_exports_PTEID_SigVerifier");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_SigVerifier_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_SigVerifier_class);
#else
_exports_PTEID_SigVerifier_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_SigVerifier_class);
#endif
_exports_PTEID_SigVerifier_clientData.dtor = _wrap_delete_PTEID_SigVerifier;
if (SWIGTYPE_p_eIDMW__PTEID_SigVerifier->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_SigVerifier->clientdata = &_exports_PTEID_SigVerifier_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_XmlUserRequestedInfo_class = SWIGV8_CreateClassTemplate("_exports_PTEID_XmlUserRequestedInfo");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_XmlUserRequestedInfo_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_XmlUserRequestedInfo_class);
#else
_exports_PTEID_XmlUserRequestedInfo_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_XmlUserRequestedInfo_class);
#endif
_exports_PTEID_XmlUserRequestedInfo_clientData.dtor = _wrap_delete_PTEID_XmlUserRequestedInfo;
if (SWIGTYPE_p_eIDMW__PTEID_XmlUserRequestedInfo->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_XmlUserRequestedInfo->clientdata = &_exports_PTEID_XmlUserRequestedInfo_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_XMLDoc_class = SWIGV8_CreateClassTemplate("_exports_PTEID_XMLDoc");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_XMLDoc_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_XMLDoc_class);
#else
_exports_PTEID_XMLDoc_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_XMLDoc_class);
#endif
_exports_PTEID_XMLDoc_clientData.dtor = _wrap_delete_PTEID_XMLDoc;
if (SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata = &_exports_PTEID_XMLDoc_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Biometric_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Biometric");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Biometric_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Biometric_class);
#else
_exports_PTEID_Biometric_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Biometric_class);
#endif
_exports_PTEID_Biometric_clientData.dtor = _wrap_delete_PTEID_Biometric;
if (SWIGTYPE_p_eIDMW__PTEID_Biometric->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Biometric->clientdata = &_exports_PTEID_Biometric_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Crypto_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Crypto");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Crypto_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Crypto_class);
#else
_exports_PTEID_Crypto_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Crypto_class);
#endif
_exports_PTEID_Crypto_clientData.dtor = _wrap_delete_PTEID_Crypto;
if (SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata = &_exports_PTEID_Crypto_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_CardVersionInfo_class = SWIGV8_CreateClassTemplate("_exports_PTEID_CardVersionInfo");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_CardVersionInfo_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_CardVersionInfo_class);
#else
_exports_PTEID_CardVersionInfo_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_CardVersionInfo_class);
#endif
_exports_PTEID_CardVersionInfo_clientData.dtor = _wrap_delete_PTEID_CardVersionInfo;
if (SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_CardVersionInfo->clientdata = &_exports_PTEID_CardVersionInfo_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Sod_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Sod");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Sod_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Sod_class);
#else
_exports_PTEID_Sod_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Sod_class);
#endif
_exports_PTEID_Sod_clientData.dtor = _wrap_delete_PTEID_Sod;
if (SWIGTYPE_p_eIDMW__PTEID_Sod->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Sod->clientdata = &_exports_PTEID_Sod_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_EId_class = SWIGV8_CreateClassTemplate("_exports_PTEID_EId");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_EId_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_EId_class);
#else
_exports_PTEID_EId_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_EId_class);
#endif
_exports_PTEID_EId_clientData.dtor = _wrap_delete_PTEID_EId;
if (SWIGTYPE_p_eIDMW__PTEID_EId->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_EId->clientdata = &_exports_PTEID_EId_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Address_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Address");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Address_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Address_class);
#else
_exports_PTEID_Address_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Address_class);
#endif
_exports_PTEID_Address_clientData.dtor = _wrap_delete_PTEID_Address;
if (SWIGTYPE_p_eIDMW__PTEID_Address->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Address->clientdata = &_exports_PTEID_Address_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_CCXML_Doc_class = SWIGV8_CreateClassTemplate("_exports_PTEID_CCXML_Doc");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_CCXML_Doc_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_CCXML_Doc_class);
#else
_exports_PTEID_CCXML_Doc_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_CCXML_Doc_class);
#endif
_exports_PTEID_CCXML_Doc_clientData.dtor = _wrap_delete_PTEID_CCXML_Doc;
if (SWIGTYPE_p_eIDMW__PTEID_CCXML_Doc->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_CCXML_Doc->clientdata = &_exports_PTEID_CCXML_Doc_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Pins_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Pins");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Pins_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Pins_class);
#else
_exports_PTEID_Pins_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Pins_class);
#endif
_exports_PTEID_Pins_clientData.dtor = _wrap_delete_PTEID_Pins;
if (SWIGTYPE_p_eIDMW__PTEID_Pins->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Pins->clientdata = &_exports_PTEID_Pins_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Pin_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Pin");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Pin_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Pin_class);
#else
_exports_PTEID_Pin_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Pin_class);
#endif
_exports_PTEID_Pin_clientData.dtor = _wrap_delete_PTEID_Pin;
if (SWIGTYPE_p_eIDMW__PTEID_Pin->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Pin->clientdata = &_exports_PTEID_Pin_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Certificates_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Certificates");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Certificates_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Certificates_class);
#else
_exports_PTEID_Certificates_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Certificates_class);
#endif
_exports_PTEID_Certificates_clientData.dtor = _wrap_delete_PTEID_Certificates;
if (SWIGTYPE_p_eIDMW__PTEID_Certificates->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Certificates->clientdata = &_exports_PTEID_Certificates_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Certificate_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Certificate");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Certificate_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Certificate_class);
#else
_exports_PTEID_Certificate_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Certificate_class);
#endif
_exports_PTEID_Certificate_clientData.dtor = _wrap_delete_PTEID_Certificate;
if (SWIGTYPE_p_eIDMW__PTEID_Certificate->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Certificate->clientdata = &_exports_PTEID_Certificate_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Config_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Config");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Config_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Config_class);
#else
_exports_PTEID_Config_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Config_class);
#endif
_exports_PTEID_Config_clientData.dtor = _wrap_delete_PTEID_Config;
if (SWIGTYPE_p_eIDMW__PTEID_Config->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Config->clientdata = &_exports_PTEID_Config_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ID_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ID");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ID_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ID_class);
#else
_exports_PTEID_ID_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ID_class);
#endif
_exports_PTEID_ID_clientData.dtor = _wrap_delete_PTEID_ID;
if (SWIGTYPE_p_eIDMW__PTEID_ID->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ID->clientdata = &_exports_PTEID_ID_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ADDR_class = SWIGV8_CreateClassTemplate("_exports_PTEID_ADDR");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_ADDR_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_ADDR_class);
#else
_exports_PTEID_ADDR_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_ADDR_class);
#endif
_exports_PTEID_ADDR_clientData.dtor = _wrap_delete_PTEID_ADDR;
if (SWIGTYPE_p_eIDMW__PTEID_ADDR->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_ADDR->clientdata = &_exports_PTEID_ADDR_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_PIC_class = SWIGV8_CreateClassTemplate("_exports_PTEID_PIC");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_PIC_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_PIC_class);
#else
_exports_PTEID_PIC_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_PIC_class);
#endif
_exports_PTEID_PIC_clientData.dtor = _wrap_delete_PTEID_PIC;
if (SWIGTYPE_p_eIDMW__PTEID_PIC->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_PIC->clientdata = &_exports_PTEID_PIC_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Certif_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Certif");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Certif_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Certif_class);
#else
_exports_PTEID_Certif_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Certif_class);
#endif
_exports_PTEID_Certif_clientData.dtor = _wrap_delete_PTEID_Certif;
if (SWIGTYPE_p_eIDMW__PTEID_Certif->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Certif->clientdata = &_exports_PTEID_Certif_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Certifs_class = SWIGV8_CreateClassTemplate("_exports_PTEID_Certifs");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_Certifs_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_Certifs_class);
#else
_exports_PTEID_Certifs_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_Certifs_class);
#endif
_exports_PTEID_Certifs_clientData.dtor = _wrap_delete_PTEID_Certifs;
if (SWIGTYPE_p_eIDMW__PTEID_Certifs->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_Certifs->clientdata = &_exports_PTEID_Certifs_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEIDPin_class = SWIGV8_CreateClassTemplate("_exports_PTEIDPin");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEIDPin_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEIDPin_class);
#else
_exports_PTEIDPin_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEIDPin_class);
#endif
_exports_PTEIDPin_clientData.dtor = _wrap_delete_PTEIDPin;
if (SWIGTYPE_p_eIDMW__PTEIDPin->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEIDPin->clientdata = &_exports_PTEIDPin_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEIDPins_class = SWIGV8_CreateClassTemplate("_exports_PTEIDPins");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEIDPins_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEIDPins_class);
#else
_exports_PTEIDPins_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEIDPins_class);
#endif
_exports_PTEIDPins_clientData.dtor = _wrap_delete_PTEIDPins;
if (SWIGTYPE_p_eIDMW__PTEIDPins->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEIDPins->clientdata = &_exports_PTEIDPins_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_TokenInfo_class = SWIGV8_CreateClassTemplate("_exports_PTEID_TokenInfo");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_TokenInfo_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_TokenInfo_class);
#else
_exports_PTEID_TokenInfo_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_TokenInfo_class);
#endif
_exports_PTEID_TokenInfo_clientData.dtor = _wrap_delete_PTEID_TokenInfo;
if (SWIGTYPE_p_eIDMW__PTEID_TokenInfo->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_TokenInfo->clientdata = &_exports_PTEID_TokenInfo_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_PTEID_RSAPublicKey_class = SWIGV8_CreateClassTemplate("_exports_PTEID_RSAPublicKey");
#if (SWIG_V8_VERSION < 0x031900)
_exports_PTEID_RSAPublicKey_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_PTEID_RSAPublicKey_class);
#else
_exports_PTEID_RSAPublicKey_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_PTEID_RSAPublicKey_class);
#endif
_exports_PTEID_RSAPublicKey_clientData.dtor = _wrap_delete_PTEID_RSAPublicKey;
if (SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey->clientdata == 0) {
  SWIGTYPE_p_eIDMW__PTEID_RSAPublicKey->clientdata = &_exports_PTEID_RSAPublicKey_clientData;
}
v8::Handle<v8::FunctionTemplate> _exports_tProxyInfo_class = SWIGV8_CreateClassTemplate("_exports_tProxyInfo");
#if (SWIG_V8_VERSION < 0x031900)
_exports_tProxyInfo_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_exports_tProxyInfo_class);
#else
_exports_tProxyInfo_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _exports_tProxyInfo_class);
#endif
_exports_tProxyInfo_clientData.dtor = _wrap_delete_tProxyInfo;
if (SWIGTYPE_p_eIDMW__tProxyInfo->clientdata == 0) {
  SWIGTYPE_p_eIDMW__tProxyInfo->clientdata = &_exports_tProxyInfo_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddStaticVariable(exports_obj, "EIDMW_OK", _wrap_EIDMW_OK, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PARAM_BAD", _wrap_EIDMW_ERR_PARAM_BAD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PARAM_RANGE", _wrap_EIDMW_ERR_PARAM_RANGE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_BAD_PATH", _wrap_EIDMW_ERR_BAD_PATH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_ALGO_BAD", _wrap_EIDMW_ERR_ALGO_BAD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PIN_OPERATION", _wrap_EIDMW_ERR_PIN_OPERATION, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PIN_FORMAT", _wrap_EIDMW_ERR_PIN_FORMAT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_BAD_USAGE", _wrap_EIDMW_ERR_BAD_USAGE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CARD", _wrap_EIDMW_ERR_CARD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_NOT_AUTHENTICATED", _wrap_EIDMW_ERR_NOT_AUTHENTICATED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_NOT_SUPPORTED", _wrap_EIDMW_ERR_NOT_SUPPORTED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PIN_BAD", _wrap_EIDMW_ERR_PIN_BAD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PIN_BLOCKED", _wrap_EIDMW_ERR_PIN_BLOCKED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_NO_CARD", _wrap_EIDMW_ERR_NO_CARD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_BAD_P1P2", _wrap_EIDMW_ERR_BAD_P1P2, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CMD_NOT_ALLOWED", _wrap_EIDMW_ERR_CMD_NOT_ALLOWED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_FILE_NOT_FOUND", _wrap_EIDMW_ERR_FILE_NOT_FOUND, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_APPLET_VERSION_NOT_FOUND", _wrap_EIDMW_ERR_APPLET_VERSION_NOT_FOUND, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_NOT_ACTIVATED", _wrap_EIDMW_ERR_NOT_ACTIVATED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PINREF_NOT_FOUND", _wrap_EIDMW_ERR_PINREF_NOT_FOUND, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CARD_COMM", _wrap_EIDMW_ERR_CARD_COMM, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_NO_READER", _wrap_EIDMW_ERR_NO_READER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PINPAD", _wrap_EIDMW_ERR_PINPAD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CANT_CONNECT", _wrap_EIDMW_ERR_CANT_CONNECT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CARD_RESET", _wrap_EIDMW_ERR_CARD_RESET, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CARD_SHARING", _wrap_EIDMW_ERR_CARD_SHARING, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_NOT_TRANSACTED", _wrap_EIDMW_ERR_NOT_TRANSACTED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_LIMIT", _wrap_EIDMW_ERR_LIMIT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CHECK", _wrap_EIDMW_ERR_CHECK, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PCSC_LIB", _wrap_EIDMW_ERR_PCSC_LIB, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_ZLIB_RESOLVE", _wrap_EIDMW_ERR_ZLIB_RESOLVE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_UNKNOWN", _wrap_EIDMW_ERR_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_PINPAD_ERR", _wrap_EIDMW_PINPAD_ERR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_CANT_LOAD_LIB", _wrap_EIDMW_CANT_LOAD_LIB, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_MEMORY", _wrap_EIDMW_ERR_MEMORY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_DELETE_CACHE", _wrap_EIDMW_ERR_DELETE_CACHE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_CONF", _wrap_EIDMW_CONF, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_CACHE_TAMPERED", _wrap_EIDMW_CACHE_TAMPERED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SOCKET_CREATE", _wrap_EIDMW_ERR_SOCKET_CREATE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SOCKET_SEND", _wrap_EIDMW_ERR_SOCKET_SEND, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SOCKET_RECV", _wrap_EIDMW_ERR_SOCKET_RECV, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SOCKET_GETHOST", _wrap_EIDMW_ERR_SOCKET_GETHOST, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SOCKET_CONNECT", _wrap_EIDMW_ERR_SOCKET_CONNECT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SOCKET_SOCKET", _wrap_EIDMW_ERR_SOCKET_SOCKET, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SOCKET_BIND", _wrap_EIDMW_ERR_SOCKET_BIND, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SOCKET_ACCEPT", _wrap_EIDMW_ERR_SOCKET_ACCEPT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_PIN_CANCEL", _wrap_EIDMW_ERR_PIN_CANCEL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_TIMEOUT", _wrap_EIDMW_ERR_TIMEOUT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_NEW_PINS_DIFFER", _wrap_EIDMW_NEW_PINS_DIFFER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_WRONG_PIN_FORMAT", _wrap_EIDMW_WRONG_PIN_FORMAT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_WRONG_ASN1_FORMAT", _wrap_EIDMW_WRONG_ASN1_FORMAT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_XERCES_INIT_ERROR", _wrap_EIDMW_XERCES_INIT_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_FILE_NOT_OPENED", _wrap_EIDMW_FILE_NOT_OPENED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_PERMISSION_DENIED", _wrap_EIDMW_PERMISSION_DENIED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_INVALID_PATH", _wrap_EIDMW_INVALID_PATH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_TOO_MANY_OPENED_FILES", _wrap_EIDMW_TOO_MANY_OPENED_FILES, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_DIR_NOT_OPENED", _wrap_EIDMW_DIR_NOT_OPENED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_INTERRUPTION", _wrap_EIDMW_INTERRUPTION, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_OVERFLOW", _wrap_EIDMW_OVERFLOW, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERROR_IO", _wrap_EIDMW_ERROR_IO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_LOGGER_APPLEAVING", _wrap_EIDMW_ERR_LOGGER_APPLEAVING, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_DOCTYPE_UNKNOWN", _wrap_EIDMW_ERR_DOCTYPE_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CARDTYPE_BAD", _wrap_EIDMW_ERR_CARDTYPE_BAD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CARDTYPE_UNKNOWN", _wrap_EIDMW_ERR_CARDTYPE_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CERT_NOISSUER", _wrap_EIDMW_ERR_CERT_NOISSUER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_RELEASE_NEEDED", _wrap_EIDMW_ERR_RELEASE_NEEDED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_BAD_TRANSACTION", _wrap_EIDMW_ERR_BAD_TRANSACTION, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_FILETYPE_UNKNOWN", _wrap_EIDMW_ERR_FILETYPE_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CARD_CHANGED", _wrap_EIDMW_ERR_CARD_CHANGED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_READERSET_CHANGED", _wrap_EIDMW_ERR_READERSET_CHANGED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_NOT_ALLOW_BY_USER", _wrap_EIDMW_ERR_NOT_ALLOW_BY_USER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CERT_NOCRL", _wrap_EIDMW_ERR_CERT_NOCRL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CERT_NOOCSP", _wrap_EIDMW_ERR_CERT_NOOCSP, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_CERT_NOROOT", _wrap_EIDMW_ERR_CERT_NOROOT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_USER_MUST_ANSWER", _wrap_EIDMW_ERR_USER_MUST_ANSWER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SOD_UNEXPECTED_VALUE", _wrap_EIDMW_SOD_UNEXPECTED_VALUE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SOD_UNEXPECTED_ASN1_TAG", _wrap_EIDMW_SOD_UNEXPECTED_ASN1_TAG, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SOD_UNEXPECTED_ALGO_OID", _wrap_EIDMW_SOD_UNEXPECTED_ALGO_OID, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SOD_ERR_HASH_NO_MATCH_ID", _wrap_EIDMW_SOD_ERR_HASH_NO_MATCH_ID, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SOD_ERR_HASH_NO_MATCH_ADDRESS", _wrap_EIDMW_SOD_ERR_HASH_NO_MATCH_ADDRESS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SOD_ERR_HASH_NO_MATCH_PICTURE", _wrap_EIDMW_SOD_ERR_HASH_NO_MATCH_PICTURE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SOD_ERR_HASH_NO_MATCH_PUBLIC_KEY", _wrap_EIDMW_SOD_ERR_HASH_NO_MATCH_PUBLIC_KEY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SOD_ERR_VERIFY_SOD_SIGN", _wrap_EIDMW_SOD_ERR_VERIFY_SOD_SIGN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_OTP_CONNECTION_ERROR", _wrap_EIDMW_OTP_CONNECTION_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_OTP_PROTOCOL_ERROR", _wrap_EIDMW_OTP_PROTOCOL_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_OTP_CERTIFICATE_ERROR", _wrap_EIDMW_OTP_CERTIFICATE_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_OTP_UNKNOWN_ERROR", _wrap_EIDMW_OTP_UNKNOWN_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SAM_CONNECTION_ERROR", _wrap_EIDMW_SAM_CONNECTION_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SAM_PROTOCOL_ERROR", _wrap_EIDMW_SAM_PROTOCOL_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_SAM_UNKNOWN_ERROR", _wrap_EIDMW_SAM_UNKNOWN_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SYSTEM", _wrap_EIDMW_ERR_SYSTEM, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "EIDMW_ERR_SIGNAL", _wrap_EIDMW_ERR_SIGNAL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CARDTYPE_UNKNOWN", _wrap_eIDMW_PTEID_CARDTYPE_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CARDTYPE_IAS07", _wrap_eIDMW_PTEID_CARDTYPE_IAS07, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CARDTYPE_IAS101", _wrap_eIDMW_PTEID_CARDTYPE_IAS101, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DOCTYPE_ID", _wrap_eIDMW_PTEID_DOCTYPE_ID, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DOCTYPE_ADDRESS", _wrap_eIDMW_PTEID_DOCTYPE_ADDRESS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DOCTYPE_SOD", _wrap_eIDMW_PTEID_DOCTYPE_SOD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DOCTYPE_INFO", _wrap_eIDMW_PTEID_DOCTYPE_INFO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DOCTYPE_PINS", _wrap_eIDMW_PTEID_DOCTYPE_PINS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DOCTYPE_CERTIFICATES", _wrap_eIDMW_PTEID_DOCTYPE_CERTIFICATES, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_ID", _wrap_eIDMW_PTEID_RAWDATA_ID, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_ID_SIG", _wrap_eIDMW_PTEID_RAWDATA_ID_SIG, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_TRACE", _wrap_eIDMW_PTEID_RAWDATA_TRACE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_ADDR", _wrap_eIDMW_PTEID_RAWDATA_ADDR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_ADDR_SIG", _wrap_eIDMW_PTEID_RAWDATA_ADDR_SIG, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_SOD", _wrap_eIDMW_PTEID_RAWDATA_SOD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_CARD_INFO", _wrap_eIDMW_PTEID_RAWDATA_CARD_INFO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_TOKEN_INFO", _wrap_eIDMW_PTEID_RAWDATA_TOKEN_INFO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_CHALLENGE", _wrap_eIDMW_PTEID_RAWDATA_CHALLENGE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_RESPONSE", _wrap_eIDMW_PTEID_RAWDATA_RESPONSE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_RAWDATA_PERSO_DATA", _wrap_eIDMW_PTEID_RAWDATA_PERSO_DATA, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PIN_USG_UNKNOWN", _wrap_eIDMW_PTEID_PIN_USG_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PIN_USG_AUTH", _wrap_eIDMW_PTEID_PIN_USG_AUTH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PIN_USG_SIGN", _wrap_eIDMW_PTEID_PIN_USG_SIGN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PIN_USG_ADDRESS", _wrap_eIDMW_PTEID_PIN_USG_ADDRESS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_VALIDATION_PROCESS_NONE", _wrap_eIDMW_PTEID_VALIDATION_PROCESS_NONE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_VALIDATION_LEVEL_NONE", _wrap_eIDMW_PTEID_VALIDATION_LEVEL_NONE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_VALIDATION_LEVEL_OPTIONAL", _wrap_eIDMW_PTEID_VALIDATION_LEVEL_OPTIONAL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_VALIDATION_LEVEL_MANDATORY", _wrap_eIDMW_PTEID_VALIDATION_LEVEL_MANDATORY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_STATUS_UNKNOWN", _wrap_eIDMW_PTEID_CERTIF_STATUS_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_STATUS_REVOKED", _wrap_eIDMW_PTEID_CERTIF_STATUS_REVOKED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_STATUS_TEST", _wrap_eIDMW_PTEID_CERTIF_STATUS_TEST, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_STATUS_DATE", _wrap_eIDMW_PTEID_CERTIF_STATUS_DATE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_STATUS_CONNECT", _wrap_eIDMW_PTEID_CERTIF_STATUS_CONNECT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_STATUS_ISSUER", _wrap_eIDMW_PTEID_CERTIF_STATUS_ISSUER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_STATUS_ERROR", _wrap_eIDMW_PTEID_CERTIF_STATUS_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_STATUS_VALID", _wrap_eIDMW_PTEID_CERTIF_STATUS_VALID, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_TYPE_UNKNOWN", _wrap_eIDMW_PTEID_CERTIF_TYPE_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_TYPE_ROOT", _wrap_eIDMW_PTEID_CERTIF_TYPE_ROOT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_TYPE_ROOT_SIGN", _wrap_eIDMW_PTEID_CERTIF_TYPE_ROOT_SIGN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_TYPE_ROOT_AUTH", _wrap_eIDMW_PTEID_CERTIF_TYPE_ROOT_AUTH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_TYPE_AUTHENTICATION", _wrap_eIDMW_PTEID_CERTIF_TYPE_AUTHENTICATION, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CERTIF_TYPE_SIGNATURE", _wrap_eIDMW_PTEID_CERTIF_TYPE_SIGNATURE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ALGO_MD5", _wrap_eIDMW_PTEID_ALGO_MD5, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ALGO_SHA1", _wrap_eIDMW_PTEID_ALGO_SHA1, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_FILETYPE_UNKNOWN", _wrap_eIDMW_PTEID_FILETYPE_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_FILETYPE_TLV", _wrap_eIDMW_PTEID_FILETYPE_TLV, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_FILETYPE_XML", _wrap_eIDMW_PTEID_FILETYPE_XML, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_FILETYPE_CSV", _wrap_eIDMW_PTEID_FILETYPE_CSV, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GENERAL_INSTALLDIR", _wrap_eIDMW_PTEID_PARAM_GENERAL_INSTALLDIR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GENERAL_INSTALL_PRO_DIR", _wrap_eIDMW_PTEID_PARAM_GENERAL_INSTALL_PRO_DIR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GENERAL_INSTALL_SDK_DIR", _wrap_eIDMW_PTEID_PARAM_GENERAL_INSTALL_SDK_DIR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GENERAL_CACHEDIR", _wrap_eIDMW_PTEID_PARAM_GENERAL_CACHEDIR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GENERAL_LANGUAGE", _wrap_eIDMW_PTEID_PARAM_GENERAL_LANGUAGE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_LOGGING_DIRNAME", _wrap_eIDMW_PTEID_PARAM_LOGGING_DIRNAME, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_LOGGING_PREFIX", _wrap_eIDMW_PTEID_PARAM_LOGGING_PREFIX, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_LOGGING_FILENUMBER", _wrap_eIDMW_PTEID_PARAM_LOGGING_FILENUMBER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_LOGGING_FILESIZE", _wrap_eIDMW_PTEID_PARAM_LOGGING_FILESIZE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_LOGGING_LEVEL", _wrap_eIDMW_PTEID_PARAM_LOGGING_LEVEL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_LOGGING_GROUP", _wrap_eIDMW_PTEID_PARAM_LOGGING_GROUP, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_CERTCACHE_CACHEFILE", _wrap_eIDMW_PTEID_PARAM_CERTCACHE_CACHEFILE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_CERTCACHE_LINENUMB", _wrap_eIDMW_PTEID_PARAM_CERTCACHE_LINENUMB, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_CERTCACHE_VALIDITY", _wrap_eIDMW_PTEID_PARAM_CERTCACHE_VALIDITY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_CERTCACHE_WAITDELAY", _wrap_eIDMW_PTEID_PARAM_CERTCACHE_WAITDELAY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_PROXY_HOST", _wrap_eIDMW_PTEID_PARAM_PROXY_HOST, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_PROXY_PORT", _wrap_eIDMW_PTEID_PARAM_PROXY_PORT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_PROXY_PACFILE", _wrap_eIDMW_PTEID_PARAM_PROXY_PACFILE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_SECURITY_SINGLESIGNON", _wrap_eIDMW_PTEID_PARAM_SECURITY_SINGLESIGNON, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_STARTWIN", _wrap_eIDMW_PTEID_PARAM_GUITOOL_STARTWIN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_STARTMINI", _wrap_eIDMW_PTEID_PARAM_GUITOOL_STARTMINI, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_SHOWPIC", _wrap_eIDMW_PTEID_PARAM_GUITOOL_SHOWPIC, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_SHOWTBAR", _wrap_eIDMW_PTEID_PARAM_GUITOOL_SHOWTBAR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_VIRTUALKBD", _wrap_eIDMW_PTEID_PARAM_GUITOOL_VIRTUALKBD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_AUTOCARDREAD", _wrap_eIDMW_PTEID_PARAM_GUITOOL_AUTOCARDREAD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_CARDREADNUMB", _wrap_eIDMW_PTEID_PARAM_GUITOOL_CARDREADNUMB, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_REGCERTIF", _wrap_eIDMW_PTEID_PARAM_GUITOOL_REGCERTIF, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_REMOVECERTIF", _wrap_eIDMW_PTEID_PARAM_GUITOOL_REMOVECERTIF, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_FILESAVE", _wrap_eIDMW_PTEID_PARAM_GUITOOL_FILESAVE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_XSIGN_TSAURL", _wrap_eIDMW_PTEID_PARAM_XSIGN_TSAURL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_XSIGN_ONLINE", _wrap_eIDMW_PTEID_PARAM_XSIGN_ONLINE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_XSIGN_WORKINGDIR", _wrap_eIDMW_PTEID_PARAM_XSIGN_WORKINGDIR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_XSIGN_TIMEOUT", _wrap_eIDMW_PTEID_PARAM_XSIGN_TIMEOUT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_GUITOOL_SHOWNOTIFICATION", _wrap_eIDMW_PTEID_PARAM_GUITOOL_SHOWNOTIFICATION, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_PROXY_CONNECT_TIMEOUT", _wrap_eIDMW_PTEID_PARAM_PROXY_CONNECT_TIMEOUT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PARAM_AUTOUPDATES_URL", _wrap_eIDMW_PTEID_PARAM_AUTOUPDATES_URL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_LOG_LEVEL_CRITICAL", _wrap_eIDMW_PTEID_LOG_LEVEL_CRITICAL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_LOG_LEVEL_ERROR", _wrap_eIDMW_PTEID_LOG_LEVEL_ERROR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_LOG_LEVEL_WARNING", _wrap_eIDMW_PTEID_LOG_LEVEL_WARNING, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_LOG_LEVEL_INFO", _wrap_eIDMW_PTEID_LOG_LEVEL_INFO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_LOG_LEVEL_DEBUG", _wrap_eIDMW_PTEID_LOG_LEVEL_DEBUG, JS_veto_set_variable);SWIGV8_AddMemberFunction(_exports_PTEID_Exception_class, "GetError", _wrap_PTEID_Exception_GetError);SWIGV8_AddStaticVariable(exports_obj, "XML_ROOT_ELEMENT", _wrap_XML_ROOT_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ROOT_ELEMENT_ATTR_TIMESTAMP", _wrap_XML_ROOT_ELEMENT_ATTR_TIMESTAMP, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ROOT_ELEMENT_ATTR_SERVERNAME", _wrap_XML_ROOT_ELEMENT_ATTR_SERVERNAME, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ROOT_ELEMENT_ATTR_SERVERADDRESS", _wrap_XML_ROOT_ELEMENT_ATTR_SERVERADDRESS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ROOT_ELEMENT_ATTR_TOKENID", _wrap_XML_ROOT_ELEMENT_ATTR_TOKENID, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_PHOTO_ELEMENT", _wrap_XML_PHOTO_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_BASIC_INFO_ELEMENT", _wrap_XML_BASIC_INFO_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_NAME_ELEMENT", _wrap_XML_NAME_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_GIVEN_NAME_ELEMENT", _wrap_XML_GIVEN_NAME_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SURNAME_ELEMENT", _wrap_XML_SURNAME_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_NIC_ELEMENT", _wrap_XML_NIC_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_EXPIRY_DATE_ELEMENT", _wrap_XML_EXPIRY_DATE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_CIVIL_INFO_ELEMENT", _wrap_XML_CIVIL_INFO_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_GENDER_ELEMENT", _wrap_XML_GENDER_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_HEIGHT_ELEMENT", _wrap_XML_HEIGHT_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_NATIONALITY_ELEMENT", _wrap_XML_NATIONALITY_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DATE_OF_BIRTH_ELEMENT", _wrap_XML_DATE_OF_BIRTH_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_GIVEN_NAME_FATHER_ELEMENT", _wrap_XML_GIVEN_NAME_FATHER_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SURNAME_FATHER_ELEMENT", _wrap_XML_SURNAME_FATHER_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_GIVEN_NAME_MOTHER_ELEMENT", _wrap_XML_GIVEN_NAME_MOTHER_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SURNAME_MOTHER_ELEMENT", _wrap_XML_SURNAME_MOTHER_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ACCIDENTAL_INDICATIONS_ELEMENT", _wrap_XML_ACCIDENTAL_INDICATIONS_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_IDENTIFICATION_NUMBERS_ELEMENT", _wrap_XML_IDENTIFICATION_NUMBERS_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DOCUMENT_NO_ELEMENT", _wrap_XML_DOCUMENT_NO_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_TAX_NO_ELEMENT", _wrap_XML_TAX_NO_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SOCIAL_SECURITY_NO_ELEMENT", _wrap_XML_SOCIAL_SECURITY_NO_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_HEALTH_NO_ELEMENT", _wrap_XML_HEALTH_NO_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_MRZ1_ELEMENT", _wrap_XML_MRZ1_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_MRZ2_ELEMENT", _wrap_XML_MRZ2_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_MRZ3_ELEMENT", _wrap_XML_MRZ3_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_CARD_VALUES_ELEMENT", _wrap_XML_CARD_VALUES_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_CARD_VERSION_ELEMENT", _wrap_XML_CARD_VERSION_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_CARD_NUMBER_PAN_ELEMENT", _wrap_XML_CARD_NUMBER_PAN_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ISSUING_DATE_ELEMENT", _wrap_XML_ISSUING_DATE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ISSUING_ENTITY_ELEMENT", _wrap_XML_ISSUING_ENTITY_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DOCUMENT_TYPE_ELEMENT", _wrap_XML_DOCUMENT_TYPE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_LOCAL_OF_REQUEST_ELEMENT", _wrap_XML_LOCAL_OF_REQUEST_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_VERSION_ELEMENT", _wrap_XML_VERSION_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ADDRESS_ELEMENT", _wrap_XML_ADDRESS_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DISTRICT_ELEMENT", _wrap_XML_DISTRICT_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_MUNICIPALITY_ELEMENT", _wrap_XML_MUNICIPALITY_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_CIVIL_PARISH_ELEMENT", _wrap_XML_CIVIL_PARISH_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ABBR_STREET_TYPE_ELEMENT", _wrap_XML_ABBR_STREET_TYPE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_STREET_TYPE_ELEMENT", _wrap_XML_STREET_TYPE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_STREET_NAME_ELEMENT", _wrap_XML_STREET_NAME_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ABBR_BUILDING_TYPE_ELEMENT", _wrap_XML_ABBR_BUILDING_TYPE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_BUILDING_TYPE_ELEMENT", _wrap_XML_BUILDING_TYPE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DOOR_NO_ELEMENT", _wrap_XML_DOOR_NO_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FLOOR_ELEMENT", _wrap_XML_FLOOR_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SIDE_ELEMENT", _wrap_XML_SIDE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_PLACE_ELEMENT", _wrap_XML_PLACE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_LOCALITY_ELEMENT", _wrap_XML_LOCALITY_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ZIP4_ELEMENT", _wrap_XML_ZIP4_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ZIP3_ELEMENT", _wrap_XML_ZIP3_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_POSTAL_LOCALITY_ELEMENT", _wrap_XML_POSTAL_LOCALITY_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_PERSONAL_NOTES_ELEMENT", _wrap_XML_PERSONAL_NOTES_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_COUNTRY_ELEMENT", _wrap_XML_FOREIGN_COUNTRY_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_ADDRESS_ELEMENT", _wrap_XML_FOREIGN_ADDRESS_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_CITY_ELEMENT", _wrap_XML_FOREIGN_CITY_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_REGION_ELEMENT", _wrap_XML_FOREIGN_REGION_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_LOCALITY_ELEMENT", _wrap_XML_FOREIGN_LOCALITY_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_POSTAL_CODE_ELEMENT", _wrap_XML_FOREIGN_POSTAL_CODE_ELEMENT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ROOT_S", _wrap_XML_ROOT_S, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ROOT_E", _wrap_XML_ROOT_E, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_PHOTO", _wrap_eIDMW_XML_PHOTO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_NAME", _wrap_eIDMW_XML_NAME, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_GIVEN_NAME", _wrap_eIDMW_XML_GIVEN_NAME, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SURNAME", _wrap_eIDMW_XML_SURNAME, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_NIC", _wrap_eIDMW_XML_NIC, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_EXPIRY_DATE", _wrap_eIDMW_XML_EXPIRY_DATE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_GENDER", _wrap_eIDMW_XML_GENDER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_HEIGHT", _wrap_eIDMW_XML_HEIGHT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_NATIONALITY", _wrap_eIDMW_XML_NATIONALITY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DATE_OF_BIRTH", _wrap_eIDMW_XML_DATE_OF_BIRTH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_GIVEN_NAME_FATHER", _wrap_eIDMW_XML_GIVEN_NAME_FATHER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SURNAME_FATHER", _wrap_eIDMW_XML_SURNAME_FATHER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_GIVEN_NAME_MOTHER", _wrap_eIDMW_XML_GIVEN_NAME_MOTHER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SURNAME_MOTHER", _wrap_eIDMW_XML_SURNAME_MOTHER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ACCIDENTAL_INDICATIONS", _wrap_eIDMW_XML_ACCIDENTAL_INDICATIONS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DOCUMENT_NO", _wrap_eIDMW_XML_DOCUMENT_NO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_TAX_NO", _wrap_eIDMW_XML_TAX_NO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SOCIAL_SECURITY_NO", _wrap_eIDMW_XML_SOCIAL_SECURITY_NO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_HEALTH_NO", _wrap_eIDMW_XML_HEALTH_NO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_MRZ1", _wrap_eIDMW_XML_MRZ1, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_MRZ2", _wrap_eIDMW_XML_MRZ2, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_MRZ3", _wrap_eIDMW_XML_MRZ3, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_CARD_VERSION", _wrap_eIDMW_XML_CARD_VERSION, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_CARD_NUMBER_PAN", _wrap_eIDMW_XML_CARD_NUMBER_PAN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ISSUING_DATE", _wrap_eIDMW_XML_ISSUING_DATE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ISSUING_ENTITY", _wrap_eIDMW_XML_ISSUING_ENTITY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DOCUMENT_TYPE", _wrap_eIDMW_XML_DOCUMENT_TYPE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_LOCAL_OF_REQUEST", _wrap_eIDMW_XML_LOCAL_OF_REQUEST, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_VERSION", _wrap_eIDMW_XML_VERSION, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DISTRICT", _wrap_eIDMW_XML_DISTRICT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_MUNICIPALITY", _wrap_eIDMW_XML_MUNICIPALITY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_CIVIL_PARISH", _wrap_eIDMW_XML_CIVIL_PARISH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ABBR_STREET_TYPE", _wrap_eIDMW_XML_ABBR_STREET_TYPE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_STREET_TYPE", _wrap_eIDMW_XML_STREET_TYPE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_STREET_NAME", _wrap_eIDMW_XML_STREET_NAME, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ABBR_BUILDING_TYPE", _wrap_eIDMW_XML_ABBR_BUILDING_TYPE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_BUILDING_TYPE", _wrap_eIDMW_XML_BUILDING_TYPE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_DOOR_NO", _wrap_eIDMW_XML_DOOR_NO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FLOOR", _wrap_eIDMW_XML_FLOOR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_SIDE", _wrap_eIDMW_XML_SIDE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_PLACE", _wrap_eIDMW_XML_PLACE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_LOCALITY", _wrap_eIDMW_XML_LOCALITY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ZIP4", _wrap_eIDMW_XML_ZIP4, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_ZIP3", _wrap_eIDMW_XML_ZIP3, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_POSTAL_LOCALITY", _wrap_eIDMW_XML_POSTAL_LOCALITY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_PERSONAL_NOTES", _wrap_eIDMW_XML_PERSONAL_NOTES, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_COUNTRY", _wrap_eIDMW_XML_FOREIGN_COUNTRY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_ADDRESS", _wrap_eIDMW_XML_FOREIGN_ADDRESS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_CITY", _wrap_eIDMW_XML_FOREIGN_CITY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_REGION", _wrap_eIDMW_XML_FOREIGN_REGION, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_LOCALITY", _wrap_eIDMW_XML_FOREIGN_LOCALITY, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "XML_FOREIGN_POSTAL_CODE", _wrap_eIDMW_XML_FOREIGN_POSTAL_CODE, JS_veto_set_variable);SWIGV8_AddMemberFunction(_exports_PTEID_ByteArray_class, "Append", _wrap_PTEID_ByteArray_Append);SWIGV8_AddMemberFunction(_exports_PTEID_ByteArray_class, "Clear", _wrap_PTEID_ByteArray_Clear);SWIGV8_AddMemberFunction(_exports_PTEID_ByteArray_class, "Equals", _wrap_PTEID_ByteArray_Equals);SWIGV8_AddMemberFunction(_exports_PTEID_ByteArray_class, "Size", _wrap_PTEID_ByteArray_Size);SWIGV8_AddMemberFunction(_exports_PTEID_ByteArray_class, "GetBytes", _wrap_PTEID_ByteArray_GetBytes);SWIGV8_AddMemberFunction(_exports_PTEID_ByteArray_class, "writeToFile", _wrap_PTEID_ByteArray_writeToFile);SWIGV8_AddMemberFunction(_exports_PTEID_ByteArray_class, "assign", _wrap_PTEID_ByteArray_assign);SWIGV8_AddMemberFunction(_exports_PTEID_Photo_class, "getphotoRAW", _wrap_PTEID_Photo_getphotoRAW);SWIGV8_AddMemberFunction(_exports_PTEID_Photo_class, "getphoto", _wrap_PTEID_Photo_getphoto);SWIGV8_AddMemberFunction(_exports_PTEID_Photo_class, "getphotoCbeff", _wrap_PTEID_Photo_getphotoCbeff);SWIGV8_AddMemberFunction(_exports_PTEID_Photo_class, "getphotoFacialrechdr", _wrap_PTEID_Photo_getphotoFacialrechdr);SWIGV8_AddMemberFunction(_exports_PTEID_Photo_class, "getphotoFacialinfo", _wrap_PTEID_Photo_getphotoFacialinfo);SWIGV8_AddMemberFunction(_exports_PTEID_Photo_class, "getphotoImageinfo", _wrap_PTEID_Photo_getphotoImageinfo);SWIGV8_AddMemberFunction(_exports_PTEID_PublicKey_class, "getCardAuthKeyModulus", _wrap_PTEID_PublicKey_getCardAuthKeyModulus);SWIGV8_AddMemberFunction(_exports_PTEID_PublicKey_class, "getCardAuthKeyExponent", _wrap_PTEID_PublicKey_getCardAuthKeyExponent);SWIGV8_AddStaticVariable(exports_obj, "PTEID_OK", _wrap_PTEID_OK, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_BAD_PARAM", _wrap_PTEID_E_BAD_PARAM, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_INTERNAL", _wrap_PTEID_E_INTERNAL, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_INSUFFICIENT_BUFFER", _wrap_PTEID_E_INSUFFICIENT_BUFFER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_KEYPAD_CANCELLED", _wrap_PTEID_E_KEYPAD_CANCELLED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_KEYPAD_TIMEOUT", _wrap_PTEID_E_KEYPAD_TIMEOUT, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_KEYPAD_PIN_MISMATCH", _wrap_PTEID_E_KEYPAD_PIN_MISMATCH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_KEYPAD_MSG_TOO_LONG", _wrap_PTEID_E_KEYPAD_MSG_TOO_LONG, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_INVALID_PIN_LENGTH", _wrap_PTEID_E_INVALID_PIN_LENGTH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_NOT_INITIALIZED", _wrap_PTEID_E_NOT_INITIALIZED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_UNKNOWN", _wrap_PTEID_E_UNKNOWN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_FILE_NOT_FOUND", _wrap_PTEID_E_FILE_NOT_FOUND, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_E_USER_CANCELLED", _wrap_PTEID_E_USER_CANCELLED, JS_veto_set_variable);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "idData", _wrap_PTEID_RawData_Eid_idData_get, _wrap_PTEID_RawData_Eid_idData_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "idSigData", _wrap_PTEID_RawData_Eid_idSigData_get, _wrap_PTEID_RawData_Eid_idSigData_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "addrData", _wrap_PTEID_RawData_Eid_addrData_get, _wrap_PTEID_RawData_Eid_addrData_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "addrSigData", _wrap_PTEID_RawData_Eid_addrSigData_get, _wrap_PTEID_RawData_Eid_addrSigData_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "sodData", _wrap_PTEID_RawData_Eid_sodData_get, _wrap_PTEID_RawData_Eid_sodData_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "cardData", _wrap_PTEID_RawData_Eid_cardData_get, _wrap_PTEID_RawData_Eid_cardData_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "tokenInfo", _wrap_PTEID_RawData_Eid_tokenInfo_get, _wrap_PTEID_RawData_Eid_tokenInfo_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "certRN", _wrap_PTEID_RawData_Eid_certRN_get, _wrap_PTEID_RawData_Eid_certRN_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "challenge", _wrap_PTEID_RawData_Eid_challenge_get, _wrap_PTEID_RawData_Eid_challenge_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "response", _wrap_PTEID_RawData_Eid_response_get, _wrap_PTEID_RawData_Eid_response_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "persoData", _wrap_PTEID_RawData_Eid_persoData_get, _wrap_PTEID_RawData_Eid_persoData_set);SWIGV8_AddMemberVariable(_exports_PTEID_RawData_Eid_class, "trace", _wrap_PTEID_RawData_Eid_trace_get, _wrap_PTEID_RawData_Eid_trace_set);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "releaseReaders", _wrap_PTEID_ReaderSet_releaseReaders);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "isReadersChanged", _wrap_PTEID_ReaderSet_isReadersChanged);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "readerList", _wrap_PTEID_ReaderSet_readerList);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "getReader", _wrap_PTEID_ReaderSet_getReader);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "getReaderByName", _wrap_PTEID_ReaderSet_getReaderByName);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "readerCount", _wrap_PTEID_ReaderSet_readerCount);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "getReaderName", _wrap_PTEID_ReaderSet_getReaderName);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "getReaderByNum", _wrap_PTEID_ReaderSet_getReaderByNum);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "getReaderByCardSerialNumber", _wrap_PTEID_ReaderSet_getReaderByCardSerialNumber);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderSet_class, "flushCache", _wrap_PTEID_ReaderSet_flushCache);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "getName", _wrap_PTEID_ReaderContext_getName);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "isCardPresent", _wrap_PTEID_ReaderContext_isCardPresent);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "releaseCard", _wrap_PTEID_ReaderContext_releaseCard);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "isCardChanged", _wrap_PTEID_ReaderContext_isCardChanged);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "getCardType", _wrap_PTEID_ReaderContext_getCardType);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "getCard", _wrap_PTEID_ReaderContext_getCard);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "getEIDCard", _wrap_PTEID_ReaderContext_getEIDCard);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "SetEventCallback", _wrap_PTEID_ReaderContext_SetEventCallback);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "StopEventCallback", _wrap_PTEID_ReaderContext_StopEventCallback);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "BeginTransaction", _wrap_PTEID_ReaderContext_BeginTransaction);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "EndTransaction", _wrap_PTEID_ReaderContext_EndTransaction);SWIGV8_AddMemberFunction(_exports_PTEID_ReaderContext_class, "isVirtualReader", _wrap_PTEID_ReaderContext_isVirtualReader);SWIGV8_AddMemberFunction(_exports_PTEID_Card_class, "getType", _wrap_PTEID_Card_getType);SWIGV8_AddMemberFunction(_exports_PTEID_Card_class, "getDocument", _wrap_PTEID_Card_getDocument);SWIGV8_AddMemberFunction(_exports_PTEID_Card_class, "getRawData", _wrap_PTEID_Card_getRawData);SWIGV8_AddMemberFunction(_exports_PTEID_Card_class, "sendAPDU", _wrap_PTEID_Card_sendAPDU);SWIGV8_AddMemberFunction(_exports_PTEID_Card_class, "Sign", _wrap_PTEID_Card_Sign);SWIGV8_AddMemberFunction(_exports_PTEID_Card_class, "readFile", _wrap_PTEID_Card_readFile);SWIGV8_AddMemberFunction(_exports_PTEID_Card_class, "writeFile", _wrap_PTEID_Card_writeFile);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "selectApplication", _wrap_PTEID_SmartCard_selectApplication);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "sendAPDU", _wrap_PTEID_SmartCard_sendAPDU);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "readFile", _wrap_PTEID_SmartCard_readFile);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "writeFile", _wrap_PTEID_SmartCard_writeFile);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "pinCount", _wrap_PTEID_SmartCard_pinCount);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "getPins", _wrap_PTEID_SmartCard_getPins);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "certificateCount", _wrap_PTEID_SmartCard_certificateCount);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "getCertificates", _wrap_PTEID_SmartCard_getCertificates);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "getChallenge", _wrap_PTEID_SmartCard_getChallenge);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "getChallengeResponse", _wrap_PTEID_SmartCard_getChallengeResponse);SWIGV8_AddMemberFunction(_exports_PTEID_SmartCard_class, "verifyChallengeResponse", _wrap_PTEID_SmartCard_verifyChallengeResponse);SWIGV8_AddMemberFunction(_exports_PTEID_PDFSignature_class, "addToBatchSigning", _wrap_PTEID_PDFSignature_addToBatchSigning);SWIGV8_AddMemberFunction(_exports_PTEID_PDFSignature_class, "getPageCount", _wrap_PTEID_PDFSignature_getPageCount);SWIGV8_AddMemberFunction(_exports_PTEID_PDFSignature_class, "enableTimestamp", _wrap_PTEID_PDFSignature_enableTimestamp);SWIGV8_AddMemberFunction(_exports_PTEID_PDFSignature_class, "getOccupiedSectors", _wrap_PTEID_PDFSignature_getOccupiedSectors);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "isTestCard", _wrap_PTEID_EIDCard_isTestCard);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getAllowTestCard", _wrap_PTEID_EIDCard_getAllowTestCard);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "setAllowTestCard", _wrap_PTEID_EIDCard_setAllowTestCard);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getDocument", _wrap_PTEID_EIDCard_getDocument);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getXmlCCDoc", _wrap_PTEID_EIDCard_getXmlCCDoc);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getID", _wrap_PTEID_EIDCard_getID);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getAddr", _wrap_PTEID_EIDCard_getAddr);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getSod", _wrap_PTEID_EIDCard_getSod);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getVersionInfo", _wrap_PTEID_EIDCard_getVersionInfo);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "writePersonalNotes", _wrap_PTEID_EIDCard_writePersonalNotes);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "readPersonalNotes", _wrap_PTEID_EIDCard_readPersonalNotes);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getCert", _wrap_PTEID_EIDCard_getCert);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRoot", _wrap_PTEID_EIDCard_getRoot);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getCA", _wrap_PTEID_EIDCard_getCA);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getSignature", _wrap_PTEID_EIDCard_getSignature);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getAuthentication", _wrap_PTEID_EIDCard_getAuthentication);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRootCAPubKey", _wrap_PTEID_EIDCard_getRootCAPubKey);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "isActive", _wrap_PTEID_EIDCard_isActive);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "doSODCheck", _wrap_PTEID_EIDCard_doSODCheck);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "Activate", _wrap_PTEID_EIDCard_Activate);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "SignXades", _wrap_PTEID_EIDCard_SignXades);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "SignXadesT", _wrap_PTEID_EIDCard_SignXadesT);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "SignXadesA", _wrap_PTEID_EIDCard_SignXadesA);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "SignXadesIndividual", _wrap_PTEID_EIDCard_SignXadesIndividual);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "SignXadesTIndividual", _wrap_PTEID_EIDCard_SignXadesTIndividual);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "SignPDF", _wrap_PTEID_EIDCard_SignPDF);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "ChangeCapPin", _wrap_PTEID_EIDCard_ChangeCapPin);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "ChangeAddress", _wrap_PTEID_EIDCard_ChangeAddress);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "ChangeCapPinCompLayer", _wrap_PTEID_EIDCard_ChangeCapPinCompLayer);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData", _wrap_PTEID_EIDCard_getRawData);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_Id", _wrap_PTEID_EIDCard_getRawData_Id);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_IdSig", _wrap_PTEID_EIDCard_getRawData_IdSig);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_Trace", _wrap_PTEID_EIDCard_getRawData_Trace);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_Addr", _wrap_PTEID_EIDCard_getRawData_Addr);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_AddrSig", _wrap_PTEID_EIDCard_getRawData_AddrSig);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_Sod", _wrap_PTEID_EIDCard_getRawData_Sod);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_CardInfo", _wrap_PTEID_EIDCard_getRawData_CardInfo);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_TokenInfo", _wrap_PTEID_EIDCard_getRawData_TokenInfo);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_Challenge", _wrap_PTEID_EIDCard_getRawData_Challenge);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_Response", _wrap_PTEID_EIDCard_getRawData_Response);SWIGV8_AddMemberFunction(_exports_PTEID_EIDCard_class, "getRawData_PersoData", _wrap_PTEID_EIDCard_getRawData_PersoData);SWIGV8_AddMemberFunction(_exports_PTEID_SigVerifier_class, "Verify", _wrap_PTEID_SigVerifier_Verify);SWIGV8_AddMemberFunction(_exports_PTEID_SigVerifier_class, "GetSigner", _wrap_PTEID_SigVerifier_GetSigner);SWIGV8_AddMemberFunction(_exports_PTEID_SigVerifier_class, "GetTimestampString", _wrap_PTEID_SigVerifier_GetTimestampString);SWIGV8_AddMemberFunction(_exports_PTEID_SigVerifier_class, "GetUnixTimestamp", _wrap_PTEID_SigVerifier_GetUnixTimestamp);SWIGV8_AddMemberFunction(_exports_PTEID_XmlUserRequestedInfo_class, "add", _wrap_PTEID_XmlUserRequestedInfo_add);SWIGV8_AddMemberFunction(_exports_PTEID_XMLDoc_class, "isAllowed", _wrap_PTEID_XMLDoc_isAllowed);SWIGV8_AddMemberFunction(_exports_PTEID_XMLDoc_class, "getXML", _wrap_PTEID_XMLDoc_getXML);SWIGV8_AddMemberFunction(_exports_PTEID_XMLDoc_class, "getCSV", _wrap_PTEID_XMLDoc_getCSV);SWIGV8_AddMemberFunction(_exports_PTEID_XMLDoc_class, "getTLV", _wrap_PTEID_XMLDoc_getTLV);SWIGV8_AddMemberFunction(_exports_PTEID_XMLDoc_class, "writeXmlToFile", _wrap_PTEID_XMLDoc_writeXmlToFile);SWIGV8_AddMemberFunction(_exports_PTEID_XMLDoc_class, "writeCsvToFile", _wrap_PTEID_XMLDoc_writeCsvToFile);SWIGV8_AddMemberFunction(_exports_PTEID_XMLDoc_class, "writeTlvToFile", _wrap_PTEID_XMLDoc_writeTlvToFile);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getSerialNumber", _wrap_PTEID_CardVersionInfo_getSerialNumber);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getTokenLabel", _wrap_PTEID_CardVersionInfo_getTokenLabel);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getComponentCode", _wrap_PTEID_CardVersionInfo_getComponentCode);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getOsNumber", _wrap_PTEID_CardVersionInfo_getOsNumber);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getOsVersion", _wrap_PTEID_CardVersionInfo_getOsVersion);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getSoftmaskNumber", _wrap_PTEID_CardVersionInfo_getSoftmaskNumber);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getSoftmaskVersion", _wrap_PTEID_CardVersionInfo_getSoftmaskVersion);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getAppletVersion", _wrap_PTEID_CardVersionInfo_getAppletVersion);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getGlobalOsVersion", _wrap_PTEID_CardVersionInfo_getGlobalOsVersion);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getAppletInterfaceVersion", _wrap_PTEID_CardVersionInfo_getAppletInterfaceVersion);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getPKCS1Support", _wrap_PTEID_CardVersionInfo_getPKCS1Support);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getKeyExchangeVersion", _wrap_PTEID_CardVersionInfo_getKeyExchangeVersion);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getAppletLifeCycle", _wrap_PTEID_CardVersionInfo_getAppletLifeCycle);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getGraphicalPersonalisation", _wrap_PTEID_CardVersionInfo_getGraphicalPersonalisation);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getElectricalPersonalisation", _wrap_PTEID_CardVersionInfo_getElectricalPersonalisation);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getElectricalPersonalisationInterface", _wrap_PTEID_CardVersionInfo_getElectricalPersonalisationInterface);SWIGV8_AddMemberFunction(_exports_PTEID_CardVersionInfo_class, "getSignature", _wrap_PTEID_CardVersionInfo_getSignature);SWIGV8_AddMemberFunction(_exports_PTEID_Sod_class, "getData", _wrap_PTEID_Sod_getData);SWIGV8_AddMemberFunction(_exports_PTEID_Sod_class, "getHash", _wrap_PTEID_Sod_getHash);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getDocumentVersion", _wrap_PTEID_EId_getDocumentVersion);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getDocumentType", _wrap_PTEID_EId_getDocumentType);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getCountry", _wrap_PTEID_EId_getCountry);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getGivenName", _wrap_PTEID_EId_getGivenName);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getSurname", _wrap_PTEID_EId_getSurname);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getGender", _wrap_PTEID_EId_getGender);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getDateOfBirth", _wrap_PTEID_EId_getDateOfBirth);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getLocationOfBirth", _wrap_PTEID_EId_getLocationOfBirth);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getNationality", _wrap_PTEID_EId_getNationality);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getDuplicata", _wrap_PTEID_EId_getDuplicata);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getSpecialOrganization", _wrap_PTEID_EId_getSpecialOrganization);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getMemberOfFamily", _wrap_PTEID_EId_getMemberOfFamily);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getLogicalNumber", _wrap_PTEID_EId_getLogicalNumber);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getDocumentPAN", _wrap_PTEID_EId_getDocumentPAN);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getValidityBeginDate", _wrap_PTEID_EId_getValidityBeginDate);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getValidityEndDate", _wrap_PTEID_EId_getValidityEndDate);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getSpecialStatus", _wrap_PTEID_EId_getSpecialStatus);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getHeight", _wrap_PTEID_EId_getHeight);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getDocumentNumber", _wrap_PTEID_EId_getDocumentNumber);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getCivilianIdNumber", _wrap_PTEID_EId_getCivilianIdNumber);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getTaxNo", _wrap_PTEID_EId_getTaxNo);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getSocialSecurityNumber", _wrap_PTEID_EId_getSocialSecurityNumber);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getHealthNumber", _wrap_PTEID_EId_getHealthNumber);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getIssuingEntity", _wrap_PTEID_EId_getIssuingEntity);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getLocalofRequest", _wrap_PTEID_EId_getLocalofRequest);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getGivenNameFather", _wrap_PTEID_EId_getGivenNameFather);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getSurnameFather", _wrap_PTEID_EId_getSurnameFather);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getGivenNameMother", _wrap_PTEID_EId_getGivenNameMother);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getSurnameMother", _wrap_PTEID_EId_getSurnameMother);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getParents", _wrap_PTEID_EId_getParents);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getPhotoObj", _wrap_PTEID_EId_getPhotoObj);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getCardAuthKeyObj", _wrap_PTEID_EId_getCardAuthKeyObj);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getValidation", _wrap_PTEID_EId_getValidation);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getMRZ1", _wrap_PTEID_EId_getMRZ1);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getMRZ2", _wrap_PTEID_EId_getMRZ2);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getMRZ3", _wrap_PTEID_EId_getMRZ3);SWIGV8_AddMemberFunction(_exports_PTEID_EId_class, "getAccidentalIndications", _wrap_PTEID_EId_getAccidentalIndications);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "isNationalAddress", _wrap_PTEID_Address_isNationalAddress);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getCountryCode", _wrap_PTEID_Address_getCountryCode);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getDistrict", _wrap_PTEID_Address_getDistrict);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getDistrictCode", _wrap_PTEID_Address_getDistrictCode);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getMunicipality", _wrap_PTEID_Address_getMunicipality);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getMunicipalityCode", _wrap_PTEID_Address_getMunicipalityCode);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getCivilParish", _wrap_PTEID_Address_getCivilParish);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getCivilParishCode", _wrap_PTEID_Address_getCivilParishCode);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getAbbrStreetType", _wrap_PTEID_Address_getAbbrStreetType);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getStreetType", _wrap_PTEID_Address_getStreetType);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getStreetName", _wrap_PTEID_Address_getStreetName);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getAbbrBuildingType", _wrap_PTEID_Address_getAbbrBuildingType);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getBuildingType", _wrap_PTEID_Address_getBuildingType);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getDoorNo", _wrap_PTEID_Address_getDoorNo);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getFloor", _wrap_PTEID_Address_getFloor);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getSide", _wrap_PTEID_Address_getSide);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getLocality", _wrap_PTEID_Address_getLocality);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getPlace", _wrap_PTEID_Address_getPlace);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getZip4", _wrap_PTEID_Address_getZip4);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getZip3", _wrap_PTEID_Address_getZip3);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getPostalLocality", _wrap_PTEID_Address_getPostalLocality);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getGeneratedAddressCode", _wrap_PTEID_Address_getGeneratedAddressCode);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getForeignCountry", _wrap_PTEID_Address_getForeignCountry);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getForeignAddress", _wrap_PTEID_Address_getForeignAddress);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getForeignCity", _wrap_PTEID_Address_getForeignCity);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getForeignRegion", _wrap_PTEID_Address_getForeignRegion);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getForeignLocality", _wrap_PTEID_Address_getForeignLocality);SWIGV8_AddMemberFunction(_exports_PTEID_Address_class, "getForeignPostalCode", _wrap_PTEID_Address_getForeignPostalCode);SWIGV8_AddMemberFunction(_exports_PTEID_CCXML_Doc_class, "getCCXML", _wrap_PTEID_CCXML_Doc_getCCXML);SWIGV8_AddMemberFunction(_exports_PTEID_Pins_class, "count", _wrap_PTEID_Pins_count);SWIGV8_AddMemberFunction(_exports_PTEID_Pins_class, "getPinByNumber", _wrap_PTEID_Pins_getPinByNumber);SWIGV8_AddMemberFunction(_exports_PTEID_Pins_class, "getPinByPinRef", _wrap_PTEID_Pins_getPinByPinRef);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getIndex", _wrap_PTEID_Pin_getIndex);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getType", _wrap_PTEID_Pin_getType);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getId", _wrap_PTEID_Pin_getId);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getPinRef", _wrap_PTEID_Pin_getPinRef);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getUsageCode", _wrap_PTEID_Pin_getUsageCode);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getFlags", _wrap_PTEID_Pin_getFlags);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getLabel", _wrap_PTEID_Pin_getLabel);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "unlockPin", _wrap_PTEID_Pin_unlockPin);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getSignature", _wrap_PTEID_Pin_getSignature);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "getTriesLeft", _wrap_PTEID_Pin_getTriesLeft);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "verifyPin", _wrap_PTEID_Pin_verifyPin);SWIGV8_AddMemberFunction(_exports_PTEID_Pin_class, "changePin", _wrap_PTEID_Pin_changePin);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "countFromCard", _wrap_PTEID_Certificates_countFromCard);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "countAll", _wrap_PTEID_Certificates_countAll);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getCertFromCard", _wrap_PTEID_Certificates_getCertFromCard);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getExternalCertData", _wrap_PTEID_Certificates_getExternalCertData);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getExternalCertDataSize", _wrap_PTEID_Certificates_getExternalCertDataSize);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getExternalCertSubject", _wrap_PTEID_Certificates_getExternalCertSubject);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getExternalCertIssuer", _wrap_PTEID_Certificates_getExternalCertIssuer);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getExternalCertNotBefore", _wrap_PTEID_Certificates_getExternalCertNotBefore);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getExternalCertNotAfter", _wrap_PTEID_Certificates_getExternalCertNotAfter);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getExternalCertKeylenght", _wrap_PTEID_Certificates_getExternalCertKeylenght);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getCert", _wrap_PTEID_Certificates_getCert);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getRoot", _wrap_PTEID_Certificates_getRoot);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getCA", _wrap_PTEID_Certificates_getCA);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getSignature", _wrap_PTEID_Certificates_getSignature);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "getAuthentication", _wrap_PTEID_Certificates_getAuthentication);SWIGV8_AddMemberFunction(_exports_PTEID_Certificates_class, "addCertificate", _wrap_PTEID_Certificates_addCertificate);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getLabel", _wrap_PTEID_Certificate_getLabel);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getID", _wrap_PTEID_Certificate_getID);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getType", _wrap_PTEID_Certificate_getType);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getCertData", _wrap_PTEID_Certificate_getCertData);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getFormattedData", _wrap_PTEID_Certificate_getFormattedData);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getSerialNumber", _wrap_PTEID_Certificate_getSerialNumber);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getOwnerName", _wrap_PTEID_Certificate_getOwnerName);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getIssuerName", _wrap_PTEID_Certificate_getIssuerName);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getValidityBegin", _wrap_PTEID_Certificate_getValidityBegin);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getValidityEnd", _wrap_PTEID_Certificate_getValidityEnd);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getKeyLength", _wrap_PTEID_Certificate_getKeyLength);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "isRoot", _wrap_PTEID_Certificate_isRoot);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "isTest", _wrap_PTEID_Certificate_isTest);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "isFromPteidValidChain", _wrap_PTEID_Certificate_isFromPteidValidChain);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "isFromCard", _wrap_PTEID_Certificate_isFromCard);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getIssuer", _wrap_PTEID_Certificate_getIssuer);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "countChildren", _wrap_PTEID_Certificate_countChildren);SWIGV8_AddMemberFunction(_exports_PTEID_Certificate_class, "getChildren", _wrap_PTEID_Certificate_getChildren);SWIGV8_AddMemberFunction(_exports_PTEID_Config_class, "getString", _wrap_PTEID_Config_getString);SWIGV8_AddMemberFunction(_exports_PTEID_Config_class, "getLong", _wrap_PTEID_Config_getLong);SWIGV8_AddMemberFunction(_exports_PTEID_Config_class, "setString", _wrap_PTEID_Config_setString);SWIGV8_AddMemberFunction(_exports_PTEID_Config_class, "setLong", _wrap_PTEID_Config_setLong);SWIGV8_AddStaticVariable(exports_obj, "COMP_LAYER_NATIONAL_ADDRESS", _wrap_COMP_LAYER_NATIONAL_ADDRESS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "COMP_LAYER_FOREIGN_ADDRESS", _wrap_COMP_LAYER_FOREIGN_ADDRESS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DELIVERY_ENTITY_LEN", _wrap_PTEID_DELIVERY_ENTITY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_COUNTRY_LEN", _wrap_PTEID_COUNTRY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DOCUMENT_TYPE_LEN", _wrap_PTEID_DOCUMENT_TYPE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CARDNUMBER_LEN", _wrap_PTEID_CARDNUMBER_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CARDNUMBER_PAN_LEN", _wrap_PTEID_CARDNUMBER_PAN_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CARDVERSION_LEN", _wrap_PTEID_CARDVERSION_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DATE_LEN", _wrap_PTEID_DATE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_LOCALE_LEN", _wrap_PTEID_LOCALE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NAME_LEN", _wrap_PTEID_NAME_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_SEX_LEN", _wrap_PTEID_SEX_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NATIONALITY_LEN", _wrap_PTEID_NATIONALITY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_HEIGHT_LEN", _wrap_PTEID_HEIGHT_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NUMBI_LEN", _wrap_PTEID_NUMBI_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NUMNIF_LEN", _wrap_PTEID_NUMNIF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NUMSS_LEN", _wrap_PTEID_NUMSS_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NUMSNS_LEN", _wrap_PTEID_NUMSNS_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_INDICATIONEV_LEN", _wrap_PTEID_INDICATIONEV_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MRZ_LEN", _wrap_PTEID_MRZ_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DELIVERY_ENTITY_LEN", _wrap_PTEID_MAX_DELIVERY_ENTITY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_COUNTRY_LEN", _wrap_PTEID_MAX_COUNTRY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DOCUMENT_TYPE_LEN", _wrap_PTEID_MAX_DOCUMENT_TYPE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CARDNUMBER_LEN", _wrap_PTEID_MAX_CARDNUMBER_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CARDNUMBER_PAN_LEN", _wrap_PTEID_MAX_CARDNUMBER_PAN_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CARDVERSION_LEN", _wrap_PTEID_MAX_CARDVERSION_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DATE_LEN", _wrap_PTEID_MAX_DATE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_LOCALE_LEN", _wrap_PTEID_MAX_LOCALE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NAME_LEN", _wrap_PTEID_MAX_NAME_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_SEX_LEN", _wrap_PTEID_MAX_SEX_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NATIONALITY_LEN", _wrap_PTEID_MAX_NATIONALITY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_HEIGHT_LEN", _wrap_PTEID_MAX_HEIGHT_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NUMBI_LEN", _wrap_PTEID_MAX_NUMBI_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NUMNIF_LEN", _wrap_PTEID_MAX_NUMNIF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NUMSS_LEN", _wrap_PTEID_MAX_NUMSS_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NUMSNS_LEN", _wrap_PTEID_MAX_NUMSNS_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_INDICATIONEV_LEN", _wrap_PTEID_MAX_INDICATIONEV_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_MRZ_LEN", _wrap_PTEID_MAX_MRZ_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ADDR_TYPE_LEN", _wrap_PTEID_ADDR_TYPE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ADDR_COUNTRY_LEN", _wrap_PTEID_ADDR_COUNTRY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DISTRICT_LEN", _wrap_PTEID_DISTRICT_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DISTRICT_DESC_LEN", _wrap_PTEID_DISTRICT_DESC_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DISTRICT_CON_LEN", _wrap_PTEID_DISTRICT_CON_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DISTRICT_CON_DESC_LEN", _wrap_PTEID_DISTRICT_CON_DESC_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DISTRICT_FREG_LEN", _wrap_PTEID_DISTRICT_FREG_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_DISTRICT_FREG_DESC_LEN", _wrap_PTEID_DISTRICT_FREG_DESC_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ROAD_ABBR_LEN", _wrap_PTEID_ROAD_ABBR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ROAD_LEN", _wrap_PTEID_ROAD_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ROAD_DESIG_LEN", _wrap_PTEID_ROAD_DESIG_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_HOUSE_ABBR_LEN", _wrap_PTEID_HOUSE_ABBR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_HOUSE_LEN", _wrap_PTEID_HOUSE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NUMDOOR_LEN", _wrap_PTEID_NUMDOOR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_FLOOR_LEN", _wrap_PTEID_FLOOR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_SIDE_LEN", _wrap_PTEID_SIDE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_PLACE_LEN", _wrap_PTEID_PLACE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_LOCALITY_LEN", _wrap_PTEID_LOCALITY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CP4_LEN", _wrap_PTEID_CP4_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CP3_LEN", _wrap_PTEID_CP3_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_POSTAL_LEN", _wrap_PTEID_POSTAL_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NUMMOR_LEN", _wrap_PTEID_NUMMOR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ADDR_COUNTRYF_DESC_LEN", _wrap_PTEID_ADDR_COUNTRYF_DESC_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ADDRF_LEN", _wrap_PTEID_ADDRF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_CITYF_LEN", _wrap_PTEID_CITYF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_REGIOF_LEN", _wrap_PTEID_REGIOF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_LOCALITYF_LEN", _wrap_PTEID_LOCALITYF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_POSTALF_LEN", _wrap_PTEID_POSTALF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NUMMORF_LEN", _wrap_PTEID_NUMMORF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_ADDR_TYPE_LEN", _wrap_PTEID_MAX_ADDR_TYPE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_ADDR_COUNTRY_LEN", _wrap_PTEID_MAX_ADDR_COUNTRY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DISTRICT_LEN", _wrap_PTEID_MAX_DISTRICT_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DISTRICT_DESC_LEN", _wrap_PTEID_MAX_DISTRICT_DESC_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DISTRICT_CON_LEN", _wrap_PTEID_MAX_DISTRICT_CON_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DISTRICT_CON_DESC_LEN", _wrap_PTEID_MAX_DISTRICT_CON_DESC_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DISTRICT_FREG_LEN", _wrap_PTEID_MAX_DISTRICT_FREG_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_DISTRICT_FREG_DESC_LEN", _wrap_PTEID_MAX_DISTRICT_FREG_DESC_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_ROAD_ABBR_LEN", _wrap_PTEID_MAX_ROAD_ABBR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_ROAD_LEN", _wrap_PTEID_MAX_ROAD_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_ROAD_DESIG_LEN", _wrap_PTEID_MAX_ROAD_DESIG_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_HOUSE_ABBR_LEN", _wrap_PTEID_MAX_HOUSE_ABBR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_HOUSE_LEN", _wrap_PTEID_MAX_HOUSE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NUMDOOR_LEN", _wrap_PTEID_MAX_NUMDOOR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_FLOOR_LEN", _wrap_PTEID_MAX_FLOOR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_SIDE_LEN", _wrap_PTEID_MAX_SIDE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_PLACE_LEN", _wrap_PTEID_MAX_PLACE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_LOCALITY_LEN", _wrap_PTEID_MAX_LOCALITY_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CP4_LEN", _wrap_PTEID_MAX_CP4_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CP3_LEN", _wrap_PTEID_MAX_CP3_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_POSTAL_LEN", _wrap_PTEID_MAX_POSTAL_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NUMMOR_LEN", _wrap_PTEID_MAX_NUMMOR_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_ADDR_COUNTRYF_DESC_LEN", _wrap_PTEID_MAX_ADDR_COUNTRYF_DESC_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_ADDRF_LEN", _wrap_PTEID_MAX_ADDRF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CITYF_LEN", _wrap_PTEID_MAX_CITYF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_REGIOF_LEN", _wrap_PTEID_MAX_REGIOF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_LOCALITYF_LEN", _wrap_PTEID_MAX_LOCALITYF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_POSTALF_LEN", _wrap_PTEID_MAX_POSTALF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_NUMMORF_LEN", _wrap_PTEID_MAX_NUMMORF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_PICTURE_LEN", _wrap_PTEID_MAX_PICTURE_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_PICTURE_LEN_HEADER", _wrap_PTEID_MAX_PICTURE_LEN_HEADER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_PICTUREH_LEN", _wrap_PTEID_MAX_PICTUREH_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CBEFF_LEN", _wrap_PTEID_MAX_CBEFF_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_FACRECH_LEN", _wrap_PTEID_MAX_FACRECH_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_FACINFO_LEN", _wrap_PTEID_MAX_FACINFO_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_IMAGEINFO_LEN", _wrap_PTEID_MAX_IMAGEINFO_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_IMAGEHEADER_LEN", _wrap_PTEID_MAX_IMAGEHEADER_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CERT_LEN", _wrap_PTEID_MAX_CERT_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CERT_NUMBER", _wrap_PTEID_MAX_CERT_NUMBER, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_CERT_LABEL_LEN", _wrap_PTEID_MAX_CERT_LABEL_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_PINS", _wrap_PTEID_MAX_PINS, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_PIN_LABEL_LEN", _wrap_PTEID_MAX_PIN_LABEL_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_MAX_ID_NUMBER_LEN", _wrap_PTEID_MAX_ID_NUMBER_LEN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_SOD_FILE", _wrap_PTEID_SOD_FILE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ACTIVE_CARD", _wrap_PTEID_ACTIVE_CARD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_INACTIVE_CARD", _wrap_PTEID_INACTIVE_CARD, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_ADDRESS_PIN_ID", _wrap_PTEID_ADDRESS_PIN_ID, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "PTEID_NO_PIN_NEEDED", _wrap_PTEID_NO_PIN_NEEDED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "MODE_ACTIVATE_BLOCK_PIN", _wrap_MODE_ACTIVATE_BLOCK_PIN, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "COMP_CARD_TYPE_ERR", _wrap_eIDMW_COMP_CARD_TYPE_ERR, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "COMP_CARD_TYPE_IAS07", _wrap_eIDMW_COMP_CARD_TYPE_IAS07, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "COMP_CARD_TYPE_IAS101", _wrap_eIDMW_COMP_CARD_TYPE_IAS101, JS_veto_set_variable);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "version", _wrap_PTEID_ID_version_get, _wrap_PTEID_ID_version_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "deliveryEntity", _wrap_PTEID_ID_deliveryEntity_get, _wrap_PTEID_ID_deliveryEntity_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "country", _wrap_PTEID_ID_country_get, _wrap_PTEID_ID_country_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "documentType", _wrap_PTEID_ID_documentType_get, _wrap_PTEID_ID_documentType_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "cardNumber", _wrap_PTEID_ID_cardNumber_get, _wrap_PTEID_ID_cardNumber_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "cardNumberPAN", _wrap_PTEID_ID_cardNumberPAN_get, _wrap_PTEID_ID_cardNumberPAN_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "cardVersion", _wrap_PTEID_ID_cardVersion_get, _wrap_PTEID_ID_cardVersion_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "deliveryDate", _wrap_PTEID_ID_deliveryDate_get, _wrap_PTEID_ID_deliveryDate_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "locale", _wrap_PTEID_ID_locale_get, _wrap_PTEID_ID_locale_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "validityDate", _wrap_PTEID_ID_validityDate_get, _wrap_PTEID_ID_validityDate_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "name", _wrap_PTEID_ID_name_get, _wrap_PTEID_ID_name_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "firstname", _wrap_PTEID_ID_firstname_get, _wrap_PTEID_ID_firstname_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "sex", _wrap_PTEID_ID_sex_get, _wrap_PTEID_ID_sex_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "nationality", _wrap_PTEID_ID_nationality_get, _wrap_PTEID_ID_nationality_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "birthDate", _wrap_PTEID_ID_birthDate_get, _wrap_PTEID_ID_birthDate_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "height", _wrap_PTEID_ID_height_get, _wrap_PTEID_ID_height_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "numBI", _wrap_PTEID_ID_numBI_get, _wrap_PTEID_ID_numBI_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "nameFather", _wrap_PTEID_ID_nameFather_get, _wrap_PTEID_ID_nameFather_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "firstnameFather", _wrap_PTEID_ID_firstnameFather_get, _wrap_PTEID_ID_firstnameFather_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "nameMother", _wrap_PTEID_ID_nameMother_get, _wrap_PTEID_ID_nameMother_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "firstnameMother", _wrap_PTEID_ID_firstnameMother_get, _wrap_PTEID_ID_firstnameMother_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "numNIF", _wrap_PTEID_ID_numNIF_get, _wrap_PTEID_ID_numNIF_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "numSS", _wrap_PTEID_ID_numSS_get, _wrap_PTEID_ID_numSS_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "numSNS", _wrap_PTEID_ID_numSNS_get, _wrap_PTEID_ID_numSNS_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "notes", _wrap_PTEID_ID_notes_get, _wrap_PTEID_ID_notes_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "mrz1", _wrap_PTEID_ID_mrz1_get, _wrap_PTEID_ID_mrz1_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "mrz2", _wrap_PTEID_ID_mrz2_get, _wrap_PTEID_ID_mrz2_set);SWIGV8_AddMemberVariable(_exports_PTEID_ID_class, "mrz3", _wrap_PTEID_ID_mrz3_get, _wrap_PTEID_ID_mrz3_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "version", _wrap_PTEID_ADDR_version_get, _wrap_PTEID_ADDR_version_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "addrType", _wrap_PTEID_ADDR_addrType_get, _wrap_PTEID_ADDR_addrType_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "country", _wrap_PTEID_ADDR_country_get, _wrap_PTEID_ADDR_country_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "district", _wrap_PTEID_ADDR_district_get, _wrap_PTEID_ADDR_district_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "districtDesc", _wrap_PTEID_ADDR_districtDesc_get, _wrap_PTEID_ADDR_districtDesc_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "municipality", _wrap_PTEID_ADDR_municipality_get, _wrap_PTEID_ADDR_municipality_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "municipalityDesc", _wrap_PTEID_ADDR_municipalityDesc_get, _wrap_PTEID_ADDR_municipalityDesc_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "freguesia", _wrap_PTEID_ADDR_freguesia_get, _wrap_PTEID_ADDR_freguesia_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "freguesiaDesc", _wrap_PTEID_ADDR_freguesiaDesc_get, _wrap_PTEID_ADDR_freguesiaDesc_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "streettypeAbbr", _wrap_PTEID_ADDR_streettypeAbbr_get, _wrap_PTEID_ADDR_streettypeAbbr_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "streettype", _wrap_PTEID_ADDR_streettype_get, _wrap_PTEID_ADDR_streettype_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "street", _wrap_PTEID_ADDR_street_get, _wrap_PTEID_ADDR_street_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "buildingAbbr", _wrap_PTEID_ADDR_buildingAbbr_get, _wrap_PTEID_ADDR_buildingAbbr_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "building", _wrap_PTEID_ADDR_building_get, _wrap_PTEID_ADDR_building_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "door", _wrap_PTEID_ADDR_door_get, _wrap_PTEID_ADDR_door_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "floor", _wrap_PTEID_ADDR_floor_get, _wrap_PTEID_ADDR_floor_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "side", _wrap_PTEID_ADDR_side_get, _wrap_PTEID_ADDR_side_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "place", _wrap_PTEID_ADDR_place_get, _wrap_PTEID_ADDR_place_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "locality", _wrap_PTEID_ADDR_locality_get, _wrap_PTEID_ADDR_locality_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "cp4", _wrap_PTEID_ADDR_cp4_get, _wrap_PTEID_ADDR_cp4_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "cp3", _wrap_PTEID_ADDR_cp3_get, _wrap_PTEID_ADDR_cp3_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "postal", _wrap_PTEID_ADDR_postal_get, _wrap_PTEID_ADDR_postal_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "numMor", _wrap_PTEID_ADDR_numMor_get, _wrap_PTEID_ADDR_numMor_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "countryDescF", _wrap_PTEID_ADDR_countryDescF_get, _wrap_PTEID_ADDR_countryDescF_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "addressF", _wrap_PTEID_ADDR_addressF_get, _wrap_PTEID_ADDR_addressF_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "cityF", _wrap_PTEID_ADDR_cityF_get, _wrap_PTEID_ADDR_cityF_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "regioF", _wrap_PTEID_ADDR_regioF_get, _wrap_PTEID_ADDR_regioF_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "localityF", _wrap_PTEID_ADDR_localityF_get, _wrap_PTEID_ADDR_localityF_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "postalF", _wrap_PTEID_ADDR_postalF_get, _wrap_PTEID_ADDR_postalF_set);SWIGV8_AddMemberVariable(_exports_PTEID_ADDR_class, "numMorF", _wrap_PTEID_ADDR_numMorF_get, _wrap_PTEID_ADDR_numMorF_set);SWIGV8_AddMemberVariable(_exports_PTEID_PIC_class, "version", _wrap_PTEID_PIC_version_get, _wrap_PTEID_PIC_version_set);SWIGV8_AddMemberVariable(_exports_PTEID_PIC_class, "cbeff", _wrap_PTEID_PIC_cbeff_get, _wrap_PTEID_PIC_cbeff_set);SWIGV8_AddMemberVariable(_exports_PTEID_PIC_class, "facialrechdr", _wrap_PTEID_PIC_facialrechdr_get, _wrap_PTEID_PIC_facialrechdr_set);SWIGV8_AddMemberVariable(_exports_PTEID_PIC_class, "facialinfo", _wrap_PTEID_PIC_facialinfo_get, _wrap_PTEID_PIC_facialinfo_set);SWIGV8_AddMemberVariable(_exports_PTEID_PIC_class, "imageinfo", _wrap_PTEID_PIC_imageinfo_get, _wrap_PTEID_PIC_imageinfo_set);SWIGV8_AddMemberVariable(_exports_PTEID_PIC_class, "picture", _wrap_PTEID_PIC_picture_get, _wrap_PTEID_PIC_picture_set);SWIGV8_AddMemberVariable(_exports_PTEID_PIC_class, "piclength", _wrap_PTEID_PIC_piclength_get, _wrap_PTEID_PIC_piclength_set);SWIGV8_AddMemberVariable(_exports_PTEID_Certif_class, "certif", _wrap_PTEID_Certif_certif_get, _wrap_PTEID_Certif_certif_set);SWIGV8_AddMemberVariable(_exports_PTEID_Certif_class, "certifLength", _wrap_PTEID_Certif_certifLength_get, _wrap_PTEID_Certif_certifLength_set);SWIGV8_AddMemberVariable(_exports_PTEID_Certif_class, "certifLabel", _wrap_PTEID_Certif_certifLabel_get, _wrap_PTEID_Certif_certifLabel_set);SWIGV8_AddMemberVariable(_exports_PTEID_Certifs_class, "certificates", _wrap_PTEID_Certifs_certificates_get, _wrap_PTEID_Certifs_certificates_set);SWIGV8_AddMemberVariable(_exports_PTEID_Certifs_class, "certificatesLength", _wrap_PTEID_Certifs_certificatesLength_get, _wrap_PTEID_Certifs_certificatesLength_set);SWIGV8_AddMemberVariable(_exports_PTEIDPin_class, "pinType", _wrap_PTEIDPin_pinType_get, _wrap_PTEIDPin_pinType_set);SWIGV8_AddMemberVariable(_exports_PTEIDPin_class, "id", _wrap_PTEIDPin_id_get, _wrap_PTEIDPin_id_set);SWIGV8_AddMemberVariable(_exports_PTEIDPin_class, "usageCode", _wrap_PTEIDPin_usageCode_get, _wrap_PTEIDPin_usageCode_set);SWIGV8_AddMemberVariable(_exports_PTEIDPin_class, "triesLeft", _wrap_PTEIDPin_triesLeft_get, _wrap_PTEIDPin_triesLeft_set);SWIGV8_AddMemberVariable(_exports_PTEIDPin_class, "flags", _wrap_PTEIDPin_flags_get, _wrap_PTEIDPin_flags_set);SWIGV8_AddMemberVariable(_exports_PTEIDPin_class, "label", _wrap_PTEIDPin_label_get, _wrap_PTEIDPin_label_set);SWIGV8_AddMemberVariable(_exports_PTEIDPin_class, "shortUsage", _wrap_PTEIDPin_shortUsage_get, _wrap_PTEIDPin_shortUsage_set);SWIGV8_AddMemberVariable(_exports_PTEIDPin_class, "longUsage", _wrap_PTEIDPin_longUsage_get, _wrap_PTEIDPin_longUsage_set);SWIGV8_AddMemberVariable(_exports_PTEIDPins_class, "pins", _wrap_PTEIDPins_pins_get, _wrap_PTEIDPins_pins_set);SWIGV8_AddMemberVariable(_exports_PTEIDPins_class, "pinsLength", _wrap_PTEIDPins_pinsLength_get, _wrap_PTEIDPins_pinsLength_set);SWIGV8_AddMemberVariable(_exports_PTEID_TokenInfo_class, "label", _wrap_PTEID_TokenInfo_label_get, _wrap_PTEID_TokenInfo_label_set);SWIGV8_AddMemberVariable(_exports_PTEID_TokenInfo_class, "serial", _wrap_PTEID_TokenInfo_serial_get, _wrap_PTEID_TokenInfo_serial_set);SWIGV8_AddMemberVariable(_exports_PTEID_RSAPublicKey_class, "modulus", _wrap_PTEID_RSAPublicKey_modulus_get, _wrap_PTEID_RSAPublicKey_modulus_set);SWIGV8_AddMemberVariable(_exports_PTEID_RSAPublicKey_class, "modulusLength", _wrap_PTEID_RSAPublicKey_modulusLength_get, _wrap_PTEID_RSAPublicKey_modulusLength_set);SWIGV8_AddMemberVariable(_exports_PTEID_RSAPublicKey_class, "exponent", _wrap_PTEID_RSAPublicKey_exponent_get, _wrap_PTEID_RSAPublicKey_exponent_set);SWIGV8_AddMemberVariable(_exports_PTEID_RSAPublicKey_class, "exponentLength", _wrap_PTEID_RSAPublicKey_exponentLength_get, _wrap_PTEID_RSAPublicKey_exponentLength_set);SWIGV8_AddMemberVariable(_exports_tProxyInfo_class, "csProxy", _wrap_tProxyInfo_csProxy_get, _wrap_tProxyInfo_csProxy_set);SWIGV8_AddMemberVariable(_exports_tProxyInfo_class, "uiPort", _wrap_tProxyInfo_uiPort_get, _wrap_tProxyInfo_uiPort_set);SWIGV8_AddMemberVariable(_exports_tProxyInfo_class, "csUserName", _wrap_tProxyInfo_csUserName_get, _wrap_tProxyInfo_csUserName_set);SWIGV8_AddMemberVariable(_exports_tProxyInfo_class, "csPassword", _wrap_tProxyInfo_csPassword_get, _wrap_tProxyInfo_csPassword_set);SWIGV8_AddStaticVariable(exports_obj, "CAP_INITIALISING", _wrap_eIDMW_CAP_INITIALISING, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "CAP_CONNECTING", _wrap_eIDMW_CAP_CONNECTING, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "CAP_READING_INFO", _wrap_eIDMW_CAP_READING_INFO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "CAP_SENDING_INFO", _wrap_eIDMW_CAP_SENDING_INFO, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "CAP_WRITE", _wrap_eIDMW_CAP_WRITE, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "CAP_FINISH", _wrap_eIDMW_CAP_FINISH, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "CAP_FINISHED", _wrap_eIDMW_CAP_FINISHED, JS_veto_set_variable);SWIGV8_AddStaticVariable(exports_obj, "CAP_CANCELLED", _wrap_eIDMW_CAP_CANCELLED, JS_veto_set_variable);

  /* setup inheritances */
  if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExReleaseNeeded_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExReleaseNeeded_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExReleaseNeeded _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExReleaseNeeded _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExUnknown_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExUnknown_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExUnknown _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExUnknown _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExDocTypeUnknown_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExDocTypeUnknown_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExDocTypeUnknown _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExDocTypeUnknown _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExFileTypeUnknown_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExFileTypeUnknown_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExFileTypeUnknown _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExFileTypeUnknown _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExParamRange_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExParamRange_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExParamRange _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExParamRange _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExCmdNotAllowed_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExCmdNotAllowed_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExCmdNotAllowed _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExCmdNotAllowed _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExCmdNotSupported_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExCmdNotSupported_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExCmdNotSupported _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExCmdNotSupported _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExNoCardPresent_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExNoCardPresent_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExNoCardPresent _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExNoCardPresent _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExCardBadType_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExCardBadType_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExCardBadType _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExCardBadType _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExCardTypeUnknown_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExCardTypeUnknown_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExCardTypeUnknown _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExCardTypeUnknown _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExCertNoIssuer_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExCertNoIssuer_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExCertNoIssuer _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExCertNoIssuer _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExCertNoRoot_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExCertNoRoot_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExCertNoRoot _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExCertNoRoot _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExBadUsage_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExBadUsage_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExBadUsage _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExBadUsage _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExBadTransaction_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExBadTransaction_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExBadTransaction _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExBadTransaction _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExCardChanged_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExCardChanged_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExCardChanged _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExCardChanged _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExReaderSetChanged_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExReaderSetChanged_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExReaderSetChanged _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExReaderSetChanged _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExNoReader_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExNoReader_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExNoReader _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExNoReader _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExNotAllowByUser_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExNotAllowByUser_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExNotAllowByUser _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExNotAllowByUser _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExUserMustAnswer_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExUserMustAnswer_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExUserMustAnswer _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExUserMustAnswer _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ExSOD_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ);
#else
  _exports_PTEID_ExSOD_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Exception->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ExSOD _eIDMW__PTEID_Exception\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ExSOD _eIDMW__PTEID_Exception\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ByteArray_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_ByteArray_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ByteArray _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ByteArray _eIDMW__PTEID_Object\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Photo_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_Photo_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Photo _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Photo _eIDMW__PTEID_Object\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_PublicKey_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_PublicKey_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_PublicKey _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_PublicKey _eIDMW__PTEID_Object\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ReaderSet_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_ReaderSet_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ReaderSet _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ReaderSet _eIDMW__PTEID_Object\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_ReaderContext_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_ReaderContext_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_ReaderContext _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_ReaderContext _eIDMW__PTEID_Object\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Card_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_Card_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Card _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Card _eIDMW__PTEID_Object\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Card->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Card->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_MemoryCard_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Card->clientdata)->class_templ);
#else
  _exports_PTEID_MemoryCard_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Card->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_MemoryCard _eIDMW__PTEID_Card\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_MemoryCard _eIDMW__PTEID_Card\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Card->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Card->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_SmartCard_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Card->clientdata)->class_templ);
#else
  _exports_PTEID_SmartCard_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Card->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_SmartCard _eIDMW__PTEID_Card\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_SmartCard _eIDMW__PTEID_Card\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_SmartCard->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_SmartCard->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_EIDCard_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_SmartCard->clientdata)->class_templ);
#else
  _exports_PTEID_EIDCard_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_SmartCard->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_EIDCard _eIDMW__PTEID_SmartCard\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_EIDCard _eIDMW__PTEID_SmartCard\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_XmlUserRequestedInfo_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_XmlUserRequestedInfo_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_XmlUserRequestedInfo _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_XmlUserRequestedInfo _eIDMW__PTEID_Object\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_XMLDoc_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_XMLDoc_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_XMLDoc _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_XMLDoc _eIDMW__PTEID_Object\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Biometric_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ);
#else
  _exports_PTEID_Biometric_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Biometric _eIDMW__PTEID_XMLDoc\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Biometric _eIDMW__PTEID_XMLDoc\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Crypto_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ);
#else
  _exports_PTEID_Crypto_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Crypto _eIDMW__PTEID_XMLDoc\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Crypto _eIDMW__PTEID_XMLDoc\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_CardVersionInfo_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ);
#else
  _exports_PTEID_CardVersionInfo_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_CardVersionInfo _eIDMW__PTEID_XMLDoc\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_CardVersionInfo _eIDMW__PTEID_XMLDoc\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Biometric->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Biometric->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Sod_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Biometric->clientdata)->class_templ);
#else
  _exports_PTEID_Sod_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Biometric->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Sod _eIDMW__PTEID_Biometric\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Sod _eIDMW__PTEID_Biometric\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_EId_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ);
#else
  _exports_PTEID_EId_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_EId _eIDMW__PTEID_XMLDoc\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_EId _eIDMW__PTEID_XMLDoc\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Address_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ);
#else
  _exports_PTEID_Address_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Address _eIDMW__PTEID_XMLDoc\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Address _eIDMW__PTEID_XMLDoc\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_CCXML_Doc_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ);
#else
  _exports_PTEID_CCXML_Doc_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_XMLDoc->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_CCXML_Doc _eIDMW__PTEID_XMLDoc\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_CCXML_Doc _eIDMW__PTEID_XMLDoc\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Pins_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ);
#else
  _exports_PTEID_Pins_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Pins _eIDMW__PTEID_Crypto\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Pins _eIDMW__PTEID_Crypto\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Pin_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ);
#else
  _exports_PTEID_Pin_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Pin _eIDMW__PTEID_Crypto\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Pin _eIDMW__PTEID_Crypto\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Certificates_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ);
#else
  _exports_PTEID_Certificates_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Certificates _eIDMW__PTEID_Crypto\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Certificates _eIDMW__PTEID_Crypto\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Certificate_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ);
#else
  _exports_PTEID_Certificate_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Crypto->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Certificate _eIDMW__PTEID_Crypto\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Certificate _eIDMW__PTEID_Crypto\n");
#endif
}
if (SWIGTYPE_p_eIDMW__PTEID_Object->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031900)
  _exports_PTEID_Config_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ);
#else
  _exports_PTEID_Config_class->Inherit(
    v8::Handle<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_eIDMW__PTEID_Object->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_PTEID_Config _eIDMW__PTEID_Object\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_PTEID_Config _eIDMW__PTEID_Object\n");
#endif
}


  /* class instances */
  v8::Handle<v8::FunctionTemplate> _exports_PTEID_Exception_class_0 = SWIGV8_CreateClassTemplate("PTEID_Exception");
_exports_PTEID_Exception_class_0->SetCallHandler(_wrap_new_PTEID_Exception);
_exports_PTEID_Exception_class_0->Inherit(_exports_PTEID_Exception_class);
_exports_PTEID_Exception_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Exception_obj = _exports_PTEID_Exception_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExReleaseNeeded_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExReleaseNeeded");
_exports_PTEID_ExReleaseNeeded_class_0->SetCallHandler(_wrap_new_PTEID_ExReleaseNeeded);
_exports_PTEID_ExReleaseNeeded_class_0->Inherit(_exports_PTEID_ExReleaseNeeded_class);
_exports_PTEID_ExReleaseNeeded_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExReleaseNeeded_obj = _exports_PTEID_ExReleaseNeeded_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExUnknown_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExUnknown");
_exports_PTEID_ExUnknown_class_0->SetCallHandler(_wrap_new_PTEID_ExUnknown);
_exports_PTEID_ExUnknown_class_0->Inherit(_exports_PTEID_ExUnknown_class);
_exports_PTEID_ExUnknown_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExUnknown_obj = _exports_PTEID_ExUnknown_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExDocTypeUnknown_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExDocTypeUnknown");
_exports_PTEID_ExDocTypeUnknown_class_0->SetCallHandler(_wrap_new_PTEID_ExDocTypeUnknown);
_exports_PTEID_ExDocTypeUnknown_class_0->Inherit(_exports_PTEID_ExDocTypeUnknown_class);
_exports_PTEID_ExDocTypeUnknown_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExDocTypeUnknown_obj = _exports_PTEID_ExDocTypeUnknown_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExFileTypeUnknown_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExFileTypeUnknown");
_exports_PTEID_ExFileTypeUnknown_class_0->SetCallHandler(_wrap_new_PTEID_ExFileTypeUnknown);
_exports_PTEID_ExFileTypeUnknown_class_0->Inherit(_exports_PTEID_ExFileTypeUnknown_class);
_exports_PTEID_ExFileTypeUnknown_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExFileTypeUnknown_obj = _exports_PTEID_ExFileTypeUnknown_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExParamRange_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExParamRange");
_exports_PTEID_ExParamRange_class_0->SetCallHandler(_wrap_new_PTEID_ExParamRange);
_exports_PTEID_ExParamRange_class_0->Inherit(_exports_PTEID_ExParamRange_class);
_exports_PTEID_ExParamRange_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExParamRange_obj = _exports_PTEID_ExParamRange_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCmdNotAllowed_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExCmdNotAllowed");
_exports_PTEID_ExCmdNotAllowed_class_0->SetCallHandler(_wrap_new_PTEID_ExCmdNotAllowed);
_exports_PTEID_ExCmdNotAllowed_class_0->Inherit(_exports_PTEID_ExCmdNotAllowed_class);
_exports_PTEID_ExCmdNotAllowed_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExCmdNotAllowed_obj = _exports_PTEID_ExCmdNotAllowed_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCmdNotSupported_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExCmdNotSupported");
_exports_PTEID_ExCmdNotSupported_class_0->SetCallHandler(_wrap_new_PTEID_ExCmdNotSupported);
_exports_PTEID_ExCmdNotSupported_class_0->Inherit(_exports_PTEID_ExCmdNotSupported_class);
_exports_PTEID_ExCmdNotSupported_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExCmdNotSupported_obj = _exports_PTEID_ExCmdNotSupported_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExNoCardPresent_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExNoCardPresent");
_exports_PTEID_ExNoCardPresent_class_0->SetCallHandler(_wrap_new_PTEID_ExNoCardPresent);
_exports_PTEID_ExNoCardPresent_class_0->Inherit(_exports_PTEID_ExNoCardPresent_class);
_exports_PTEID_ExNoCardPresent_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExNoCardPresent_obj = _exports_PTEID_ExNoCardPresent_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCardBadType_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExCardBadType");
_exports_PTEID_ExCardBadType_class_0->SetCallHandler(_wrap_new_PTEID_ExCardBadType);
_exports_PTEID_ExCardBadType_class_0->Inherit(_exports_PTEID_ExCardBadType_class);
_exports_PTEID_ExCardBadType_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExCardBadType_obj = _exports_PTEID_ExCardBadType_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCardTypeUnknown_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExCardTypeUnknown");
_exports_PTEID_ExCardTypeUnknown_class_0->SetCallHandler(_wrap_new_PTEID_ExCardTypeUnknown);
_exports_PTEID_ExCardTypeUnknown_class_0->Inherit(_exports_PTEID_ExCardTypeUnknown_class);
_exports_PTEID_ExCardTypeUnknown_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExCardTypeUnknown_obj = _exports_PTEID_ExCardTypeUnknown_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCertNoIssuer_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExCertNoIssuer");
_exports_PTEID_ExCertNoIssuer_class_0->SetCallHandler(_wrap_new_PTEID_ExCertNoIssuer);
_exports_PTEID_ExCertNoIssuer_class_0->Inherit(_exports_PTEID_ExCertNoIssuer_class);
_exports_PTEID_ExCertNoIssuer_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExCertNoIssuer_obj = _exports_PTEID_ExCertNoIssuer_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCertNoRoot_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExCertNoRoot");
_exports_PTEID_ExCertNoRoot_class_0->SetCallHandler(_wrap_new_PTEID_ExCertNoRoot);
_exports_PTEID_ExCertNoRoot_class_0->Inherit(_exports_PTEID_ExCertNoRoot_class);
_exports_PTEID_ExCertNoRoot_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExCertNoRoot_obj = _exports_PTEID_ExCertNoRoot_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExBadUsage_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExBadUsage");
_exports_PTEID_ExBadUsage_class_0->SetCallHandler(_wrap_new_PTEID_ExBadUsage);
_exports_PTEID_ExBadUsage_class_0->Inherit(_exports_PTEID_ExBadUsage_class);
_exports_PTEID_ExBadUsage_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExBadUsage_obj = _exports_PTEID_ExBadUsage_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExBadTransaction_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExBadTransaction");
_exports_PTEID_ExBadTransaction_class_0->SetCallHandler(_wrap_new_PTEID_ExBadTransaction);
_exports_PTEID_ExBadTransaction_class_0->Inherit(_exports_PTEID_ExBadTransaction_class);
_exports_PTEID_ExBadTransaction_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExBadTransaction_obj = _exports_PTEID_ExBadTransaction_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExCardChanged_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExCardChanged");
_exports_PTEID_ExCardChanged_class_0->SetCallHandler(_wrap_new_PTEID_ExCardChanged);
_exports_PTEID_ExCardChanged_class_0->Inherit(_exports_PTEID_ExCardChanged_class);
_exports_PTEID_ExCardChanged_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExCardChanged_obj = _exports_PTEID_ExCardChanged_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExReaderSetChanged_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExReaderSetChanged");
_exports_PTEID_ExReaderSetChanged_class_0->SetCallHandler(_wrap_new_PTEID_ExReaderSetChanged);
_exports_PTEID_ExReaderSetChanged_class_0->Inherit(_exports_PTEID_ExReaderSetChanged_class);
_exports_PTEID_ExReaderSetChanged_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExReaderSetChanged_obj = _exports_PTEID_ExReaderSetChanged_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExNoReader_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExNoReader");
_exports_PTEID_ExNoReader_class_0->SetCallHandler(_wrap_new_PTEID_ExNoReader);
_exports_PTEID_ExNoReader_class_0->Inherit(_exports_PTEID_ExNoReader_class);
_exports_PTEID_ExNoReader_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExNoReader_obj = _exports_PTEID_ExNoReader_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExNotAllowByUser_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExNotAllowByUser");
_exports_PTEID_ExNotAllowByUser_class_0->SetCallHandler(_wrap_new_PTEID_ExNotAllowByUser);
_exports_PTEID_ExNotAllowByUser_class_0->Inherit(_exports_PTEID_ExNotAllowByUser_class);
_exports_PTEID_ExNotAllowByUser_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExNotAllowByUser_obj = _exports_PTEID_ExNotAllowByUser_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExUserMustAnswer_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExUserMustAnswer");
_exports_PTEID_ExUserMustAnswer_class_0->SetCallHandler(_wrap_new_PTEID_ExUserMustAnswer);
_exports_PTEID_ExUserMustAnswer_class_0->Inherit(_exports_PTEID_ExUserMustAnswer_class);
_exports_PTEID_ExUserMustAnswer_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExUserMustAnswer_obj = _exports_PTEID_ExUserMustAnswer_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ExSOD_class_0 = SWIGV8_CreateClassTemplate("PTEID_ExSOD");
_exports_PTEID_ExSOD_class_0->SetCallHandler(_wrap_new_PTEID_ExSOD);
_exports_PTEID_ExSOD_class_0->Inherit(_exports_PTEID_ExSOD_class);
_exports_PTEID_ExSOD_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ExSOD_obj = _exports_PTEID_ExSOD_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Object_class_0 = SWIGV8_CreateClassTemplate("PTEID_Object");
_exports_PTEID_Object_class_0->SetCallHandler(_wrap_new_veto_PTEID_Object);
_exports_PTEID_Object_class_0->Inherit(_exports_PTEID_Object_class);
_exports_PTEID_Object_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Object_obj = _exports_PTEID_Object_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ByteArray_class_0 = SWIGV8_CreateClassTemplate("PTEID_ByteArray");
_exports_PTEID_ByteArray_class_0->SetCallHandler(_wrap_new_PTEID_ByteArray);
_exports_PTEID_ByteArray_class_0->Inherit(_exports_PTEID_ByteArray_class);
_exports_PTEID_ByteArray_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ByteArray_obj = _exports_PTEID_ByteArray_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Photo_class_0 = SWIGV8_CreateClassTemplate("PTEID_Photo");
_exports_PTEID_Photo_class_0->SetCallHandler(_wrap_new_veto_PTEID_Photo);
_exports_PTEID_Photo_class_0->Inherit(_exports_PTEID_Photo_class);
_exports_PTEID_Photo_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Photo_obj = _exports_PTEID_Photo_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_PublicKey_class_0 = SWIGV8_CreateClassTemplate("PTEID_PublicKey");
_exports_PTEID_PublicKey_class_0->SetCallHandler(_wrap_new_veto_PTEID_PublicKey);
_exports_PTEID_PublicKey_class_0->Inherit(_exports_PTEID_PublicKey_class);
_exports_PTEID_PublicKey_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_PublicKey_obj = _exports_PTEID_PublicKey_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_RawData_Eid_class_0 = SWIGV8_CreateClassTemplate("PTEID_RawData_Eid");
_exports_PTEID_RawData_Eid_class_0->SetCallHandler(_wrap_new_PTEID_RawData_Eid);
_exports_PTEID_RawData_Eid_class_0->Inherit(_exports_PTEID_RawData_Eid_class);
_exports_PTEID_RawData_Eid_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_RawData_Eid_obj = _exports_PTEID_RawData_Eid_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ReaderSet_class_0 = SWIGV8_CreateClassTemplate("PTEID_ReaderSet");
_exports_PTEID_ReaderSet_class_0->SetCallHandler(_wrap_new_veto_PTEID_ReaderSet);
_exports_PTEID_ReaderSet_class_0->Inherit(_exports_PTEID_ReaderSet_class);
_exports_PTEID_ReaderSet_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ReaderSet_obj = _exports_PTEID_ReaderSet_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ReaderContext_class_0 = SWIGV8_CreateClassTemplate("PTEID_ReaderContext");
_exports_PTEID_ReaderContext_class_0->SetCallHandler(_wrap_new_PTEID_ReaderContext);
_exports_PTEID_ReaderContext_class_0->Inherit(_exports_PTEID_ReaderContext_class);
_exports_PTEID_ReaderContext_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ReaderContext_obj = _exports_PTEID_ReaderContext_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Card_class_0 = SWIGV8_CreateClassTemplate("PTEID_Card");
_exports_PTEID_Card_class_0->SetCallHandler(_wrap_new_veto_PTEID_Card);
_exports_PTEID_Card_class_0->Inherit(_exports_PTEID_Card_class);
_exports_PTEID_Card_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Card_obj = _exports_PTEID_Card_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_MemoryCard_class_0 = SWIGV8_CreateClassTemplate("PTEID_MemoryCard");
_exports_PTEID_MemoryCard_class_0->SetCallHandler(_wrap_new_veto_PTEID_MemoryCard);
_exports_PTEID_MemoryCard_class_0->Inherit(_exports_PTEID_MemoryCard_class);
_exports_PTEID_MemoryCard_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_MemoryCard_obj = _exports_PTEID_MemoryCard_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_SmartCard_class_0 = SWIGV8_CreateClassTemplate("PTEID_SmartCard");
_exports_PTEID_SmartCard_class_0->SetCallHandler(_wrap_new_veto_PTEID_SmartCard);
_exports_PTEID_SmartCard_class_0->Inherit(_exports_PTEID_SmartCard_class);
_exports_PTEID_SmartCard_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_SmartCard_obj = _exports_PTEID_SmartCard_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_PDFSignature_class_0 = SWIGV8_CreateClassTemplate("PTEID_PDFSignature");
_exports_PTEID_PDFSignature_class_0->SetCallHandler(_wrap_new_PTEID_PDFSignature);
_exports_PTEID_PDFSignature_class_0->Inherit(_exports_PTEID_PDFSignature_class);
_exports_PTEID_PDFSignature_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_PDFSignature_obj = _exports_PTEID_PDFSignature_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_EIDCard_class_0 = SWIGV8_CreateClassTemplate("PTEID_EIDCard");
_exports_PTEID_EIDCard_class_0->SetCallHandler(_wrap_new_veto_PTEID_EIDCard);
_exports_PTEID_EIDCard_class_0->Inherit(_exports_PTEID_EIDCard_class);
_exports_PTEID_EIDCard_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_EIDCard_obj = _exports_PTEID_EIDCard_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_SigVerifier_class_0 = SWIGV8_CreateClassTemplate("PTEID_SigVerifier");
_exports_PTEID_SigVerifier_class_0->SetCallHandler(_wrap_new_PTEID_SigVerifier);
_exports_PTEID_SigVerifier_class_0->Inherit(_exports_PTEID_SigVerifier_class);
_exports_PTEID_SigVerifier_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_SigVerifier_obj = _exports_PTEID_SigVerifier_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_XmlUserRequestedInfo_class_0 = SWIGV8_CreateClassTemplate("PTEID_XmlUserRequestedInfo");
_exports_PTEID_XmlUserRequestedInfo_class_0->SetCallHandler(_wrap_new_PTEID_XmlUserRequestedInfo);
_exports_PTEID_XmlUserRequestedInfo_class_0->Inherit(_exports_PTEID_XmlUserRequestedInfo_class);
_exports_PTEID_XmlUserRequestedInfo_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_XmlUserRequestedInfo_obj = _exports_PTEID_XmlUserRequestedInfo_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_XMLDoc_class_0 = SWIGV8_CreateClassTemplate("PTEID_XMLDoc");
_exports_PTEID_XMLDoc_class_0->SetCallHandler(_wrap_new_veto_PTEID_XMLDoc);
_exports_PTEID_XMLDoc_class_0->Inherit(_exports_PTEID_XMLDoc_class);
_exports_PTEID_XMLDoc_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_XMLDoc_obj = _exports_PTEID_XMLDoc_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Biometric_class_0 = SWIGV8_CreateClassTemplate("PTEID_Biometric");
_exports_PTEID_Biometric_class_0->SetCallHandler(_wrap_new_veto_PTEID_Biometric);
_exports_PTEID_Biometric_class_0->Inherit(_exports_PTEID_Biometric_class);
_exports_PTEID_Biometric_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Biometric_obj = _exports_PTEID_Biometric_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Crypto_class_0 = SWIGV8_CreateClassTemplate("PTEID_Crypto");
_exports_PTEID_Crypto_class_0->SetCallHandler(_wrap_new_veto_PTEID_Crypto);
_exports_PTEID_Crypto_class_0->Inherit(_exports_PTEID_Crypto_class);
_exports_PTEID_Crypto_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Crypto_obj = _exports_PTEID_Crypto_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_CardVersionInfo_class_0 = SWIGV8_CreateClassTemplate("PTEID_CardVersionInfo");
_exports_PTEID_CardVersionInfo_class_0->SetCallHandler(_wrap_new_veto_PTEID_CardVersionInfo);
_exports_PTEID_CardVersionInfo_class_0->Inherit(_exports_PTEID_CardVersionInfo_class);
_exports_PTEID_CardVersionInfo_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_CardVersionInfo_obj = _exports_PTEID_CardVersionInfo_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Sod_class_0 = SWIGV8_CreateClassTemplate("PTEID_Sod");
_exports_PTEID_Sod_class_0->SetCallHandler(_wrap_new_veto_PTEID_Sod);
_exports_PTEID_Sod_class_0->Inherit(_exports_PTEID_Sod_class);
_exports_PTEID_Sod_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Sod_obj = _exports_PTEID_Sod_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_EId_class_0 = SWIGV8_CreateClassTemplate("PTEID_EId");
_exports_PTEID_EId_class_0->SetCallHandler(_wrap_new_veto_PTEID_EId);
_exports_PTEID_EId_class_0->Inherit(_exports_PTEID_EId_class);
_exports_PTEID_EId_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_EId_obj = _exports_PTEID_EId_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Address_class_0 = SWIGV8_CreateClassTemplate("PTEID_Address");
_exports_PTEID_Address_class_0->SetCallHandler(_wrap_new_veto_PTEID_Address);
_exports_PTEID_Address_class_0->Inherit(_exports_PTEID_Address_class);
_exports_PTEID_Address_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Address_obj = _exports_PTEID_Address_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_CCXML_Doc_class_0 = SWIGV8_CreateClassTemplate("PTEID_CCXML_Doc");
_exports_PTEID_CCXML_Doc_class_0->SetCallHandler(_wrap_new_veto_PTEID_CCXML_Doc);
_exports_PTEID_CCXML_Doc_class_0->Inherit(_exports_PTEID_CCXML_Doc_class);
_exports_PTEID_CCXML_Doc_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_CCXML_Doc_obj = _exports_PTEID_CCXML_Doc_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Pins_class_0 = SWIGV8_CreateClassTemplate("PTEID_Pins");
_exports_PTEID_Pins_class_0->SetCallHandler(_wrap_new_veto_PTEID_Pins);
_exports_PTEID_Pins_class_0->Inherit(_exports_PTEID_Pins_class);
_exports_PTEID_Pins_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Pins_obj = _exports_PTEID_Pins_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Pin_class_0 = SWIGV8_CreateClassTemplate("PTEID_Pin");
_exports_PTEID_Pin_class_0->SetCallHandler(_wrap_new_veto_PTEID_Pin);
_exports_PTEID_Pin_class_0->Inherit(_exports_PTEID_Pin_class);
_exports_PTEID_Pin_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Pin_obj = _exports_PTEID_Pin_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Certificates_class_0 = SWIGV8_CreateClassTemplate("PTEID_Certificates");
_exports_PTEID_Certificates_class_0->SetCallHandler(_wrap_new_PTEID_Certificates);
_exports_PTEID_Certificates_class_0->Inherit(_exports_PTEID_Certificates_class);
_exports_PTEID_Certificates_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Certificates_obj = _exports_PTEID_Certificates_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Certificate_class_0 = SWIGV8_CreateClassTemplate("PTEID_Certificate");
_exports_PTEID_Certificate_class_0->SetCallHandler(_wrap_new_veto_PTEID_Certificate);
_exports_PTEID_Certificate_class_0->Inherit(_exports_PTEID_Certificate_class);
_exports_PTEID_Certificate_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Certificate_obj = _exports_PTEID_Certificate_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Config_class_0 = SWIGV8_CreateClassTemplate("PTEID_Config");
_exports_PTEID_Config_class_0->SetCallHandler(_wrap_new_PTEID_Config);
_exports_PTEID_Config_class_0->Inherit(_exports_PTEID_Config_class);
_exports_PTEID_Config_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Config_obj = _exports_PTEID_Config_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ID_class_0 = SWIGV8_CreateClassTemplate("PTEID_ID");
_exports_PTEID_ID_class_0->SetCallHandler(_wrap_new_PTEID_ID);
_exports_PTEID_ID_class_0->Inherit(_exports_PTEID_ID_class);
_exports_PTEID_ID_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ID_obj = _exports_PTEID_ID_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_ADDR_class_0 = SWIGV8_CreateClassTemplate("PTEID_ADDR");
_exports_PTEID_ADDR_class_0->SetCallHandler(_wrap_new_PTEID_ADDR);
_exports_PTEID_ADDR_class_0->Inherit(_exports_PTEID_ADDR_class);
_exports_PTEID_ADDR_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_ADDR_obj = _exports_PTEID_ADDR_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_PIC_class_0 = SWIGV8_CreateClassTemplate("PTEID_PIC");
_exports_PTEID_PIC_class_0->SetCallHandler(_wrap_new_PTEID_PIC);
_exports_PTEID_PIC_class_0->Inherit(_exports_PTEID_PIC_class);
_exports_PTEID_PIC_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_PIC_obj = _exports_PTEID_PIC_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Certif_class_0 = SWIGV8_CreateClassTemplate("PTEID_Certif");
_exports_PTEID_Certif_class_0->SetCallHandler(_wrap_new_PTEID_Certif);
_exports_PTEID_Certif_class_0->Inherit(_exports_PTEID_Certif_class);
_exports_PTEID_Certif_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Certif_obj = _exports_PTEID_Certif_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_Certifs_class_0 = SWIGV8_CreateClassTemplate("PTEID_Certifs");
_exports_PTEID_Certifs_class_0->SetCallHandler(_wrap_new_PTEID_Certifs);
_exports_PTEID_Certifs_class_0->Inherit(_exports_PTEID_Certifs_class);
_exports_PTEID_Certifs_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_Certifs_obj = _exports_PTEID_Certifs_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEIDPin_class_0 = SWIGV8_CreateClassTemplate("PTEIDPin");
_exports_PTEIDPin_class_0->SetCallHandler(_wrap_new_PTEIDPin);
_exports_PTEIDPin_class_0->Inherit(_exports_PTEIDPin_class);
_exports_PTEIDPin_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEIDPin_obj = _exports_PTEIDPin_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEIDPins_class_0 = SWIGV8_CreateClassTemplate("PTEIDPins");
_exports_PTEIDPins_class_0->SetCallHandler(_wrap_new_PTEIDPins);
_exports_PTEIDPins_class_0->Inherit(_exports_PTEIDPins_class);
_exports_PTEIDPins_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEIDPins_obj = _exports_PTEIDPins_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_TokenInfo_class_0 = SWIGV8_CreateClassTemplate("PTEID_TokenInfo");
_exports_PTEID_TokenInfo_class_0->SetCallHandler(_wrap_new_PTEID_TokenInfo);
_exports_PTEID_TokenInfo_class_0->Inherit(_exports_PTEID_TokenInfo_class);
_exports_PTEID_TokenInfo_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_TokenInfo_obj = _exports_PTEID_TokenInfo_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_PTEID_RSAPublicKey_class_0 = SWIGV8_CreateClassTemplate("PTEID_RSAPublicKey");
_exports_PTEID_RSAPublicKey_class_0->SetCallHandler(_wrap_new_PTEID_RSAPublicKey);
_exports_PTEID_RSAPublicKey_class_0->Inherit(_exports_PTEID_RSAPublicKey_class);
_exports_PTEID_RSAPublicKey_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PTEID_RSAPublicKey_obj = _exports_PTEID_RSAPublicKey_class_0->GetFunction();
v8::Handle<v8::FunctionTemplate> _exports_tProxyInfo_class_0 = SWIGV8_CreateClassTemplate("tProxyInfo");
_exports_tProxyInfo_class_0->SetCallHandler(_wrap_new_tProxyInfo);
_exports_tProxyInfo_class_0->Inherit(_exports_tProxyInfo_class);
_exports_tProxyInfo_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tProxyInfo_obj = _exports_tProxyInfo_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(_exports_PTEID_ReaderSet_obj, "instance", _wrap_PTEID_ReaderSet_instance);SWIGV8_AddStaticFunction(_exports_PTEID_ReaderSet_obj, "initSDK", _wrap_PTEID_ReaderSet_initSDK);SWIGV8_AddStaticFunction(_exports_PTEID_ReaderSet_obj, "releaseSDK", _wrap_PTEID_ReaderSet_releaseSDK);SWIGV8_AddStaticFunction(_exports_PTEID_EIDCard_obj, "isApplicationAllowed", _wrap_PTEID_EIDCard_isApplicationAllowed);SWIGV8_AddStaticVariable(_exports_PTEID_Pin_obj, "AUTH_PIN", _wrap_eIDMW_PTEID_Pin_AUTH_PIN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Pin_obj, "AUTH_PIN", _wrap_eIDMW_PTEID_Pin_AUTH_PIN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Pin_obj, "SIGN_PIN", _wrap_eIDMW_PTEID_Pin_SIGN_PIN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Pin_obj, "SIGN_PIN", _wrap_eIDMW_PTEID_Pin_SIGN_PIN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Pin_obj, "ADDR_PIN", _wrap_eIDMW_PTEID_Pin_ADDR_PIN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Pin_obj, "ADDR_PIN", _wrap_eIDMW_PTEID_Pin_ADDR_PIN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Certificate_obj, "CITIZEN_AUTH", _wrap_eIDMW_PTEID_Certificate_CITIZEN_AUTH, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Certificate_obj, "CITIZEN_AUTH", _wrap_eIDMW_PTEID_Certificate_CITIZEN_AUTH, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Certificate_obj, "CITIZEN_SIGN", _wrap_eIDMW_PTEID_Certificate_CITIZEN_SIGN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Certificate_obj, "CITIZEN_SIGN", _wrap_eIDMW_PTEID_Certificate_CITIZEN_SIGN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Certificate_obj, "SUB_CA_SIGN", _wrap_eIDMW_PTEID_Certificate_SUB_CA_SIGN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Certificate_obj, "SUB_CA_SIGN", _wrap_eIDMW_PTEID_Certificate_SUB_CA_SIGN, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Certificate_obj, "SUB_CA_AUTH", _wrap_eIDMW_PTEID_Certificate_SUB_CA_AUTH, JS_veto_set_variable);SWIGV8_AddStaticVariable(_exports_PTEID_Certificate_obj, "SUB_CA_AUTH", _wrap_eIDMW_PTEID_Certificate_SUB_CA_AUTH, JS_veto_set_variable);SWIGV8_AddStaticFunction(exports_obj, "PTEID_LOG", _wrap_PTEID_LOG);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_Init", _wrap_PTEID_Init);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_Exit", _wrap_PTEID_Exit);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetCardType", _wrap_PTEID_GetCardType);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetID", _wrap_PTEID_GetID);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetAddr", _wrap_PTEID_GetAddr);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetPic", _wrap_PTEID_GetPic);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetCertificates", _wrap_PTEID_GetCertificates);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_VerifyPIN", _wrap_PTEID_VerifyPIN);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_VerifyPIN_No_Alert", _wrap_PTEID_VerifyPIN_No_Alert);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_ChangePIN", _wrap_PTEID_ChangePIN);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetPINs", _wrap_PTEID_GetPINs);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetTokenInfo", _wrap_PTEID_GetTokenInfo);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_ReadSOD", _wrap_PTEID_ReadSOD);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_UnblockPIN", _wrap_PTEID_UnblockPIN);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_UnblockPIN_Ext", _wrap_PTEID_UnblockPIN_Ext);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_SelectADF", _wrap_PTEID_SelectADF);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_ReadFile", _wrap_PTEID_ReadFile);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_WriteFile", _wrap_PTEID_WriteFile);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_IsActivated", _wrap_PTEID_IsActivated);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_Activate", _wrap_PTEID_Activate);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_SetSODChecking", _wrap_PTEID_SetSODChecking);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_SetSODCAs", _wrap_PTEID_SetSODCAs);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetCardAuthenticationKey", _wrap_PTEID_GetCardAuthenticationKey);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_GetCVCRoot", _wrap_PTEID_GetCVCRoot);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_SendAPDU", _wrap_PTEID_SendAPDU);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_CAP_ChangeCapPin", _wrap_PTEID_CAP_ChangeCapPin);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_CAP_GetCapPinChangeProgress", _wrap_PTEID_CAP_GetCapPinChangeProgress);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_CAP_SetCapPinChangeCallback", _wrap_PTEID_CAP_SetCapPinChangeCallback);
SWIGV8_AddStaticFunction(exports_obj, "PTEID_CAP_CancelCapPinChange", _wrap_PTEID_CAP_CancelCapPinChange);


  /* register classes */
  exports_obj->Set(v8::String::NewSymbol("PTEID_Exception"), _exports_PTEID_Exception_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExReleaseNeeded"), _exports_PTEID_ExReleaseNeeded_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExUnknown"), _exports_PTEID_ExUnknown_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExDocTypeUnknown"), _exports_PTEID_ExDocTypeUnknown_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExFileTypeUnknown"), _exports_PTEID_ExFileTypeUnknown_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExParamRange"), _exports_PTEID_ExParamRange_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExCmdNotAllowed"), _exports_PTEID_ExCmdNotAllowed_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExCmdNotSupported"), _exports_PTEID_ExCmdNotSupported_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExNoCardPresent"), _exports_PTEID_ExNoCardPresent_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExCardBadType"), _exports_PTEID_ExCardBadType_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExCardTypeUnknown"), _exports_PTEID_ExCardTypeUnknown_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExCertNoIssuer"), _exports_PTEID_ExCertNoIssuer_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExCertNoRoot"), _exports_PTEID_ExCertNoRoot_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExBadUsage"), _exports_PTEID_ExBadUsage_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExBadTransaction"), _exports_PTEID_ExBadTransaction_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExCardChanged"), _exports_PTEID_ExCardChanged_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExReaderSetChanged"), _exports_PTEID_ExReaderSetChanged_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExNoReader"), _exports_PTEID_ExNoReader_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExNotAllowByUser"), _exports_PTEID_ExNotAllowByUser_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExUserMustAnswer"), _exports_PTEID_ExUserMustAnswer_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ExSOD"), _exports_PTEID_ExSOD_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Object"), _exports_PTEID_Object_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ByteArray"), _exports_PTEID_ByteArray_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Photo"), _exports_PTEID_Photo_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_PublicKey"), _exports_PTEID_PublicKey_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_RawData_Eid"), _exports_PTEID_RawData_Eid_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ReaderSet"), _exports_PTEID_ReaderSet_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ReaderContext"), _exports_PTEID_ReaderContext_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Card"), _exports_PTEID_Card_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_MemoryCard"), _exports_PTEID_MemoryCard_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_SmartCard"), _exports_PTEID_SmartCard_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_PDFSignature"), _exports_PTEID_PDFSignature_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_EIDCard"), _exports_PTEID_EIDCard_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_SigVerifier"), _exports_PTEID_SigVerifier_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_XmlUserRequestedInfo"), _exports_PTEID_XmlUserRequestedInfo_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_XMLDoc"), _exports_PTEID_XMLDoc_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Biometric"), _exports_PTEID_Biometric_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Crypto"), _exports_PTEID_Crypto_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_CardVersionInfo"), _exports_PTEID_CardVersionInfo_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Sod"), _exports_PTEID_Sod_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_EId"), _exports_PTEID_EId_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Address"), _exports_PTEID_Address_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_CCXML_Doc"), _exports_PTEID_CCXML_Doc_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Pins"), _exports_PTEID_Pins_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Pin"), _exports_PTEID_Pin_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Certificates"), _exports_PTEID_Certificates_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Certificate"), _exports_PTEID_Certificate_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Config"), _exports_PTEID_Config_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ID"), _exports_PTEID_ID_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_ADDR"), _exports_PTEID_ADDR_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_PIC"), _exports_PTEID_PIC_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Certif"), _exports_PTEID_Certif_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_Certifs"), _exports_PTEID_Certifs_obj);
exports_obj->Set(v8::String::NewSymbol("PTEIDPin"), _exports_PTEIDPin_obj);
exports_obj->Set(v8::String::NewSymbol("PTEIDPins"), _exports_PTEIDPins_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_TokenInfo"), _exports_PTEID_TokenInfo_obj);
exports_obj->Set(v8::String::NewSymbol("PTEID_RSAPublicKey"), _exports_PTEID_RSAPublicKey_obj);
exports_obj->Set(v8::String::NewSymbol("tProxyInfo"), _exports_tProxyInfo_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(pteid, pteid_initialize);
#endif
